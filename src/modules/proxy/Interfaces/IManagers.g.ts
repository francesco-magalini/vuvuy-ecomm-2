/// <auto-generated />
  ///<reference path='../Entities/CommerceTypes.g.ts' />
    
    module Commerce.Proxy
    {
    "use strict";
    
      /*** IStoreManager ***/
      export var IStoreOperationsManagerName = "IStoreOperationsManager";
      export interface IStoreOperationsManager {
          roundAmountByTenderTypeAsync(amount: number, tenderTypeId: string): IAsyncResult<number>;
         voidSuspendedTransactionsAsync(suspendedCartIds: string[], shiftId: number, shiftTerminalId: string, reasonCodeLines: Entities.ReasonCodeLine[]): IVoidAsyncResult;
         getMerchantPropertiesByServiceAccountIdAsync(serviceAccountIds: string[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.PaymentMerchantInformation[]>;
         getStoreSafesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.StoreSafe[]>;
         getShiftReconciliationLinesAsync(shiftReconciliationLineRetrievalCriteria: Entities.ShiftReconciliationLineRetrievalCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ShiftReconciliationLine[]>;
         reconcileLinesAsync(shiftReconciliationLines: Entities.ShiftReconciliationLine[], description: string): IVoidAsyncResult;
         undoReconciliationAsync(shiftReconciliationLines: Entities.ShiftReconciliationLine[]): IVoidAsyncResult;
         getReceiptMasksAsync(receiptTransactionType: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ReceiptMask[]>;
         getSearchSuggestionsAsync(searchSuggestionCriteria: Entities.SearchSuggestionCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SearchSuggestion[]>;
         startSessionAsync(transactionId: string): IVoidAsyncResult;
         endSessionAsync(transactionId: string): IVoidAsyncResult;
         activateDeviceAsync(deviceNumber: string, terminalId: string, deviceId: string, forceActivate: boolean, deviceType: number): IAsyncResult<Entities.DeviceActivationResult>;
         massActivateDeviceAsync(deviceNumber: string, terminalId: string, deviceId: string, deviceType: number): IAsyncResult<Entities.DeviceActivationResult>;
         deactivateDeviceAsync(transactionId: string): IVoidAsyncResult;
         createHardwareStationTokenAsync(): IAsyncResult<Entities.CreateHardwareStationTokenResult>;
         validateHardwareStationTokenAsync(deviceNumber: string, hardwareStationToken: string): IAsyncResult<Entities.ValidateHardwareStationTokenResult>;
         getBarcodeByIdAsync(barcodeId: string): IAsyncResult<Entities.Barcode>;
         getButtonGridByIdAsync(buttonGridId: string): IAsyncResult<Entities.ButtonGrid>;
         getButtonGridsByIdsAsync(getButtonGridsByIdsCriteria: Entities.GetButtonGridsByIdsCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ButtonGrid[]>;
         getCardTypesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CardTypeInfo[]>;
         resolveCardTypesAsync(cardNumberPrefix: string, cardType: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CardTypeInfo[]>;
         getSupportedPaymentCardTypesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<string[]>;
         getCitiesAsync(countryRegionId: string, stateProvinceId: string, countyId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CityInfo[]>;
         getCountryRegionsForShippingAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CountryRegionInfo[]>;
         getCountryRegionsByLanguageIdAsync(languageId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CountryRegionInfo[]>;
         getCountiesAsync(countryRegionId: string, stateProvinceId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CountyInfo[]>;
         getCreditMemoByIdAsync(creditMemoId: string): IAsyncResult<Entities.CreditMemo>;
         getDownloadIntervalAsync(dataStoreName: string): IAsyncResult<string>;
         getTerminalDataStoreNameAsync(terminalId: string): IAsyncResult<string>;
         getDownloadLinkAsync(dataStoreName: string, downloadSessionId: number): IAsyncResult<string>;
         getDataDownloadParametersByTerminalAsync(terminalDataDownloadRequestInfo: Entities.TerminalDataDownloadRequestInfo): IAsyncResult<Entities.DataDownloadParameters>;
         getDataUploadParametersByTerminalAsync(terminalDataUploadRequestInfo: Entities.TerminalDataUploadRequestInfo): IAsyncResult<Entities.DataUploadParameters>;
         getDownloadSessionsAsync(dataStoreName: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.DownloadSession[]>;
         getInitialDownloadSessionsAsync(dataStoreName: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.DownloadSession[]>;
         getUploadJobDefinitionsAsync(dataStoreName: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<string[]>;
         getUploadIntervalAsync(dataStoreName: string): IAsyncResult<string>;
         postOfflineTransactionsAsync(offlineTransactionForMPOS: string[]): IAsyncResult<boolean>;
         getRetailTrialPlanOfferAsync(): IAsyncResult<boolean>;
         getLatestNumberSequenceAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.NumberSequenceSeedData[]>;
         getReceiptNumberResetInfoAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ReceiptNumberResetInfo[]>;
         getLoyaltyRewardPointActivityTimelineAsync(cardNumber: string, rewardPointId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.LoyaltyRewardPointActivity[]>;
         getLoyaltyRewardPointActivityTimelineForExpiredPointsAsync(cardNumber: string, rewardPointId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.LoyaltyRewardPointActivity[]>;
         calculateTotalCurrencyAmountAsync(currenciesAmount: Entities.CurrencyRequest[]): IAsyncResult<Entities.CurrencyAmount>;
         getDiscountCodeAsync(discountCode: string): IAsyncResult<Entities.DiscountCode>;
         getDiscountCodesByOfferIdAsync(offerId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.DiscountCode[]>;
         getDiscountCodesByKeywordAsync(keyword: string, activeDate: Date, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.DiscountCode[]>;
         getDistrictsAsync(countryRegionId: string, stateProvinceId: string, countyId: string, cityName: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.DistrictInfo[]>;
         getHardwareStationProfilesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.HardwareStationProfile[]>;
         getHardwareProfileByIdAsync(hardwareProfileId: string): IAsyncResult<Entities.HardwareProfile>;
         getLocalizedStringsAsync(languageId: string, textId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.LocalizedString[]>;
         getOperationPermissionByIdAsync(operationId: number): IAsyncResult<Entities.OperationPermission>;
         getReasonCodesByIdAsync(reasonCodeGroupId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ReasonCode[]>;
         searchReportDataSetAsync(reportId: string, parameters: Entities.CommerceProperty[]): IAsyncResult<Entities.ReportDataSet>;
         getReportDataSetByIdAsync(reportId: string): IAsyncResult<Entities.ReportDataSet>;
         getSrsReportDataSetAsync(reportId: string, parameters: Entities.CommerceProperty[]): IAsyncResult<Entities.ReportDataSet>;
         getIncomeExpenseAccountsAsync(incomeExpenseAccountType: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.IncomeExpenseAccount[]>;
         getStateProvincesAsync(countryRegionId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.StateProvinceInfo[]>;
         getZipCodesAsync(countryRegionId: string, stateProvinceId: string, countyId: string, cityName: string, district: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ZipCodeInfo[]>;
         getAddressFromZipCodeAsync(countryRegionId: string, zipPostalCode: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ZipCodeInfo[]>;
         disassembleKitTransactionsAsync(kitTransaction: Entities.KitTransaction): IAsyncResult<Entities.KitTransaction>;
         issueLoyaltyCardAsync(loyaltyCard: Entities.LoyaltyCard): IAsyncResult<Entities.LoyaltyCard>;
         getLoyaltyCardAsync(cardNumber: string): IAsyncResult<Entities.LoyaltyCard>;
         getCustomerLoyaltyCardsAsync(accountNumber: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.LoyaltyCard[]>;
         getLoyaltyCardTransactionsAsync(cardNumber: string, rewardPointId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.LoyaltyCardTransaction[]>;
         getLoyaltyRewardPointsExpiringSoonAsync(cardNumber: string, rewardPointId: string, daysToExpiry: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.LoyaltyRewardPointActivity[]>;
         searchJournalTransactionsAsync(searchCriteria: Entities.TransactionSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Transaction[]>;
         getGiftCardAsync(giftCardId: string, tenderTypeId: string, pin: string, expirationMonth: number, expirationYear: number): IAsyncResult<Entities.GiftCard>;
         getGiftCardInquiryAsync(giftCardId: string): IAsyncResult<Entities.GiftCard>;
         getNonSalesTransactionsAsync(shiftId: string, shiftTerminalId: string, nonSalesTenderTypeValue: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.NonSalesTransaction[]>;
         createNonSalesTransactionAsync(nonSalesTransaction: Entities.NonSalesTransaction): IAsyncResult<Entities.NonSalesTransaction>;
         createDropAndDeclareTransactionAsync(dropAndDeclareTransaction: Entities.DropAndDeclareTransaction): IAsyncResult<Entities.DropAndDeclareTransaction>;
         getTaxOverridesAsync(overrideBy: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.TaxOverride[]>;
         getCustomerBalanceAsync(accountNumber: string, invoiceAccountNumber: string): IAsyncResult<Entities.CustomerBalances>;
         initiateLinkToExistingCustomerAsync(email: string, activationToken: string, emailTemplateId: string, emailProperties: Entities.NameValuePair[]): IAsyncResult<Entities.LinkToExistingCustomerResult>;
         finalizeLinkToExistingCustomerAsync(email: string, activationToken: string): IAsyncResult<Entities.LinkToExistingCustomerResult>;
         unlinkFromExistingCustomerAsync(): IVoidAsyncResult;
         getOfflineSyncStatusAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.OfflineSyncStatsLine[]>;
         getOfflinePendingTransactionCountAsync(): IAsyncResult<number>;
         getOfflinePendingTransactionCountByShiftAsync(shiftId: number, shiftTerminalId: string): IAsyncResult<number>;
         updateDownloadSessionAsync(downloadSession: Entities.DownloadSession): IAsyncResult<boolean>;
         updateApplicationVersionAsync(appVersion: string): IVoidAsyncResult;
         getStorageAccessTokenForUploadAsync(): IAsyncResult<Entities.StorageAccessToken>;
         getBusinessProcessModelLibrariesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Framework[]>;
         getBusinessProcessModelLibraryAsync(businessProcessModelFrameworkLineId: number, hierarchyDepth: number): IAsyncResult<Entities.Framework>;
         searchTaskGuidesByTitleAsync(businessProcessModelFrameworkLineId: number, taskGuideSearchText: string, queryTypeValue: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.TaskGuidesSearchResult[]>;
         generateBusinessProcessModelPackageAsync(taskRecording: Entities.Recording): IAsyncResult<string>;
         downloadRecordingAsync(businessProcessModelLineId: number): IAsyncResult<Entities.Recording>;
         loadRecordingFromFileAsync(recordingUrl: string): IAsyncResult<Entities.Recording>;
         generateRecordingFileAsync(taskRecording: Entities.Recording): IAsyncResult<string>;
         generateTrainingDocumentAsync(taskRecording: Entities.Recording): IAsyncResult<string>;
         generateRecordingBundleAsync(taskRecording: Entities.Recording): IAsyncResult<string>;
         uploadRecordingAsync(taskRecording: Entities.Recording, businessProcessModelLineId: number): IVoidAsyncResult;
         getAttributeDefinitionsAsync(attributeDefinitionCriteria: Entities.AttributeDefinitionCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.AttributeDefinition[]>;
         getAttributeGroupDefinitionsAsync(attributeGroupDefinitionCriteria: Entities.AttributeGroupDefinitionCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.AttributeGroupDefinition[]>;
         saveFiscalTransactionAsync(fiscalTransaction: Entities.FiscalTransaction): IVoidAsyncResult;
         validatePrintReceiptCopyAllowedAsync(salesOrderToPrint: Entities.SalesOrder): IVoidAsyncResult;
         registerAuditEventAsync(auditEvent: Entities.AuditEvent): IVoidAsyncResult;
         registerAndGetAuditEventAsync(auditEvent: Entities.AuditEvent): IAsyncResult<Entities.AuditEvent>;
         getInventoryAvailableToPromiseAsync(productId: number, itemId: string, inventLocationId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.InventoryAvailableToPromise[]>;
         getSalesOrdersWithNoFiscalTransactionsAsync(storeNumber: string, terminalId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SalesOrder[]>;
         getNotificationsAsync(subscribedOperations: number[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.NotificationItem[]>;
         acknowledgeNotificationsAsync(lastPullDateTime: Date): IVoidAsyncResult;
         getFiscalIntegrationFiscalDocumentAsync(hardwareProfileId: string, functionalityProfileGroupId: string, fiscalIntegrationDocumentRetrievalCriteria: Entities.FiscalIntegrationDocumentRetrievalCriteria, connectorType: number): IAsyncResult<Entities.FiscalIntegrationDocument>;
         getFiscalIntegrationNonFiscalDocumentAsync(hardwareProfileId: string, functionalityProfileGroupId: string, fiscalIntegrationDocumentRetrievalCriteria: Entities.FiscalIntegrationDocumentRetrievalCriteria, connectorType: number): IAsyncResult<Entities.FiscalIntegrationDocument>;
         getFiscalIntegrationFiscalServiceSetupDocumentAsync(hardwareProfileId: string, functionalityProfileGroupId: string, connectorType: number): IAsyncResult<Entities.FiscalIntegrationDocument>;
         getFiscalIntegrationFiscalServiceReadDataDocumentAsync(hardwareProfileId: string, functionalityProfileGroupId: string, connectorType: number): IAsyncResult<Entities.FiscalIntegrationDocument>;
         processFiscalIntegrationFiscalServiceReadDataResultAsync(hardwareProfileId: string, functionalityProfileGroupId: string, documentToProcess: string, connectorType: number): IVoidAsyncResult;
         saveFiscalIntegrationRegistrationResultAsync(hardwareProfileId: string, functionalityProfileGroupId: string, registrationResult: Entities.FiscalIntegrationRegistrationResult, connectorType: number): IVoidAsyncResult;
         getFiscalIntegrationRegistrationProcessAsync(): IAsyncResult<Entities.FiscalIntegrationRegistrationProcess>;
         getChannelSupportedFiscalIntegrationEventsByGroupAsync(functionalityProfileGroupId: string): IAsyncResult<Entities.FiscalIntegrationSupportedEvents>;
         getFiscalIntegrationTechnicalProfilesAsync(hardwareProfileId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.FiscalIntegrationTechnicalProfile[]>;
         getFiscalIntegrationTechnicalProfilesByFunctionalityGroupIdsAsync(hardwareProfileId: string, functionalityProfileGroupId: string[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.FiscalIntegrationTechnicalProfile[]>;
         backupFiscalRegistrationProcessContextAsync(terminalId: string, storeNumber: string, channelId: number, fiscalProcessCompleted: boolean, fiscalIntegrationSerializedContext: string): IVoidAsyncResult;
         getActiveFiscalRegistrationProcessContextBackupAsync(terminalId: string, storeNumber: string, channelId: number): IAsyncResult<string>;
         getFiscalIntegrationTechnicalProfilesBySearchCriteriaAsync(hardwareProfileId: string, fiscalIntegrationTechnicalProfileSearchCriteria: Entities.FiscalIntegrationTechnicalProfileSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.FiscalIntegrationTechnicalProfile[]>;
         getFiscalIntegrationServiceStatusAsync(fiscalIntegrationServiceInfo: Entities.FiscalIntegrationServiceInfo): IAsyncResult<Entities.FiscalIntegrationServiceStatus>;
         submitFiscalIntegrationDocumentAsync(documentToSubmit: string, fiscalIntegrationServiceInfo: Entities.FiscalIntegrationServiceInfo): IAsyncResult<Entities.FiscalIntegrationServiceCommunicationResult>;
         getFeatureStatesAsync(featureNames: string[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.FeatureState[]>;
         getLastFiscalIntegrationSequentialSignaturesAsync(sequentialKeys: string[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.FiscalIntegrationSequentialSignatureData[]>;
         getAvailablePromotionsAsync(searchCriteria: Entities.DiscountsSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Promotion[]>;
         createFiscalTransactionAsync(functionalityProfileGroupId: string, registrationResult: Entities.FiscalIntegrationRegistrationResult, connectorType: number): IAsyncResult<Entities.FiscalTransaction>;
         getButtonGridsAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ButtonGrid[]>;
         getButtonGridsByScreenSizeAsync(height: number, width: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ButtonGrid[]>;
         getCashDeclarationsAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CashDeclaration[]>;
         getCountryRegionsAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CountryRegionInfo[]>;
         getCustomerGroupsAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CustomerGroup[]>;
         getDeliveryOptionsAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.DeliveryOption[]>;
         getChannelsByTypeAsync(channelType: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ChannelIdentity[]>;
         getChannelsAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ChannelIdentity[]>;
         getEnvironmentConfigurationAsync(): IAsyncResult<Entities.EnvironmentConfiguration>;
         getSearchConfigurationAsync(): IAsyncResult<Entities.SearchConfiguration>;
         getExtensionPackageDefinitionsAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ExtensionPackageDefinition[]>;
         getExtensionProfileAsync(): IAsyncResult<Entities.ExtensionProfile>;
         getDeviceConfigurationAsync(): IAsyncResult<Entities.DeviceConfiguration>;
         getVisualProfileAsync(): IAsyncResult<Entities.VisualProfile>;
         getLanguagesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SupportedLanguage[]>;
         getAffiliationsAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Affiliation[]>;
         getOperationPermissionsAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.OperationPermission[]>;
         getReasonCodesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ReasonCode[]>;
         getReturnOrderReasonCodesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ReasonCode[]>;
         getSalesTaxGroupsAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SalesTaxGroup[]>;
         getTenderTypesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.TenderType[]>;
         getUnitsOfMeasureAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.UnitOfMeasure[]>;
         getDiscountCodesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.DiscountCode[]>;
         getCurrenciesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Currency[]>;
         getCurrenciesAmountAsync(currencyCode: string, amount: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CurrencyAmount[]>;
         getCommissionSalesGroupsAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CommissionSalesGroup[]>;
         searchCommissionSalesGroupsAsync(searchText: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CommissionSalesGroup[]>;
         getPaymentMerchantInformationAsync(hardwareProfileId: string): IAsyncResult<Entities.PaymentMerchantInformation>;
         getPaymentPropertiesIfModifiedAsync(hardwareProfileId: string, merchantInformationHash: string): IAsyncResult<Entities.PaymentMerchantInformation>;
         getOnlineChannelPublishStatusAsync(): IAsyncResult<number>;
         setOnlineChannelPublishStatusAsync(publishingStatus: number, statusMessage: string): IVoidAsyncResult;
         getInventoryConfigurationAsync(): IAsyncResult<Entities.ChannelInventoryConfiguration>;
         getAvailableDevicesAsync(deviceType: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Device[]>;
         getImageBlobAsync(imageId: number): IAsyncResult<Entities.MediaBlob>;
         getExtensibleEnumerationsAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ExtensibleEnumerationContainer[]>;
         getAddressPurposesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.AddressPurpose[]>;
         getReturnPolicyAsync(): IAsyncResult<Entities.ReturnPolicy>;
         }

      
      /*** ICategoryManager ***/
      export var ICategoryManagerName = "ICategoryManager";
      export interface ICategoryManager {
          createAsync(entity: Entities.Category): IAsyncResult<Entities.Category>;
          readAsync(recordId: number): IAsyncResult<Entities.Category>;
          readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Category[]>;
          updateAsync(entity: Entities.Category): IAsyncResult<Entities.Category>;
          deleteAsync(entity: Entities.Category): IVoidAsyncResult;
          getCategoriesAsync(channelId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Category[]>;
         getAttributesAsync(categoryId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.AttributeCategory[]>;
         getChildrenAsync(channelId: number, categoryId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Category[]>;
         }
      
      /*** ICartManager ***/
      export var ICartManagerName = "ICartManager";
      export interface ICartManager {
          createAsync(entity: Entities.Cart): IAsyncResult<Entities.Cart>;
          readAsync(id: string): IAsyncResult<Entities.Cart>;
          readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Cart[]>;
          updateAsync(entity: Entities.Cart): IAsyncResult<Entities.Cart>;
          deleteAsync(entity: Entities.Cart): IVoidAsyncResult;
          checkoutAsync(id: string, receiptEmail: string, tokenizedPaymentCard: Entities.TokenizedPaymentCard, receiptNumberSequence: string, cartTenderLines: Entities.CartTenderLine[], cartVersion: number): IAsyncResult<Entities.SalesOrder>;
         getMaxLoyaltyPointsToRedeemForTransactionBalanceAsync(id: string, loyaltyCardId: string, currencyCode: string): IAsyncResult<Entities.LoyaltyPointRedemptionEstimate>;
         getPaymentsHistoryAsync(id: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.TenderLine[]>;
         getLineDeliveryOptionsByChannelIdAsync(id: string, lineShippingAddresses: Entities.LineShippingAddress[], channelId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SalesLineDeliveryOption[]>;
         getLineDeliveryOptionsAsync(id: string, lineShippingAddresses: Entities.LineShippingAddress[], filterOption: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SalesLineDeliveryOption[]>;
         getDeliveryPreferencesAsync(id: string): IAsyncResult<Entities.CartDeliveryPreferences>;
         getDeliveryOptionsAsync(id: string, shippingAddress: Entities.Address, cartLineIds: string[], filterOption: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.DeliveryOption[]>;
         updateLineDeliverySpecificationsAsync(id: string, lineDeliverySpecifications: Entities.LineDeliverySpecification[]): IAsyncResult<Entities.Cart>;
         updateDeliverySpecificationAsync(id: string, deliverySpecification: Entities.DeliverySpecification): IAsyncResult<Entities.Cart>;
         addChargeAsync(id: string, moduleTypeValue: number, chargeCode: string, amount: number): IAsyncResult<Entities.Cart>;
         overrideChargeAsync(id: string, chargeLineId: string, amount: number, reasonCodeLines: Entities.ReasonCodeLine[]): IAsyncResult<Entities.Cart>;
         addCartLineChargeAsync(id: string, cartLineId: string, moduleTypeValue: number, chargeCode: string, amount: number): IAsyncResult<Entities.Cart>;
         overrideCartLineChargeAsync(id: string, cartLineId: string, chargeLineId: string, amount: number, reasonCodeLines: Entities.ReasonCodeLine[]): IAsyncResult<Entities.Cart>;
         voidAsync(id: string, reasonCodeLines: Entities.ReasonCodeLine[], cartVersion: number): IAsyncResult<Entities.SalesOrder>;
         addCartLinesAsync(id: string, cartLines: Entities.CartLine[], cartVersion: number): IAsyncResult<Entities.Cart>;
         updateCartLinesAsync(id: string, cartLines: Entities.CartLine[], cartVersion: number): IAsyncResult<Entities.Cart>;
         voidCartLinesAsync(id: string, cartLines: Entities.CartLine[]): IAsyncResult<Entities.Cart>;
         removeCartLinesAsync(id: string, cartLineIds: string[]): IAsyncResult<Entities.Cart>;
         addTenderLineAsync(id: string, cartTenderLine: Entities.CartTenderLine, cartVersion: number): IAsyncResult<Entities.Cart>;
         calculateTenderDiscountAsync(id: string, tenderLine: Entities.TenderLine, cartVersion: number): IAsyncResult<Entities.TenderDiscountLine>;
         addPreprocessedTenderLineAsync(id: string, preprocessedTenderLine: Entities.TenderLine, cartVersion: number): IAsyncResult<Entities.Cart>;
         validateTenderLineForAddAsync(id: string, tenderLine: Entities.TenderLine): IVoidAsyncResult;
         updateTenderLineSignatureAsync(id: string, tenderLineId: string, signatureData: string): IAsyncResult<Entities.Cart>;
         getDeclinedOrVoidedCardReceiptsAsync(id: string, preprocessedTenderLine: Entities.TenderLine, receiptRetrievalCriteria: Entities.ReceiptRetrievalCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Receipt[]>;
         copyAsync(id: string, targetCartType: number): IAsyncResult<Entities.Cart>;
         addInvoicedSalesLinesToCartAsync(transactionId: string, invoicedSalesLinesIds: number[]): IAsyncResult<Entities.Cart>;
         voidTenderLineAsync(id: string, tenderLineId: string, reasonCodeLines: Entities.ReasonCodeLine[], isPreprocessed: boolean, forceVoid: boolean): IAsyncResult<Entities.Cart>;
         issueGiftCardAsync(id: string, giftCardId: string, amount: number, currencyCode: string, lineDescription: string, tenderTypeId: string): IAsyncResult<Entities.Cart>;
         refillGiftCardAsync(id: string, giftCardId: string, amount: number, currencyCode: string, lineDescription: string, tenderTypeId: string): IAsyncResult<Entities.Cart>;
         cashOutGiftCardAsync(id: string, giftCardId: string, amount: number, currencyCode: string, lineDescription: string, tenderTypeId: string): IAsyncResult<Entities.Cart>;
         suspendAsync(id: string): IAsyncResult<Entities.Cart>;
         suspendWithJournalAsync(id: string, journalCartId: string, receiptNumberSequence: string): IAsyncResult<Entities.Cart>;
         resumeAsync(id: string): IAsyncResult<Entities.Cart>;
         resumeFromReceiptIdAsync(receiptId: string): IAsyncResult<Entities.Cart>;
         removeDiscountCodesAsync(id: string, discountCodes: string[]): IAsyncResult<Entities.Cart>;
         getSuspendedAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Cart[]>;
         searchAsync(cartSearchCriteria: Entities.CartSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Cart[]>;
         overrideCartLinePriceAsync(id: string, cartLineId: string, price: number): IAsyncResult<Entities.Cart>;
         getCardPaymentAcceptPointAsync(id: string, cardPaymentAcceptSettings: Entities.CardPaymentAcceptSettings, extensionProperties: Entities.CommerceProperty[]): IAsyncResult<Entities.CardPaymentAcceptPoint>;
         retrieveCardPaymentAcceptResultAsync(resultAccessCode: string, extensionProperties: Entities.CommerceProperty[], cartId: string, settings: Entities.RetrievePaymentResultSettings): IAsyncResult<Entities.CardPaymentAcceptResult>;
         recallOrderAsync(transactionId: string, salesId: string): IAsyncResult<Entities.Cart>;
         recallQuoteAsync(transactionId: string, quoteId: string): IAsyncResult<Entities.Cart>;
         recalculateOrderAsync(id: string): IAsyncResult<Entities.Cart>;
         resetAllChargesAsync(id: string): IAsyncResult<Entities.Cart>;
         getPromotionsAsync(id: string): IAsyncResult<Entities.CartPromotions>;
         getAvailablePromotionsAsync(id: string, cartLineIds: string[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CartPromotionLine[]>;
         recallSalesInvoiceAsync(transactionId: string, invoiceId: string): IAsyncResult<Entities.Cart>;
         addOrderInvoiceAsync(id: string, invoiceId: string, lineDescription: string): IAsyncResult<Entities.Cart>;
         addInvoicesAsync(id: string, invoiceIds: string[]): IAsyncResult<Entities.Cart>;
         updateCommissionSalesGroupAsync(transactionId: string, cartLineId: string, commissionSalesGroup: string, isUserInitiated: boolean): IAsyncResult<Entities.Cart>;
         addCouponsAsync(id: string, couponCodes: string[], isLegacyDiscountCode: boolean): IAsyncResult<Entities.Cart>;
         removeCouponsAsync(id: string, couponCodes: string[]): IAsyncResult<Entities.Cart>;
         getChargeCodesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ChargeCode[]>;
         addDiscountCodeAsync(id: string, discountCode: string): IAsyncResult<Entities.Cart>;
         getReturnOptionsAsync(id: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.TenderTypeAmount[]>;
         validateForCheckoutAsync(id: string, cartVersion: number): IAsyncResult<Entities.CartLineValidationResults>;
         }
      
      /*** ICustomerManager ***/
      export var ICustomerManagerName = "ICustomerManager";
      export interface ICustomerManager {
          createAsync(entity: Entities.Customer): IAsyncResult<Entities.Customer>;
          readAsync(accountNumber: string): IAsyncResult<Entities.Customer>;
          readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Customer[]>;
          updateAsync(entity: Entities.Customer): IAsyncResult<Entities.Customer>;
          deleteAsync(entity: Entities.Customer): IVoidAsyncResult;
          searchAsync(customerSearchCriteria: Entities.CustomerSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.GlobalCustomer[]>;
         searchByFieldsAsync(customerSearchByFieldCriteria: Entities.CustomerSearchByFieldCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.GlobalCustomer[]>;
         getByAccountNumbersAsync(accountNumbers: string[], searchLocationValue: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Customer[]>;
         createCustomerTimelineItemAsync(customerTimelineItem: Entities.CustomerTimelineItem): IAsyncResult<Entities.CustomerTimelineItem>;
         updateCustomerTimelineItemAsync(customerTimelineItem: Entities.CustomerTimelineItem): IAsyncResult<Entities.CustomerTimelineItem>;
         getOrderHistoryAsync(accountNumber: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SalesOrder[]>;
         getOrderShipmentsHistoryAsync(accountNumber: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.OrderShipments[]>;
         postNonTransactionalActivityLoyaltyPointsAsync(loyaltyCardId: string, channelId: number, affiliationId: number, activityTypeId: string): IVoidAsyncResult;
         getPurchaseHistoryAsync(accountNumber: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.PurchaseHistory[]>;
         getCustomerSearchFieldsAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CustomerSearchField[]>;
         getCustomerTimelineItemTypesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CustomerTimelineItemTypeMap[]>;
         getCustomerTimelineItemsAsync(accountNumber: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CustomerTimelineItem[]>;
         getCustomerTimelineRefinersAsync(accountNumber: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CustomerTimelineRefiner[]>;
         getTitlesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CustomerTitle[]>;
         }
      
      /*** IEmployeeManager ***/
      export var IEmployeeManagerName = "IEmployeeManager";
      export interface IEmployeeManager {
          createAsync(entity: Entities.Employee): IAsyncResult<Entities.Employee>;
          readAsync(staffId: string): IAsyncResult<Entities.Employee>;
          readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Employee[]>;
          updateAsync(entity: Entities.Employee): IAsyncResult<Entities.Employee>;
          deleteAsync(entity: Entities.Employee): IVoidAsyncResult;
          getActivitiesAsync(employeeActivitySearchCriteria: Entities.EmployeeActivitySearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.EmployeeActivity[]>;
         getManagerActivityViewAsync(employeeActivitySearchCriteria: Entities.EmployeeActivitySearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.EmployeeActivity[]>;
         registerActivityAsync(staffId: string, employeeActivityType: number): IAsyncResult<Date>;
         getAccessibleOrgUnitsAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.OrgUnit[]>;
         getLatestActivityAsync(): IAsyncResult<Entities.EmployeeActivity>;
         searchClientBookCustomersAsync(clientBookCustomerSearchCriteria: Entities.ClientBookCustomerSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ClientBookCustomer[]>;
         getClientBookSearchRefinersAsync(refinerSourceTypes: number[], searchCriteria: Entities.ClientBookCustomerSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ClientBookRefiner[]>;
         updateClientBookAsync(clientBookChanges: Entities.ClientBookChanges): IVoidAsyncResult;
         getCurrentEmployeeAsync(): IAsyncResult<Entities.Employee>;
         }
      
      /*** IChecklistManager ***/
      export var IChecklistManagerName = "IChecklistManager";
      export interface IChecklistManager {
          createAsync(entity: Entities.Checklist): IAsyncResult<Entities.Checklist>;
          readAsync(recordId: number): IAsyncResult<Entities.Checklist>;
          readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Checklist[]>;
          updateAsync(entity: Entities.Checklist): IAsyncResult<Entities.Checklist>;
          deleteAsync(entity: Entities.Checklist): IVoidAsyncResult;
          searchChecklistsAsync(checklistSearchCriteria: Entities.ChecklistSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Checklist[]>;
         searchTasksAsync(taskSearchCriteria: Entities.TaskSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ChecklistTask[]>;
         createTaskAsync(createTask: Entities.ChecklistTask): IAsyncResult<Entities.ChecklistTask>;
         updateChecklistsAsync(updateChecklists: Entities.Checklist[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Checklist[]>;
         updateTasksAsync(updateTasks: Entities.ChecklistTask[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ChecklistTask[]>;
         }
      
      /*** ISalesOrderManager ***/
      export var ISalesOrderManagerName = "ISalesOrderManager";
      export interface ISalesOrderManager {
          createAsync(entity: Entities.SalesOrder): IAsyncResult<Entities.SalesOrder>;
          readAsync(id: string): IAsyncResult<Entities.SalesOrder>;
          readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SalesOrder[]>;
          updateAsync(entity: Entities.SalesOrder): IAsyncResult<Entities.SalesOrder>;
          deleteAsync(entity: Entities.SalesOrder): IVoidAsyncResult;
          searchSalesTransactionsByReceiptIdAsync(receiptId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SalesOrder[]>;
         searchAsync(salesOrderSearchCriteria: Entities.SalesOrderSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SalesOrder[]>;
         searchOrdersAsync(orderSearchCriteria: Entities.OrderSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SalesOrder[]>;
         getReceiptsAsync(id: string, receiptRetrievalCriteria: Entities.ReceiptRetrievalCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Receipt[]>;
         sendReceiptAsync(searchCriteria: Entities.SearchReceiptCriteria, recipientAddresses: Entities.ElectronicAddress[]): IVoidAsyncResult;
         getGiftReceiptsAsync(id: string, salesLineNumbers: number[], receiptRetrievalCriteria: Entities.ReceiptRetrievalCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Receipt[]>;
         getByReceiptIdAsync(receiptId: string, orderStoreNumber: string, orderTerminalId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SalesOrder[]>;
         getSalesOrderDetailsByTransactionIdAsync(transactionId: string, searchLocationValue: number): IAsyncResult<Entities.SalesOrder>;
         getSalesOrderDetailsBySalesIdAsync(salesId: string): IAsyncResult<Entities.SalesOrder>;
         getSalesOrderDetailsByQuotationIdAsync(quotationId: string): IAsyncResult<Entities.SalesOrder>;
         shipFulfillmentLinesAsync(shipFulfillmentLines: Entities.ShipFulfillmentLine[]): IVoidAsyncResult;
         acceptFulfillmentLinesAsync(fulfillmentLineParameter: Entities.FulfillmentLineParameter[]): IVoidAsyncResult;
         pickFulfillmentLinesAsync(fulfillmentLineParameter: Entities.FulfillmentLineParameter[]): IVoidAsyncResult;
         packFulfillmentLinesAsync(fulfillmentLineParameter: Entities.FulfillmentLineParameter[]): IVoidAsyncResult;
         markFulfillmentLinesAsPackedAsync(fulfillmentLineParameter: Entities.FulfillmentLineParameter[]): IAsyncResult<string>;
         markAsPickedAsync(fulfillmentLineParameter: Entities.FulfillmentLineParameter[]): IVoidAsyncResult;
         getFulfillmentPickingListsAsync(pickingListFulfillmentLine: Entities.FulfillmentLineParameter[], hardwareProfileId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Receipt[]>;
         getFulfillmentLinesAsync(fulfillmentLineSearchCriteria: Entities.FulfillmentLineSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.FulfillmentLine[]>;
         getFulfillmentPackingSlipsAsync(packFulfillmentLines: Entities.FulfillmentLineParameter[], hardwareProfileId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Receipt[]>;
         getFulfillmentPackingSlipsByIdAsync(salesId: string, packingSlipId: string, hardwareProfileId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Receipt[]>;
         rejectFulfillmentLinesAsync(rejectFulfillmentLines: Entities.RejectFulfillmentLine[]): IVoidAsyncResult;
         getInvoicesBySalesIdAsync(salesId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SalesInvoice[]>;
         getOrderInvoicesAsync(customerId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.OrderInvoice[]>;
         getInvoicesAsync(invoiceSearchCriteria: Entities.InvoiceSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.OrderInvoice[]>;
         getInvoicedSalesLinesBySalesIdsAsync(salesIds: string[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SalesLine[]>;
         createPickingListAsync(salesId: string): IVoidAsyncResult;
         createPickingListForItemsAsync(salesId: string, pickAndPackSalesLineParameters: Entities.PickAndPackSalesLineParameter[]): IAsyncResult<string>;
         getPickingListsAsync(id: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.PickingList[]>;
         createPackingSlipAsync(salesId: string): IVoidAsyncResult;
         getPackingSlipsDataAsync(salesId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.PackingSlipData[]>;
         }
      
      /*** IShiftManager ***/
      export var IShiftManagerName = "IShiftManager";
      export interface IShiftManager {
          createAsync(entity: Entities.Shift): IAsyncResult<Entities.Shift>;
          readAsync(shiftId: number, terminalId: string): IAsyncResult<Entities.Shift>;
          readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Shift[]>;
          updateAsync(entity: Entities.Shift): IAsyncResult<Entities.Shift>;
          deleteAsync(entity: Entities.Shift): IVoidAsyncResult;
          upsertShiftsAsync(shifts: Entities.Shift[]): IAsyncResult<boolean>;
         upsertAndValidateShiftsAsync(shiftId: number, terminalId: string, shifts: Entities.Shift[]): IAsyncResult<boolean>;
         deleteShiftsAsync(): IAsyncResult<boolean>;
         openAsync(shiftId: number, cashDrawer: string, isShared: boolean): IAsyncResult<Entities.Shift>;
         closeAsync(shiftId: number, terminalId: string, transactionId: string, forceClose: boolean, hasOfflinePendingTransactions: boolean): IAsyncResult<Entities.Shift>;
         getSuspendedCartsByShiftAsync(shiftTerminalId: string, shiftId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SuspendedCart[]>;
         voidSuspendedCartsAsync(shiftId: number, terminalId: string): IVoidAsyncResult;
         saveTenderLinesAsync(shiftId: number, terminalId: string, tenderLines: Entities.ShiftTenderLine[]): IVoidAsyncResult;
         blindCloseAsync(shiftId: number, terminalId: string, transactionId: string, forceClose: boolean): IAsyncResult<Entities.Shift>;
         forceDeleteAsync(shiftId: number, terminalId: string, transactionId: string): IVoidAsyncResult;
         resumeAsync(shiftId: number, terminalId: string, cashDrawer: string): IAsyncResult<Entities.Shift>;
         useAsync(shiftId: number, terminalId: string): IAsyncResult<Entities.Shift>;
         suspendAsync(shiftId: number, terminalId: string, transactionId: string): IAsyncResult<Entities.Shift>;
         getByStatusAsync(statusValue: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Shift[]>;
         getByStatusFilterByUserRoleAsync(statusValue: number, filterByUserRole: boolean, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Shift[]>;
         getByRetrievalCriteriaAsync(shiftRetrievalCriteria: Entities.ShiftRetrievalCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Shift[]>;
         getXReportAsync(shiftId: number, terminalId: string, transactionId: string, hardwareProfileId: string): IAsyncResult<Entities.Receipt>;
         getZReportAsync(transactionId: string, hardwareProfileId: string): IAsyncResult<Entities.Receipt>;
         getOpenTenderLinesAsync(shiftId: number, terminalId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ShiftTenderLine[]>;
         validateCashDrawerLimitAsync(shiftTerminalId: string, shiftId: number): IVoidAsyncResult;
         }
      
      /*** IStockCountJournalManager ***/
      export var IStockCountJournalManagerName = "IStockCountJournalManager";
      export interface IStockCountJournalManager {
          createAsync(entity: Entities.StockCountJournal): IAsyncResult<Entities.StockCountJournal>;
          readAsync(journalId: string): IAsyncResult<Entities.StockCountJournal>;
          readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.StockCountJournal[]>;
          updateAsync(entity: Entities.StockCountJournal): IAsyncResult<Entities.StockCountJournal>;
          deleteAsync(entity: Entities.StockCountJournal): IVoidAsyncResult;
          syncAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.StockCountJournal[]>;
         syncTransactionsAsync(journalId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.StockCountJournalTransaction[]>;
         calculateEstimatedOnHandInventoryAsync(journalId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.StockCountJournalTransaction[]>;
         removeJournalAsync(journalId: string): IVoidAsyncResult;
         removeTransactionAsync(journalId: string, itemId: string, inventSizeId: string, inventColorId: string, inventStyleId: string, configurationId: string): IVoidAsyncResult;
         removeStockCountLineByLineIdAsync(journalId: string, stockCountLineId: number): IVoidAsyncResult;
         removeStockCountLineByProductRecIdAsync(journalId: string, productId: number): IVoidAsyncResult;
         commitAsync(journalId: string): IVoidAsyncResult;
         }
      
      /*** IOrgUnitManager ***/
      export var IOrgUnitManagerName = "IOrgUnitManager";
      export interface IOrgUnitManager {
          createAsync(entity: Entities.OrgUnit): IAsyncResult<Entities.OrgUnit>;
          readAsync(orgUnitNumber: string): IAsyncResult<Entities.OrgUnit>;
          readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.OrgUnit[]>;
          updateAsync(entity: Entities.OrgUnit): IAsyncResult<Entities.OrgUnit>;
          deleteAsync(entity: Entities.OrgUnit): IVoidAsyncResult;
          getTillLayoutAsync(height: number, width: number): IAsyncResult<Entities.TillLayout>;
         searchAsync(storeSearchCriteria: Entities.SearchStoreCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.OrgUnit[]>;
         getOrgUnitLocationsByAreaAsync(searchArea: Entities.SearchArea, deliveryModeTypeFilter: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.OrgUnitLocation[]>;
         searchOrgUnitLocationsAsync(orgUnitLocationSearchCriteria: Entities.OrgUnitLocationSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.OrgUnitLocation[]>;
         getOrgUnitConfigurationAsync(): IAsyncResult<Entities.ChannelConfiguration>;
         getStoreHoursAsync(storeNumber: string): IAsyncResult<Entities.StoreHours>;
         getAvailableInventoryAsync(itemId: string, variantId: string, barcode: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.OrgUnitAvailability[]>;
         getAvailableInventoryNearbyAsync(itemIds: Entities.ItemUnit[], searchArea: Entities.SearchArea, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.OrgUnitAvailability[]>;
         getProductAvailabilityByDimensionsAsync(inventLocationIds: string[], productId: number, productDimensionCombinations: Entities.ProductDimensionCombination[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.OrgUnitAvailability[]>;
         searchProductAvailabilityAsync(productId: number, orgUnitAvailabilitySearchCriteria: Entities.OrgUnitAvailabilitySearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.OrgUnitAvailability[]>;
         getTerminalInfoAsync(orgUnitNumber: string, deviceType: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.TerminalInfo[]>;
         getProductAvailabilityAsync(productId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.OrgUnitAvailability[]>;
         }
      
      /*** IProductManager ***/
      export var IProductManagerName = "IProductManager";
      export interface IProductManager {
          createAsync(entity: Entities.Product): IAsyncResult<Entities.Product>;
          readAsync(recordId: number): IAsyncResult<Entities.Product>;
          readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Product[]>;
          updateAsync(entity: Entities.Product): IAsyncResult<Entities.Product>;
          deleteAsync(entity: Entities.Product): IVoidAsyncResult;
          getDimensionValuesAsync(recordId: number, channelId: number, dimension: number, matchingDimensionValues: Entities.ProductDimension[], kitVariantResolutionContext: Entities.ProductVariantResolutionOnKitSelectionContext, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductDimensionValue[]>;
         getVariantsByDimensionValuesAsync(recordId: number, channelId: number, matchingDimensionValues: Entities.ProductDimension[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SimpleProduct[]>;
         getVariantsByComponentsInSlotsAsync(recordId: number, channelId: number, matchingSlotToComponentRelationship: Entities.ComponentInSlotRelation[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SimpleProduct[]>;
         getByIdsAsync(channelId: number, productIds: number[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SimpleProduct[]>;
         compareAsync(channelId: number, catalogId: number, productIds: number[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductComparisonLine[]>;
         getRecommendedProductsAsync(productIds: number[], customerId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductSearchResult[]>;
         refineSearchByCategoryAsync(channelId: number, catalogId: number, categoryId: number, refinementCriteria: Entities.ProductRefinerValue[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductSearchResult[]>;
         refineSearchByTextAsync(channelId: number, catalogId: number, searchText: string, refinementCriteria: Entities.ProductRefinerValue[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductSearchResult[]>;
         getProductSearchRefinersAsync(searchCriteria: Entities.ProductSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductRefiner[]>;
         searchAsync(productSearchCriteria: Entities.ProductSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Product[]>;
         getRefinersAsync(productSearchCriteria: Entities.ProductSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductRefiner[]>;
         changesAsync(productSearchCriteria: Entities.ChangedProductsSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Product[]>;
         beginReadChangedProductsAsync(changedProductSearchCriteria: Entities.ChangedProductsSearchCriteria): IAsyncResult<Entities.ReadChangedProductsSession>;
         readChangedProductsAsync(productSearchCriteria: Entities.ChangedProductsSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Product[]>;
         getDeletedListingsAsync(catalogId: number, skip: number, top: number): IAsyncResult<Entities.DeletedListingsResult>;
         getDeletedCatalogsAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<number[]>;
         getDeletedLanguagesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<string[]>;
         getProductRatingsAsync(productIds: number[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductRating[]>;
         getProductAssortmentIntervalsAsync(productIds: number[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductAssortmentInterval[]>;
         getDeliveryOptionsAsync(productIds: number[], address: Entities.Address, filterOption: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductDeliveryOptions[]>;
         deleteListingsByCatalogsAsync(catalogIds: number[]): IVoidAsyncResult;
         deleteListingsByLanguagesAsync(languages: string[]): IVoidAsyncResult;
         endReadChangedProductsAsync(session: Entities.ReadChangedProductsSession): IVoidAsyncResult;
         updateListingPublishingStatusAsync(publishingStatuses: Entities.ListingPublishStatus[]): IVoidAsyncResult;
         getPricesAsync(itemId: string, inventoryDimensionId: string, barcode: string, customerAccountNumber: string, unitOfMeasureSymbol: string, quantity: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductPrice[]>;
         getProductAvailabilitiesAsync(itemIds: number[], channelId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductAvailableQuantity[]>;
         getActivePricesAsync(projectDomain: Entities.ProjectionDomain, productIds: number[], activeDate: Date, customerId: string, affiliationLoyaltyTiers: Entities.AffiliationLoyaltyTier[], includeSimpleDiscountsInContextualPrice: boolean, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductPrice[]>;
         getFilteredSlotComponentsAsync(recordId: number, channelId: number, slotId: number, selectedComponents: Entities.ComponentInSlotRelation[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductComponent[]>;
         getComponentByProductSlotRelationAsync(channelId: number, componentRelation: Entities.ComponentInSlotRelation): IAsyncResult<Entities.ProductComponent>;
         getCategoryPathsAsync(channelId: number, catalogId: number, categoryPathLookups: Entities.CategoryPathLookup[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CategoryPathResult[]>;
         searchByCategoryAsync(channelId: number, catalogId: number, categoryId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductSearchResult[]>;
         searchByTextAsync(channelId: number, catalogId: number, searchText: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductSearchResult[]>;
         searchByCriteriaAsync(searchCriteria: Entities.ProductSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductSearchResult[]>;
         getByLookupClausesAsync(channelId: number, productLookupClauses: Entities.ProductLookupClause[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SimpleProduct[]>;
         getSearchSuggestionsAsync(channelId: number, catalogId: number, searchText: string, hitPrefix: string, hitSuffix: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SearchSuggestion[]>;
         getRefinersByCategoryAsync(catalogId: number, categoryId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductRefiner[]>;
         getRefinersByTextAsync(catalogId: number, searchText: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductRefiner[]>;
         getRefinerValuesByCategoryAsync(catalogId: number, categoryId: number, refinerId: number, refinerSourceValue: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductRefinerValue[]>;
         getRefinerValuesByTextAsync(catalogId: number, searchText: string, refinerId: number, refinerSourceValue: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductRefinerValue[]>;
         getChannelProductAttributesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.AttributeProduct[]>;
         getByIdAsync(recordId: number, channelId: number): IAsyncResult<Entities.SimpleProduct>;
         getAttributeValuesAsync(recordId: number, channelId: number, catalogId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.AttributeValue[]>;
         getMediaLocationsAsync(recordId: number, channelId: number, catalogId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.MediaLocation[]>;
         getMediaBlobsAsync(recordId: number, channelId: number, catalogId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.MediaBlob[]>;
         getDefaultComponentsAsync(recordId: number, channelId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductComponent[]>;
         getSlotComponentsAsync(recordId: number, channelId: number, slotId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductComponent[]>;
         getAllRelationTypesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductRelationType[]>;
         getRelationTypesAsync(recordId: number, channelId: number, catalogId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductRelationType[]>;
         getRelatedProductsAsync(recordId: number, channelId: number, catalogId: number, relationTypeId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductSearchResult[]>;
         getUnitsOfMeasureAsync(recordId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.UnitOfMeasure[]>;
         getApplicableWarrantiesAsync(catalogId: number, warrantableProductIds: number[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductWarrantiesMapping[]>;
         getPriceAsync(recordId: number, customerAccountNumber: string, unitOfMeasureSymbol: string): IAsyncResult<Entities.ProductPrice>;
         calculateProductPriceAsync(recordId: number, customerAccountNumber: string, unitOfMeasureSymbol: string, loyaltyCardId: string, affiliationLoyaltyTiers: Entities.AffiliationLoyaltyTier[]): IAsyncResult<Entities.ProductPrice>;
         getEstimatedProductWarehouseAvailabilityAsync(productWarehouses: Entities.ProductWarehouse[]): IAsyncResult<Entities.ProductWarehouseInventoryInformation>;
         getEstimatedAvailabilityAsync(searchCriteria: Entities.InventoryAvailabilitySearchCriteria): IAsyncResult<Entities.ProductWarehouseInventoryInformation>;
         }
      
      /*** IProductCatalogManager ***/
      export var IProductCatalogManagerName = "IProductCatalogManager";
      export interface IProductCatalogManager {
          createAsync(entity: Entities.ProductCatalog): IAsyncResult<Entities.ProductCatalog>;
          readAsync(recordId: number): IAsyncResult<Entities.ProductCatalog>;
          readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductCatalog[]>;
          updateAsync(entity: Entities.ProductCatalog): IAsyncResult<Entities.ProductCatalog>;
          deleteAsync(entity: Entities.ProductCatalog): IVoidAsyncResult;
          getCatalogsAsync(channelId: number, activeOnly: boolean, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductCatalog[]>;
         }
      
      /*** ICommerceListManager ***/
      export var ICommerceListManagerName = "ICommerceListManager";
      export interface ICommerceListManager {
          createAsync(entity: Entities.CommerceList): IAsyncResult<Entities.CommerceList>;
          readAsync(id: number): IAsyncResult<Entities.CommerceList>;
          readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CommerceList[]>;
          updateAsync(entity: Entities.CommerceList): IAsyncResult<Entities.CommerceList>;
          deleteAsync(entity: Entities.CommerceList): IVoidAsyncResult;
          getByCustomerAsync(customerId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CommerceList[]>;
         addLinesAsync(id: number, commerceListLines: Entities.CommerceListLine[]): IAsyncResult<Entities.CommerceList>;
         updateLinesAsync(id: number, commerceListLines: Entities.CommerceListLine[]): IAsyncResult<Entities.CommerceList>;
         removeLinesAsync(id: number, commerceListLines: Entities.CommerceListLine[]): IAsyncResult<Entities.CommerceList>;
         moveLinesAsync(commerceListLines: Entities.CommerceListLine[], destinationId: number): IAsyncResult<Entities.CommerceList>;
         copyLinesAsync(commerceListLines: Entities.CommerceListLine[], destinationId: number): IAsyncResult<Entities.CommerceList>;
         addContributorsAsync(id: number, commerceListContributors: Entities.CommerceListContributor[]): IAsyncResult<Entities.CommerceList>;
         removeContributorsAsync(id: number, commerceListContributors: Entities.CommerceListContributor[]): IAsyncResult<Entities.CommerceList>;
         createInvitationsAsync(id: number, commerceListInvitations: Entities.CommerceListInvitation[]): IAsyncResult<Entities.CommerceList>;
         acceptInvitationAsync(invitationToken: string, customerId: string): IVoidAsyncResult;
         }
      
      /*** IProductListManager ***/
      export var IProductListManagerName = "IProductListManager";
      export interface IProductListManager {
          createAsync(entity: Entities.ProductList): IAsyncResult<Entities.ProductList>;
          readAsync(id: string): IAsyncResult<Entities.ProductList>;
          readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductList[]>;
          updateAsync(entity: Entities.ProductList): IAsyncResult<Entities.ProductList>;
          deleteAsync(entity: Entities.ProductList): IVoidAsyncResult;
          searchAsync(searchCriteria: Entities.ProductListSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductList[]>;
         getProductListLinesAsync(id: string, searchText: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductListLine[]>;
         addProductListLinesAsync(id: string, productListLines: Entities.ProductListLine[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductListLine[]>;
         updateProductListLinesAsync(id: string, productListLines: Entities.ProductListLine[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductListLine[]>;
         removeProductListLinesAsync(id: string, productListLines: Entities.ProductListLine[]): IVoidAsyncResult;
         copyCartToProductListAsync(id: string, cartId: string, isRewrite: boolean, isQuantityAggregate: boolean): IAsyncResult<Entities.ProductList>;
         }
      
      /*** IRecommendationManager ***/
      export var IRecommendationManagerName = "IRecommendationManager";
      export interface IRecommendationManager {
          createAsync(entity: Entities.Recommendation): IAsyncResult<Entities.Recommendation>;
          readAsync(id: string): IAsyncResult<Entities.Recommendation>;
          readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Recommendation[]>;
          updateAsync(entity: Entities.Recommendation): IAsyncResult<Entities.Recommendation>;
          deleteAsync(entity: Entities.Recommendation): IVoidAsyncResult;
          getElementsAsync(id: string, recommendationCriteria: Entities.RecommendationCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.RecommendedElement[]>;
         }
      
      /*** ITransferOrderManager ***/
      export var ITransferOrderManagerName = "ITransferOrderManager";
      export interface ITransferOrderManager {
          createAsync(entity: Entities.TransferOrder): IAsyncResult<Entities.TransferOrder>;
          readAsync(orderId: string): IAsyncResult<Entities.TransferOrder>;
          readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.TransferOrder[]>;
          updateAsync(entity: Entities.TransferOrder): IAsyncResult<Entities.TransferOrder>;
          deleteAsync(entity: Entities.TransferOrder): IVoidAsyncResult;
          commitAsync(orderId: string, skipNotValidLines: boolean): IVoidAsyncResult;
         getTransferOrderLinesAsync(orderId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.TransferOrderLine[]>;
         createTransferOrderLinesAsync(orderId: string, transferOrderLines: Entities.TransferOrderLine[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.TransferOrderLine[]>;
         updateTransferOrderLinesAsync(orderId: string, transferOrderLines: Entities.TransferOrderLine[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.TransferOrderLine[]>;
         getTransferOrderCommentsAsync(orderId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Comment[]>;
         addTransferOrderCommentAsync(orderId: string, authorStaffId: string, commentText: string): IAsyncResult<Entities.Comment>;
         deleteTransferOrderLinesAsync(orderId: string, transferOrderLines: Entities.TransferOrderLine[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.TransferOrderLine[]>;
         getTransferOrderJournalsAsync(orderId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.TransferOrderJournal[]>;
         getTransferPackingSlipAsync(orderId: string, voucherId: string, receiptRetrievalCriteria: Entities.ReceiptRetrievalCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Receipt[]>;
         }
      
      /*** IPurchaseOrderManager ***/
      export var IPurchaseOrderManagerName = "IPurchaseOrderManager";
      export interface IPurchaseOrderManager {
          createAsync(entity: Entities.PurchaseOrder): IAsyncResult<Entities.PurchaseOrder>;
          readAsync(orderId: string): IAsyncResult<Entities.PurchaseOrder>;
          readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.PurchaseOrder[]>;
          updateAsync(entity: Entities.PurchaseOrder): IAsyncResult<Entities.PurchaseOrder>;
          deleteAsync(entity: Entities.PurchaseOrder): IVoidAsyncResult;
          commitAsync(orderId: string): IVoidAsyncResult;
         }
      
      /*** IPickingListManager ***/
      export var IPickingListManagerName = "IPickingListManager";
      export interface IPickingListManager {
          createAsync(entity: Entities.PickingList): IAsyncResult<Entities.PickingList>;
          readAsync(orderId: string): IAsyncResult<Entities.PickingList>;
          readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.PickingList[]>;
          updateAsync(entity: Entities.PickingList): IAsyncResult<Entities.PickingList>;
          deleteAsync(entity: Entities.PickingList): IVoidAsyncResult;
          commitAsync(orderId: string): IVoidAsyncResult;
         }
      
      /*** IWarehouseManager ***/
      export var IWarehouseManagerName = "IWarehouseManager";
      export interface IWarehouseManager {
          createAsync(entity: Entities.Warehouse): IAsyncResult<Entities.Warehouse>;
          readAsync(inventLocation: string): IAsyncResult<Entities.Warehouse>;
          readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Warehouse[]>;
          updateAsync(entity: Entities.Warehouse): IAsyncResult<Entities.Warehouse>;
          deleteAsync(entity: Entities.Warehouse): IVoidAsyncResult;
          searchWarehouseLocationsAsyncAsync(searchCriteria: Entities.WarehouseLocationSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.WarehouseLocation[]>;
         getWarehouseByIdAsync(inventLocation: string): IAsyncResult<Entities.Warehouse>;
         searchWarehousesAsync(searchText: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Warehouse[]>;
         getLocationsAsync(inventLocation: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.WarehouseLocation[]>;
         searchLocationsAsync(inventLocation: string, searchText: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.WarehouseLocation[]>;
         getAvailableFulfillmentLocationsAsync(deliveryModeTypeFilter: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Warehouse[]>;
         }
      
      /*** IScanResultManager ***/
      export var IScanResultManagerName = "IScanResultManager";
      export interface IScanResultManager {
          createAsync(entity: Entities.ScanResult): IAsyncResult<Entities.ScanResult>;
          readAsync(scannedText: string): IAsyncResult<Entities.ScanResult>;
          readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ScanResult[]>;
          updateAsync(entity: Entities.ScanResult): IAsyncResult<Entities.ScanResult>;
          deleteAsync(entity: Entities.ScanResult): IVoidAsyncResult;
          }
      
      /*** ISalesOrderContextualOperationsMapManager ***/
      export var ISalesOrderContextualOperationsMapManagerName = "ISalesOrderContextualOperationsMapManager";
      export interface ISalesOrderContextualOperationsMapManager {
          createAsync(entity: Entities.SalesOrderContextualOperationsMap): IAsyncResult<Entities.SalesOrderContextualOperationsMap>;
          readAsync(id: string): IAsyncResult<Entities.SalesOrderContextualOperationsMap>;
          readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SalesOrderContextualOperationsMap[]>;
          updateAsync(entity: Entities.SalesOrderContextualOperationsMap): IAsyncResult<Entities.SalesOrderContextualOperationsMap>;
          deleteAsync(entity: Entities.SalesOrderContextualOperationsMap): IVoidAsyncResult;
          getOrdersAsync(orderSearchCriteria: Entities.OrderSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SalesOrderContextualOperationsMap[]>;
         getFulfillmentLinesAsync(fulfillmentLineSearchCriteria: Entities.FulfillmentLineSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.FulfillmentLineContextualOperationsMap[]>;
         }
      
      /*** IInventoryInboundOutboundDocumentManager ***/
      export var IInventoryInboundOutboundDocumentManagerName = "IInventoryInboundOutboundDocumentManager";
      export interface IInventoryInboundOutboundDocumentManager {
          createAsync(entity: Entities.InventoryInboundOutboundDocument): IAsyncResult<Entities.InventoryInboundOutboundDocument>;
          readAsync(workDocumentId: string): IAsyncResult<Entities.InventoryInboundOutboundDocument>;
          readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.InventoryInboundOutboundDocument[]>;
          updateAsync(entity: Entities.InventoryInboundOutboundDocument): IAsyncResult<Entities.InventoryInboundOutboundDocument>;
          deleteAsync(entity: Entities.InventoryInboundOutboundDocument): IVoidAsyncResult;
          updateStatusAsync(workDocumentId: string, documentStatus: number, documentVersion: number): IAsyncResult<Entities.InventoryInboundOutboundDocument>;
         updateLinesByCriteriaAsync(workDocumentId: string, filterCriteria: Entities.InventoryDocumentLineFilterCriteria, updateLinesAction: Entities.InventoryDocumentUpdateLinesAction, returnUpdatedLinesPolicy: Entities.InventoryDocumentLineOperationResultSettings): IAsyncResult<Entities.InventoryInboundOutboundDocumentUpdateLinesByCriteriaResult>;
         updateLineAsync(workDocumentId: string, documentLine: Entities.InventoryInboundOutboundDocumentLine): IAsyncResult<Entities.InventoryInboundOutboundDocumentLine>;
         updateWorkingTerminalAsync(workDocumentId: string, documentVersion: number): IAsyncResult<Entities.InventoryInboundOutboundDocument>;
         updateNoteAsync(workDocumentId: string, documentNote: string, documentVersion: number): IAsyncResult<Entities.InventoryInboundOutboundDocument>;
         updateReceiptIdAsync(workDocumentId: string, documentReceiptId: string, documentVersion: number): IAsyncResult<Entities.InventoryInboundOutboundDocument>;
         commitAsync(workDocumentId: string, documentVersion: number): IAsyncResult<Entities.InventoryInboundOutboundDocument>;
         refreshOperationStatusAsync(workDocumentId: string): IAsyncResult<Entities.InventoryInboundOutboundDocument>;
         startAsync(sourceDocumentId: string, sourceDocumentType: number): IAsyncResult<Entities.InventoryInboundOutboundDocument>;
         addLineAsync(workDocumentId: string, documentLine: Entities.InventoryInboundOutboundDocumentLine): IAsyncResult<Entities.InventoryInboundOutboundDocumentLine>;
         deleteLineAsync(workDocumentId: string, documentLineId: string, documentLineVersion: number): IVoidAsyncResult;
         searchSerialNumberLinesAsync(workDocumentId: string, searchCriteria: Entities.InventoryDocumentSerialNumberLineSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.InventoryDocumentSerialNumberLine[]>;
         validateAsync(workDocumentId: string, documentVersion: number): IAsyncResult<Entities.InventoryDocumentValidationResultSummary>;
         searchValidationResultLinesAsync(searchCriteria: Entities.InventoryDocumentValidationResultSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.InventoryDocumentValidationResultLine[]>;
         syncSourceDocumentAsync(sourceDocumentId: string, sourceDocumentType: number): IVoidAsyncResult;
         searchInboundDocumentsAsync(searchCriteria: Entities.InventoryDocumentSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.InventoryInboundOutboundDocument[]>;
         searchOutboundDocumentsAsync(searchCriteria: Entities.InventoryDocumentSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.InventoryInboundOutboundDocument[]>;
         searchLinesAsync(searchCriteria: Entities.InventoryDocumentLineSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.InventoryInboundOutboundDocumentLine[]>;
         resetSerialNumberLineAsync(workDocumentId: string, resetSerialNumberLineAction: Entities.InventoryDocumentSerialNumberLineResetAction): IAsyncResult<Entities.InventoryDocumentSerialNumberLine>;
         updateSerialNumberLineAsync(workDocumentId: string, updateSerialNumberLineAction: Entities.InventoryDocumentSerialNumberLineUpdateAction): IAsyncResult<Entities.InventoryDocumentSerialNumberLine>;
         getLinesSummaryAsync(workDocumentId: string): IAsyncResult<Entities.InventoryInboundOutboundDocumentLinesSummary>;
         getSerialNumberLinesSummaryAsync(workDocumentId: string, documentLineId: string): IAsyncResult<Entities.InventoryDocumentSerialNumberLinesSummary>;
         }
      
      /*** IBusinessPartnerManager ***/
      export var IBusinessPartnerManagerName = "IBusinessPartnerManager";
      export interface IBusinessPartnerManager {
          createAsync(entity: Entities.BusinessPartner): IAsyncResult<Entities.BusinessPartner>;
          readAsync(businessPartnerId: string): IAsyncResult<Entities.BusinessPartner>;
          readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.BusinessPartner[]>;
          updateAsync(entity: Entities.BusinessPartner): IAsyncResult<Entities.BusinessPartner>;
          deleteAsync(entity: Entities.BusinessPartner): IVoidAsyncResult;
          createProspectAsync(businessPartnerProspect: Entities.BusinessPartnerProspect): IAsyncResult<Entities.BusinessPartnerProspect>;
         getCurrentAsync(): IAsyncResult<Entities.BusinessPartner>;
         getUsersAsync(businessPartnerId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.BusinessPartnerUser[]>;
         }
      
      /*** IBusinessPartnerUserManager ***/
      export var IBusinessPartnerUserManagerName = "IBusinessPartnerUserManager";
      export interface IBusinessPartnerUserManager {
          createAsync(entity: Entities.BusinessPartnerUser): IAsyncResult<Entities.BusinessPartnerUser>;
          readAsync(email: string): IAsyncResult<Entities.BusinessPartnerUser>;
          readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.BusinessPartnerUser[]>;
          updateAsync(entity: Entities.BusinessPartnerUser): IAsyncResult<Entities.BusinessPartnerUser>;
          deleteAsync(entity: Entities.BusinessPartnerUser): IVoidAsyncResult;
          }
      
      /*** ISuspendedCartManager ***/
      export var ISuspendedCartManagerName = "ISuspendedCartManager";
      export interface ISuspendedCartManager {
          createAsync(entity: Entities.SuspendedCart): IAsyncResult<Entities.SuspendedCart>;
          readAsync(id: string): IAsyncResult<Entities.SuspendedCart>;
          readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SuspendedCart[]>;
          updateAsync(entity: Entities.SuspendedCart): IAsyncResult<Entities.SuspendedCart>;
          deleteAsync(entity: Entities.SuspendedCart): IVoidAsyncResult;
          getAllSuspendedCartsAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SuspendedCart[]>;
         }
      
    }
  