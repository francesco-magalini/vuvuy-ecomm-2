/// <reference path="JQuery.d.ts" />
/// <reference path="KnockoutJS.d.ts" />
/// <reference path="Diagnostics.TypeScriptCore.d.ts" />
/// <reference path="DataJS.d.ts" />
declare module Commerce.Proxy.Entities {
    /**
     * AutoExitMethodType enum type.
     */
    enum AutoExitMethodType {
        /**
         * The Logoff member.
         */
        Logoff = 0,
        /**
         * The Lock member.
         */
        Lock = 1,
        /**
         * The None member.
         */
        None = -1,
    }
    /**
     * CardType enum type.
     */
    enum CardType {
        /**
         * The InternationalCreditCard member.
         */
        InternationalCreditCard = 0,
        /**
         * The InternationalDebitCard member.
         */
        InternationalDebitCard = 1,
        /**
         * The LoyaltyCard member.
         */
        LoyaltyCard = 2,
        /**
         * The CorporateCard member.
         */
        CorporateCard = 3,
        /**
         * The CustomerCard member.
         */
        CustomerCard = 4,
        /**
         * The EmployeeCard member.
         */
        EmployeeCard = 5,
        /**
         * The SalespersonCard member.
         */
        SalespersonCard = 6,
        /**
         * The GiftCard member.
         */
        GiftCard = 7,
        /**
         * The Unknown member.
         */
        Unknown = -1,
    }
    /**
     * PublishingAction enum type.
     */
    enum PublishingAction {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Publish member.
         */
        Publish = 1,
        /**
         * The Delete member.
         */
        Delete = 2,
        /**
         * The Expire member.
         */
        Expire = 3,
    }
    /**
     * ListingPublishingActionStatus enum type.
     */
    enum ListingPublishingActionStatus {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Ready member.
         */
        Ready = 1,
        /**
         * The InProgress member.
         */
        InProgress = 2,
        /**
         * The Done member.
         */
        Done = 3,
        /**
         * The Failed member.
         */
        Failed = 4,
    }
    /**
     * OnlineChannelPublishStatusType enum type.
     */
    enum OnlineChannelPublishStatusType {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Draft member.
         */
        Draft = 1,
        /**
         * The InProgress member.
         */
        InProgress = 2,
        /**
         * The Published member.
         */
        Published = 3,
        /**
         * The Failed member.
         */
        Failed = 4,
    }
    /**
     * ReceiptTransactionType enum type.
     */
    enum ReceiptTransactionType {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Sale member.
         */
        Sale = 1,
        /**
         * The Return member.
         */
        Return = 2,
        /**
         * The Payment member.
         */
        Payment = 5,
        /**
         * The SalesOrder member.
         */
        SalesOrder = 6,
        /**
         * The Quote member.
         */
        Quote = 7,
        /**
         * The SuspendedTransaction member.
         */
        SuspendedTransaction = 9,
    }
    /**
     * EmployeePriceOverrideType enum type.
     */
    enum EmployeePriceOverrideType {
        /**
         * The HigherAndLower member.
         */
        HigherAndLower = 0,
        /**
         * The HigherOnly member.
         */
        HigherOnly = 1,
        /**
         * The LowerOnly member.
         */
        LowerOnly = 2,
        /**
         * The NotAllowed member.
         */
        NotAllowed = 3,
    }
    /**
     * KeyInPriceRestriction enum type.
     */
    enum KeyInPriceRestriction {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The NewPrice member.
         */
        NewPrice = 1,
        /**
         * The HigherOrEqualPrice member.
         */
        HigherOrEqualPrice = 2,
        /**
         * The LowerOrEqualPrice member.
         */
        LowerOrEqualPrice = 3,
        /**
         * The NotAllowed member.
         */
        NotAllowed = 4,
    }
    /**
     * KeyInQuantityRestriction enum type.
     */
    enum KeyInQuantityRestriction {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Required member.
         */
        Required = 1,
        /**
         * The NotAllowed member.
         */
        NotAllowed = 2,
    }
    /**
     * ProductDimensionType enum type.
     */
    enum ProductDimensionType {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Color member.
         */
        Color = 1,
        /**
         * The Configuration member.
         */
        Configuration = 2,
        /**
         * The Size member.
         */
        Size = 3,
        /**
         * The Style member.
         */
        Style = 4,
    }
    /**
     * ProductType enum type.
     */
    enum ProductType {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The KitMaster member.
         */
        KitMaster = 1,
        /**
         * The KitVariant member.
         */
        KitVariant = 2,
        /**
         * The Master member.
         */
        Master = 3,
        /**
         * The Standalone member.
         */
        Standalone = 4,
        /**
         * The Variant member.
         */
        Variant = 5,
    }
    /**
     * NumberSequenceSeedType enum type.
     */
    enum NumberSequenceSeedType {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The ReceiptDefault member.
         */
        ReceiptDefault = 1,
        /**
         * The ReceiptSale member.
         */
        ReceiptSale = 2,
        /**
         * The ReceiptReturn member.
         */
        ReceiptReturn = 3,
        /**
         * The ReceiptSalesOrder member.
         */
        ReceiptSalesOrder = 4,
        /**
         * The ReceiptSalesInvoice member.
         */
        ReceiptSalesInvoice = 5,
        /**
         * The ReceiptPayment member.
         */
        ReceiptPayment = 6,
        /**
         * The BatchId member.
         */
        BatchId = 7,
        /**
         * The TransactionId member.
         */
        TransactionId = 8,
        /**
         * The ReceiptCustomerSalesOrder member.
         */
        ReceiptCustomerSalesOrder = 10,
        /**
         * The ReceiptCustomerQuote member.
         */
        ReceiptCustomerQuote = 11,
        /**
         * The ReceiptSuspendedTransaction member.
         */
        ReceiptSuspendedTransaction = 22,
    }
    /**
     * ReasonCodeSourceType enum type.
     */
    enum ReasonCodeSourceType {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The AddSalesperson member.
         */
        AddSalesperson = 1,
        /**
         * The EndOfTransaction member.
         */
        EndOfTransaction = 2,
        /**
         * The ItemDiscount member.
         */
        ItemDiscount = 3,
        /**
         * The ItemNotOnFile member.
         */
        ItemNotOnFile = 4,
        /**
         * The LineItemTaxChange member.
         */
        LineItemTaxChange = 5,
        /**
         * The Markup member.
         */
        Markup = 6,
        /**
         * The NegativeAdjustment member.
         */
        NegativeAdjustment = 7,
        /**
         * The NfcEContingencyModeEnabled member.
         */
        NfcEContingencyModeEnabled = 8,
        /**
         * The NfcEVoided member.
         */
        NfcEVoided = 9,
        /**
         * The OpenDrawer member.
         */
        OpenDrawer = 10,
        /**
         * The OverridePrice member.
         */
        OverridePrice = 11,
        /**
         * The ReturnItem member.
         */
        ReturnItem = 12,
        /**
         * The ReturnTransaction member.
         */
        ReturnTransaction = 13,
        /**
         * The SerialNumber member.
         */
        SerialNumber = 14,
        /**
         * The StartOfTransaction member.
         */
        StartOfTransaction = 15,
        /**
         * The TenderDeclaration member.
         */
        TenderDeclaration = 16,
        /**
         * The TotalDiscount member.
         */
        TotalDiscount = 17,
        /**
         * The TransactionTaxChange member.
         */
        TransactionTaxChange = 18,
        /**
         * The VoidItem member.
         */
        VoidItem = 19,
        /**
         * The VoidPayment member.
         */
        VoidPayment = 20,
        /**
         * The VoidTransaction member.
         */
        VoidTransaction = 21,
        /**
         * The OrderFulfillment member.
         */
        OrderFulfillment = 22,
        /**
         * The ManualCharge member.
         */
        ManualCharge = 23,
    }
    /**
     * TriggerFunctionType enum type.
     */
    enum TriggerFunctionType {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Item member.
         */
        Item = 1,
        /**
         * The InfoCode member.
         */
        InfoCode = 2,
    }
    /**
     * QueryType enum type.
     */
    enum QueryType {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The NameAndDescription member.
         */
        NameAndDescription = 1,
        /**
         * The AotObject member.
         */
        AotObject = 2,
    }
    /**
     * ChangeAction enum type.
     */
    enum ChangeAction {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Insert member.
         */
        Insert = 1,
        /**
         * The Update member.
         */
        Update = 2,
        /**
         * The Delete member.
         */
        Delete = 3,
    }
    /**
     * PeriodicDiscountOfferType enum type.
     */
    enum PeriodicDiscountOfferType {
        /**
         * The MultipleBuy member.
         */
        MultipleBuy = 0,
        /**
         * The MixAndMatch member.
         */
        MixAndMatch = 1,
        /**
         * The Offer member.
         */
        Offer = 2,
        /**
         * The Promotion member.
         */
        Promotion = 3,
        /**
         * The Threshold member.
         */
        Threshold = 4,
        /**
         * The LeastExpensiveFavorRetailer member.
         */
        LeastExpensiveFavorRetailer = 5,
        /**
         * The OfferLineQuantityLimit member.
         */
        OfferLineQuantityLimit = 6,
        /**
         * The ShippingThreshold member.
         */
        ShippingThreshold = 7,
    }
    /**
     * SearchFilterType enum type.
     */
    enum SearchFilterType {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Text member.
         */
        Text = 1,
    }
    /**
     * InfoCodeActivity enum type.
     */
    enum InfoCodeActivity {
        /**
         * The Transaction member.
         */
        Transaction = 0,
        /**
         * The OrderFulfillment member.
         */
        OrderFulfillment = 1,
    }
    /**
     * SrsReportFileFormat enum type.
     */
    enum SrsReportFileFormat {
        /**
         * The CSV member.
         */
        CSV = 0,
        /**
         * The Excel member.
         */
        Excel = 1,
        /**
         * The HTML4_0 member.
         */
        HTML4_0 = 2,
        /**
         * The Image member.
         */
        Image = 3,
        /**
         * The MHTML member.
         */
        MHTML = 4,
        /**
         * The PDF member.
         */
        PDF = 5,
        /**
         * The XML member.
         */
        XML = 6,
    }
    /**
     * ShiftReconciliationLineStatus enum type.
     */
    enum ShiftReconciliationLineStatus {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Pending member.
         */
        Pending = 1,
        /**
         * The Reconciled member.
         */
        Reconciled = 2,
        /**
         * The Closed member.
         */
        Closed = 3,
    }
    /**
     * ProductSearchServiceType enum type.
     */
    enum ProductSearchServiceType {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The ChannelDatabase member.
         */
        ChannelDatabase = 1,
        /**
         * The CommerceAzureSearchService member.
         */
        CommerceAzureSearchService = 2,
    }
    /**
     * SearchSuggestionType enum type.
     */
    enum SearchSuggestionType {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Keyword member.
         */
        Keyword = 1,
        /**
         * The Product member.
         */
        Product = 2,
        /**
         * The ScopedCategory member.
         */
        ScopedCategory = 4,
        /**
         * The Category member.
         */
        Category = 8,
    }
    /**
     * SalesStatus enum type.
     */
    enum SalesStatus {
        /**
         * The Unknown member.
         */
        Unknown = 0,
        /**
         * The Created member.
         */
        Created = 1,
        /**
         * The Processing member.
         */
        Processing = 2,
        /**
         * The Delivered member.
         */
        Delivered = 3,
        /**
         * The Invoiced member.
         */
        Invoiced = 4,
        /**
         * The Confirmed member.
         */
        Confirmed = 5,
        /**
         * The Sent member.
         */
        Sent = 6,
        /**
         * The Canceled member.
         */
        Canceled = 7,
        /**
         * The Lost member.
         */
        Lost = 8,
    }
    /**
     * EFTType enum type.
     */
    enum EFTType {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The External member.
         */
        External = 1,
        /**
         * The PaymentSDK member.
         */
        PaymentSDK = 2,
        /**
         * The DynamicsOnline member.
         */
        DynamicsOnline = 3,
    }
    /**
     * FilterDeliveryModeOption enum type.
     */
    enum FilterDeliveryModeOption {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The FilterOutNonCarrierDeliveryMode member.
         */
        FilterOutNonCarrierDeliveryMode = 1,
        /**
         * The DoNotFilterByChannel member.
         */
        DoNotFilterByChannel = 2,
    }
    /**
     * InventoryDocumentLineOperationResultMode enum type.
     */
    enum InventoryDocumentLineOperationResultMode {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The NoLines member.
         */
        NoLines = 1,
        /**
         * The AllLines member.
         */
        AllLines = 2,
    }
    /**
     * InventoryDocumentStatus enum type.
     */
    enum InventoryDocumentStatus {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Paused member.
         */
        Paused = 1,
        /**
         * The InProgress member.
         */
        InProgress = 2,
        /**
         * The Committed member.
         */
        Committed = 3,
        /**
         * The ProcessSucceeded member.
         */
        ProcessSucceeded = 4,
        /**
         * The ProcessFailed member.
         */
        ProcessFailed = 5,
    }
    /**
     * InventoryDocumentUpdateLinesActionType enum type.
     */
    enum InventoryDocumentUpdateLinesActionType {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The ApplyQuantity member.
         */
        ApplyQuantity = 1,
        /**
         * The ApplyMaximumQuantity member.
         */
        ApplyMaximumQuantity = 2,
    }
    /**
     * InventoryInboundOutboundDocumentOperationType enum type.
     */
    enum InventoryInboundOutboundDocumentOperationType {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The ReceivePurchaseOrder member.
         */
        ReceivePurchaseOrder = 1,
        /**
         * The ReceiveTransferOrder member.
         */
        ReceiveTransferOrder = 2,
        /**
         * The ShipTransferOrder member.
         */
        ShipTransferOrder = 3,
        /**
         * The CreateTransferOrder member.
         */
        CreateTransferOrder = 4,
    }
    /**
     * InventoryInboundOutboundSourceDocumentStatus enum type.
     */
    enum InventoryInboundOutboundSourceDocumentStatus {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Requested member.
         */
        Requested = 1,
        /**
         * The Shipped member.
         */
        Shipped = 2,
        /**
         * The PartiallyShipped member.
         */
        PartiallyShipped = 3,
        /**
         * The Received member.
         */
        Received = 4,
        /**
         * The PartiallyReceived member.
         */
        PartiallyReceived = 5,
        /**
         * The Cancelled member.
         */
        Cancelled = 6,
    }
    /**
     * InventorySourceDocumentType enum type.
     */
    enum InventorySourceDocumentType {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The PurchaseOrder member.
         */
        PurchaseOrder = 1,
        /**
         * The TransferOrder member.
         */
        TransferOrder = 2,
    }
    /**
     * InventoryInboundOutboundDocumentState enum type.
     */
    enum InventoryInboundOutboundDocumentState {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Active member.
         */
        Active = 1,
        /**
         * The Complete member.
         */
        Complete = 2,
        /**
         * The Draft member.
         */
        Draft = 3,
    }
    /**
     * ReceiptNumberResetType enum type.
     */
    enum ReceiptNumberResetType {
        /**
         * The SingleTime member.
         */
        SingleTime = 0,
        /**
         * The YearlyRecurrence member.
         */
        YearlyRecurrence = 1,
    }
    /**
     * PeriodUnit enum type.
     */
    enum PeriodUnit {
        /**
         * The Day member.
         */
        Day = 0,
        /**
         * The Week member.
         */
        Week = 1,
        /**
         * The Month member.
         */
        Month = 2,
        /**
         * The Year member.
         */
        Year = 3,
        /**
         * The None member.
         */
        None = -1,
    }
    /**
     * WarrantyPriceRangeBaseType enum type.
     */
    enum WarrantyPriceRangeBaseType {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The BasePrice member.
         */
        BasePrice = 1,
        /**
         * The SellingPrice member.
         */
        SellingPrice = 2,
    }
    /**
     * LogOnKeyboardType enum type.
     */
    enum LogOnKeyboardType {
        /**
         * The OSKeyboard member.
         */
        OSKeyboard = 0,
        /**
         * The Numpad member.
         */
        Numpad = 1,
        /**
         * The None member.
         */
        None = -1,
    }
    /**
     * LogOnLayoutType enum type.
     */
    enum LogOnLayoutType {
        /**
         * The Centered member.
         */
        Centered = 0,
        /**
         * The Right member.
         */
        Right = 1,
        /**
         * The None member.
         */
        None = -1,
    }
    /**
     * DeliveryModeTypeFilter enum type.
     */
    enum DeliveryModeTypeFilter {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Shipping member.
         */
        Shipping = 1,
        /**
         * The Pickup member.
         */
        Pickup = 2,
    }
    /**
     * InventoryDocumentValidationResultSeverity enum type.
     */
    enum InventoryDocumentValidationResultSeverity {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Informational member.
         */
        Informational = 1,
        /**
         * The Warning member.
         */
        Warning = 2,
        /**
         * The Error member.
         */
        Error = 3,
    }
    /**
     * InventoryDocumentOverreceivingErrors enum type.
     */
    enum InventoryDocumentOverreceivingErrors {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The QuantityExceededAllowed member.
         */
        QuantityExceededAllowed = 1,
        /**
         * The QuantityExceededAllowedWithinOverreceivingTolerance member.
         */
        QuantityExceededAllowedWithinOverreceivingTolerance = 2,
        /**
         * The QuantityExceededOverreceivingTolerance member.
         */
        QuantityExceededOverreceivingTolerance = 3,
    }
    /**
     * InventoryDocumentSerialNumberErrors enum type.
     */
    enum InventoryDocumentSerialNumberErrors {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The RequiredSerialNumberNotProvided member.
         */
        RequiredSerialNumberNotProvided = 1,
        /**
         * The DuplicateSerialNumberIsNotAllowed member.
         */
        DuplicateSerialNumberIsNotAllowed = 2,
        /**
         * The RequiredSerialNumberValidationNotProvided member.
         */
        RequiredSerialNumberValidationNotProvided = 3,
    }
    /**
     * AddressType enum type.
     */
    enum AddressType {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Invoice member.
         */
        Invoice = 1,
        /**
         * The Delivery member.
         */
        Delivery = 2,
        /**
         * The AltDlv member.
         */
        AltDlv = 3,
        /**
         * The SWIFT member.
         */
        SWIFT = 4,
        /**
         * The Payment member.
         */
        Payment = 5,
        /**
         * The Service member.
         */
        Service = 6,
        /**
         * The Home member.
         */
        Home = 7,
        /**
         * The Other member.
         */
        Other = 8,
        /**
         * The Business member.
         */
        Business = 9,
        /**
         * The RemitTo member.
         */
        RemitTo = 10,
        /**
         * The ShipCarrierThirdPartyShipping member.
         */
        ShipCarrierThirdPartyShipping = 11,
        /**
         * The Statement member.
         */
        Statement = 12,
        /**
         * The FixedAsset member.
         */
        FixedAsset = 15,
        /**
         * The Onetime member.
         */
        Onetime = 16,
        /**
         * The Recruit member.
         */
        Recruit = 17,
        /**
         * The SMS member.
         */
        SMS = 18,
        /**
         * The Lading_W member.
         */
        Lading_W = 101,
        /**
         * The Unlading_W member.
         */
        Unlading_W = 102,
        /**
         * The Consignment_IN member.
         */
        Consignment_IN = 103,
    }
    /**
     * AttributeDataType enum type.
     */
    enum AttributeDataType {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Currency member.
         */
        Currency = 1,
        /**
         * The DateTime member.
         */
        DateTime = 2,
        /**
         * The Decimal member.
         */
        Decimal = 3,
        /**
         * The Integer member.
         */
        Integer = 4,
        /**
         * The Text member.
         */
        Text = 5,
        /**
         * The TrueFalse member.
         */
        TrueFalse = 6,
        /**
         * The Video member.
         */
        Video = 40,
        /**
         * The Image member.
         */
        Image = 41,
    }
    /**
     * BarcodeEntryMethodType enum type.
     */
    enum BarcodeEntryMethodType {
        /**
         * The SingleScanned member.
         */
        SingleScanned = 0,
        /**
         * The MultipleScanned member.
         */
        MultipleScanned = 1,
        /**
         * The ManuallyEntered member.
         */
        ManuallyEntered = 2,
        /**
         * The Selected member.
         */
        Selected = 3,
    }
    /**
     * BarcodeMaskType enum type.
     */
    enum BarcodeMaskType {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Item member.
         */
        Item = 1,
        /**
         * The Customer member.
         */
        Customer = 2,
        /**
         * The Employee member.
         */
        Employee = 3,
        /**
         * The Coupon member.
         */
        Coupon = 4,
        /**
         * The DataEntry member.
         */
        DataEntry = 5,
        /**
         * The Salesperson member.
         */
        Salesperson = 6,
        /**
         * The Pharmacy member.
         */
        Pharmacy = 7,
        /**
         * The DiscountCode member.
         */
        DiscountCode = 8,
        /**
         * The GiftCard member.
         */
        GiftCard = 9,
        /**
         * The LoyaltyCard member.
         */
        LoyaltyCard = 10,
    }
    /**
     * TransactionStatus enum type.
     */
    enum TransactionStatus {
        /**
         * The Normal member.
         */
        Normal = 0,
        /**
         * The Voided member.
         */
        Voided = 1,
        /**
         * The Posted member.
         */
        Posted = 2,
        /**
         * The Concluded member.
         */
        Concluded = 3,
        /**
         * The Canceled member.
         */
        Canceled = 4,
        /**
         * The OnHold member.
         */
        OnHold = 5,
        /**
         * The Training member.
         */
        Training = 6,
        /**
         * The Aborted member.
         */
        Aborted = 7,
    }
    /**
     * GiftCardOperationType enum type.
     */
    enum GiftCardOperationType {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Issue member.
         */
        Issue = 1,
        /**
         * The AddTo member.
         */
        AddTo = 2,
        /**
         * The CashOut member.
         */
        CashOut = 3,
    }
    /**
     * RetailGiftCardType enum type.
     */
    enum RetailGiftCardType {
        /**
         * The Unknown member.
         */
        Unknown = 0,
        /**
         * The InternalGiftCard member.
         */
        InternalGiftCard = 1,
        /**
         * The ExternalGiftCard member.
         */
        ExternalGiftCard = 2,
    }
    /**
     * DiscountLineType enum type.
     */
    enum DiscountLineType {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The CustomerDiscount member.
         */
        CustomerDiscount = 1,
        /**
         * The PeriodicDiscount member.
         */
        PeriodicDiscount = 2,
        /**
         * The ManualDiscount member.
         */
        ManualDiscount = 3,
        /**
         * The LoyaltyDiscount member.
         */
        LoyaltyDiscount = 4,
        /**
         * The TenderTypeDiscount member.
         */
        TenderTypeDiscount = 5,
    }
    /**
     * ManualDiscountType enum type.
     */
    enum ManualDiscountType {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The LineDiscountAmount member.
         */
        LineDiscountAmount = 1,
        /**
         * The LineDiscountPercent member.
         */
        LineDiscountPercent = 2,
        /**
         * The TotalDiscountAmount member.
         */
        TotalDiscountAmount = 3,
        /**
         * The TotalDiscountPercent member.
         */
        TotalDiscountPercent = 4,
    }
    /**
     * CustomerDiscountType enum type.
     */
    enum CustomerDiscountType {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The LineDiscount member.
         */
        LineDiscount = 1,
        /**
         * The MultilineDiscount member.
         */
        MultilineDiscount = 2,
        /**
         * The TotalDiscount member.
         */
        TotalDiscount = 3,
    }
    /**
     * ConcurrencyMode enum type.
     */
    enum ConcurrencyMode {
        /**
         * The Exclusive member.
         */
        Exclusive = 0,
        /**
         * The BestPrice member.
         */
        BestPrice = 1,
        /**
         * The Compounded member.
         */
        Compounded = 2,
    }
    /**
     * ReasonCodeInputType enum type.
     */
    enum ReasonCodeInputType {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The SubCode member.
         */
        SubCode = 1,
        /**
         * The Date member.
         */
        Date = 2,
        /**
         * The Numeric member.
         */
        Numeric = 3,
        /**
         * The Item member.
         */
        Item = 4,
        /**
         * The Customer member.
         */
        Customer = 5,
        /**
         * The Staff member.
         */
        Staff = 6,
        /**
         * The Text member.
         */
        Text = 9,
        /**
         * The SubCodeButtons member.
         */
        SubCodeButtons = 10,
        /**
         * The AgeLimit member.
         */
        AgeLimit = 11,
        /**
         * The CompositeSubCodes member.
         */
        CompositeSubCodes = 12,
    }
    /**
     * ReasonCodeLineType enum type.
     */
    enum ReasonCodeLineType {
        /**
         * The Header member.
         */
        Header = 0,
        /**
         * The Sales member.
         */
        Sales = 1,
        /**
         * The Payment member.
         */
        Payment = 2,
        /**
         * The IncomeExpense member.
         */
        IncomeExpense = 3,
        /**
         * The NoSale member.
         */
        NoSale = 4,
        /**
         * The Affiliation member.
         */
        Affiliation = 5,
        /**
         * The Fiscal member.
         */
        Fiscal = 6,
    }
    /**
     * ChargeModule enum type.
     */
    enum ChargeModule {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Sales member.
         */
        Sales = 1,
        /**
         * The Retail member.
         */
        Retail = 3,
    }
    /**
     * ChargeType enum type.
     */
    enum ChargeType {
        /**
         * The ManualCharge member.
         */
        ManualCharge = 0,
        /**
         * The PriceCharge member.
         */
        PriceCharge = 1,
        /**
         * The AutoCharge member.
         */
        AutoCharge = 2,
    }
    /**
     * ChargeMethod enum type.
     */
    enum ChargeMethod {
        /**
         * The Fixed member.
         */
        Fixed = 0,
        /**
         * The Pieces member.
         */
        Pieces = 1,
        /**
         * The Percent member.
         */
        Percent = 2,
        /**
         * The InterCompanyPercent member.
         */
        InterCompanyPercent = 3,
        /**
         * The External member.
         */
        External = 4,
        /**
         * The Proportional member.
         */
        Proportional = 5,
    }
    /**
     * CashType enum type.
     */
    enum CashType {
        /**
         * The Coin member.
         */
        Coin = 0,
        /**
         * The Note member.
         */
        Note = 1,
    }
    /**
     * IncomeExpenseAccountType enum type.
     */
    enum IncomeExpenseAccountType {
        /**
         * The Income member.
         */
        Income = 0,
        /**
         * The Expense member.
         */
        Expense = 1,
        /**
         * The None member.
         */
        None = -1,
    }
    /**
     * TenderLineStatus enum type.
     */
    enum TenderLineStatus {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The NotProcessed member.
         */
        NotProcessed = 1,
        /**
         * The PendingCommit member.
         */
        PendingCommit = 2,
        /**
         * The Voided member.
         */
        Voided = 3,
        /**
         * The Committed member.
         */
        Committed = 4,
        /**
         * The Historical member.
         */
        Historical = 5,
    }
    /**
     * TenderLineVoidStatus enum type.
     */
    enum TenderLineVoidStatus {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The NormalVoid member.
         */
        NormalVoid = 1,
        /**
         * The ForceVoided member.
         */
        ForceVoided = 2,
        /**
         * The ForceVoidReconciled member.
         */
        ForceVoidReconciled = 3,
    }
    /**
     * PaymentProcessingType enum type.
     */
    enum PaymentProcessingType {
        /**
         * The Immediate member.
         */
        Immediate = 0,
        /**
         * The Deferred member.
         */
        Deferred = 1,
        /**
         * The LinkedRefund member.
         */
        LinkedRefund = 2,
        /**
         * The Recalled member.
         */
        Recalled = 3,
    }
    /**
     * CreditCardProcessorStatus enum type.
     */
    enum CreditCardProcessorStatus {
        /**
         * The NA member.
         */
        NA = 0,
        /**
         * The Approved member.
         */
        Approved = 1,
        /**
         * The Declined member.
         */
        Declined = 2,
        /**
         * The Error member.
         */
        Error = 3,
    }
    /**
     * ContactInformationType enum type.
     */
    enum ContactInformationType {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Phone member.
         */
        Phone = 1,
        /**
         * The Email member.
         */
        Email = 2,
        /**
         * The Url member.
         */
        Url = 3,
        /**
         * The Telex member.
         */
        Telex = 4,
        /**
         * The Fax member.
         */
        Fax = 5,
        /**
         * The CellularPhone member.
         */
        CellularPhone = 6,
    }
    /**
     * CommerceEntityDataLevel enum type.
     */
    enum CommerceEntityDataLevel {
        /**
         * The Identity member.
         */
        Identity = 0,
        /**
         * The Minimal member.
         */
        Minimal = 1,
        /**
         * The Standard member.
         */
        Standard = 2,
        /**
         * The Extended member.
         */
        Extended = 3,
        /**
         * The Complete member.
         */
        Complete = 4,
    }
    /**
     * ProductPropertyType enum type.
     */
    enum ProductPropertyType {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Currency member.
         */
        Currency = 1,
        /**
         * The DateTime member.
         */
        DateTime = 2,
        /**
         * The Decimal member.
         */
        Decimal = 3,
        /**
         * The Integer member.
         */
        Integer = 4,
        /**
         * The Text member.
         */
        Text = 5,
        /**
         * The Boolean member.
         */
        Boolean = 6,
        /**
         * The Video member.
         */
        Video = 40,
        /**
         * The Image member.
         */
        Image = 41,
    }
    /**
     * AttributeGroupType enum type.
     */
    enum AttributeGroupType {
        /**
         * The Default member.
         */
        Default = 0,
        /**
         * The Specification member.
         */
        Specification = 1,
    }
    /**
     * ProductSource enum type.
     */
    enum ProductSource {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Local member.
         */
        Local = 1,
        /**
         * The Remote member.
         */
        Remote = 2,
    }
    /**
     * RoundingMethod enum type.
     */
    enum RoundingMethod {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Nearest member.
         */
        Nearest = 1,
        /**
         * The Up member.
         */
        Up = 2,
        /**
         * The Down member.
         */
        Down = 3,
    }
    /**
     * PriceMethod enum type.
     */
    enum PriceMethod {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Fixed member.
         */
        Fixed = 1,
        /**
         * The AmountOff member.
         */
        AmountOff = 2,
        /**
         * The PercentOff member.
         */
        PercentOff = 3,
    }
    /**
     * LineMultilineDiscountOnItem enum type.
     */
    enum LineMultilineDiscountOnItem {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Line member.
         */
        Line = 1,
        /**
         * The Multiline member.
         */
        Multiline = 2,
        /**
         * The Both member.
         */
        Both = 3,
    }
    /**
     * LoyaltyRewardPointEntryType enum type.
     */
    enum LoyaltyRewardPointEntryType {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Earn member.
         */
        Earn = 1,
        /**
         * The Redeem member.
         */
        Redeem = 2,
        /**
         * The ReturnEarned member.
         */
        ReturnEarned = 3,
        /**
         * The Adjust member.
         */
        Adjust = 4,
        /**
         * The Refund member.
         */
        Refund = 5,
    }
    /**
     * LoyaltyRewardPointType enum type.
     */
    enum LoyaltyRewardPointType {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Quantity member.
         */
        Quantity = 1,
        /**
         * The Amount member.
         */
        Amount = 2,
    }
    /**
     * TransactionType enum type.
     */
    enum TransactionType {
        /**
         * The LogOff member.
         */
        LogOff = 0,
        /**
         * The LogOn member.
         */
        LogOn = 1,
        /**
         * The Sales member.
         */
        Sales = 2,
        /**
         * The Payment member.
         */
        Payment = 3,
        /**
         * The RemoveTender member.
         */
        RemoveTender = 4,
        /**
         * The FloatEntry member.
         */
        FloatEntry = 5,
        /**
         * The ChangeTender member.
         */
        ChangeTender = 6,
        /**
         * The TenderDeclaration member.
         */
        TenderDeclaration = 7,
        /**
         * The OpenDrawer member.
         */
        OpenDrawer = 9,
        /**
         * The SalesOrder member.
         */
        SalesOrder = 14,
        /**
         * The SalesInvoice member.
         */
        SalesInvoice = 15,
        /**
         * The BankDrop member.
         */
        BankDrop = 16,
        /**
         * The SafeDrop member.
         */
        SafeDrop = 17,
        /**
         * The IncomeExpense member.
         */
        IncomeExpense = 18,
        /**
         * The CustomerOrder member.
         */
        CustomerOrder = 19,
        /**
         * The StartingAmount member.
         */
        StartingAmount = 20,
        /**
         * The SuspendShift member.
         */
        SuspendShift = 21,
        /**
         * The BlindCloseShift member.
         */
        BlindCloseShift = 22,
        /**
         * The CloseShift member.
         */
        CloseShift = 23,
        /**
         * The PrintX member.
         */
        PrintX = 24,
        /**
         * The PrintZ member.
         */
        PrintZ = 25,
        /**
         * The PendingSalesOrder member.
         */
        PendingSalesOrder = 27,
        /**
         * The KitDisassembly member.
         */
        KitDisassembly = 28,
        /**
         * The AsyncCustomerQuote member.
         */
        AsyncCustomerQuote = 31,
        /**
         * The AsyncCustomerOrder member.
         */
        AsyncCustomerOrder = 33,
        /**
         * The ForceDeleteShift member.
         */
        ForceDeleteShift = 34,
        /**
         * The GiftCardInquiry member.
         */
        GiftCardInquiry = 35,
        /**
         * The SuspendedTransaction member.
         */
        SuspendedTransaction = 36,
        /**
         * The None member.
         */
        None = -1,
    }
    /**
     * CashManagementTransactionContext enum type.
     */
    enum CashManagementTransactionContext {
        /**
         * The Unknown member.
         */
        Unknown = 0,
        /**
         * The Shift member.
         */
        Shift = 1,
        /**
         * The Safe member.
         */
        Safe = 2,
        /**
         * The Bank member.
         */
        Bank = 3,
    }
    /**
     * CustomerTimelineItemEntityType enum type.
     */
    enum CustomerTimelineItemEntityType {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Activity member.
         */
        Activity = 1,
        /**
         * The Note member.
         */
        Note = 2,
        /**
         * The UnifiedActivity member.
         */
        UnifiedActivity = 3,
    }
    /**
     * EmployeePermissionsAllowPrintingReceiptCopy enum type.
     */
    enum EmployeePermissionsAllowPrintingReceiptCopy {
        /**
         * The Always member.
         */
        Always = 0,
        /**
         * The OnlyOnce member.
         */
        OnlyOnce = 1,
        /**
         * The OnlyOnceHqAvailable member.
         */
        OnlyOnceHqAvailable = 2,
        /**
         * The Never member.
         */
        Never = 3,
    }
    /**
     * AddressFormatLineType enum type.
     */
    enum AddressFormatLineType {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The ZipCode member.
         */
        ZipCode = 1,
        /**
         * The City member.
         */
        City = 2,
        /**
         * The County member.
         */
        County = 3,
        /**
         * The State member.
         */
        State = 4,
        /**
         * The CountryRegion member.
         */
        CountryRegion = 5,
        /**
         * The StreetName member.
         */
        StreetName = 6,
        /**
         * The District member.
         */
        District = 7,
        /**
         * The StreetNumber member.
         */
        StreetNumber = 8,
        /**
         * The BuildingCompliment member.
         */
        BuildingCompliment = 9,
        /**
         * The Postbox member.
         */
        Postbox = 10,
        /**
         * The House_RU member.
         */
        House_RU = 21,
        /**
         * The Flat_RU member.
         */
        Flat_RU = 22,
        /**
         * The CountryOKSMCode_RU member.
         */
        CountryOKSMCode_RU = 23,
    }
    /**
     * StatementMethod enum type.
     */
    enum StatementMethod {
        /**
         * The Staff member.
         */
        Staff = 0,
        /**
         * The PosTerminal member.
         */
        PosTerminal = 1,
        /**
         * The Total member.
         */
        Total = 2,
        /**
         * The None member.
         */
        None = -1,
    }
    /**
     * SalesRepPromptType enum type.
     */
    enum SalesRepPromptType {
        /**
         * The NoPrompt member.
         */
        NoPrompt = 0,
        /**
         * The PromptOnCartCreation member.
         */
        PromptOnCartCreation = 1,
        /**
         * The PromptOnCartLineCreation member.
         */
        PromptOnCartLineCreation = 2,
        /**
         * The None member.
         */
        None = -1,
    }
    /**
     * RetailProductSearchType enum type.
     */
    enum RetailProductSearchType {
        /**
         * The MatchAnySearchTerms member.
         */
        MatchAnySearchTerms = 0,
        /**
         * The MatchAllSearchTerms member.
         */
        MatchAllSearchTerms = 1,
    }
    /**
     * RetailDenominationsToDisplay enum type.
     */
    enum RetailDenominationsToDisplay {
        /**
         * The GreaterOrEqualToAmountDue member.
         */
        GreaterOrEqualToAmountDue = 0,
        /**
         * The AllDenominations member.
         */
        AllDenominations = 1,
    }
    /**
     * EmployeeLogonType enum type.
     */
    enum EmployeeLogonType {
        /**
         * The RetailIdentityProvider member.
         */
        RetailIdentityProvider = 0,
        /**
         * The AzureActiveDirectory member.
         */
        AzureActiveDirectory = 1,
    }
    /**
     * RetailCustomerSearchMode enum type.
     */
    enum RetailCustomerSearchMode {
        /**
         * The Local member.
         */
        Local = 0,
        /**
         * The Remote member.
         */
        Remote = 1,
    }
    /**
     * RequirePaymentForFulfillment enum type.
     */
    enum RequirePaymentForFulfillment {
        /**
         * The AllowPayLater member.
         */
        AllowPayLater = 0,
        /**
         * The CardRequired member.
         */
        CardRequired = 1,
    }
    /**
     * CardNotPresentProcessingConfiguration enum type.
     */
    enum CardNotPresentProcessingConfiguration {
        /**
         * The UseHardwareStation member.
         */
        UseHardwareStation = 0,
        /**
         * The UseCommerceEngine member.
         */
        UseCommerceEngine = 1,
    }
    /**
     * FontSchemeType enum type.
     */
    enum FontSchemeType {
        /**
         * The Standard member.
         */
        Standard = 0,
        /**
         * The Large member.
         */
        Large = 1,
        /**
         * The None member.
         */
        None = -1,
    }
    /**
     * DeviceActivationStatus enum type.
     */
    enum DeviceActivationStatus {
        /**
         * The Pending member.
         */
        Pending = 0,
        /**
         * The Activated member.
         */
        Activated = 1,
        /**
         * The Deactivated member.
         */
        Deactivated = 2,
        /**
         * The Disabled member.
         */
        Disabled = 3,
        /**
         * The None member.
         */
        None = -1,
    }
    /**
     * DeviceType enum type.
     */
    enum DeviceType {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The OPOS member.
         */
        OPOS = 1,
        /**
         * The WindowsPrinter member.
         */
        WindowsPrinter = 2,
        /**
         * The Network member.
         */
        Network = 3,
    }
    /**
     * DualDisplayType enum type.
     */
    enum DualDisplayType {
        /**
         * The Logo member.
         */
        Logo = 0,
        /**
         * The ImageRotator member.
         */
        ImageRotator = 1,
        /**
         * The WebBrowser member.
         */
        WebBrowser = 2,
        /**
         * The None member.
         */
        None = -1,
    }
    /**
     * FiscalRegisterType enum type.
     */
    enum FiscalRegisterType {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Manufacturer member.
         */
        Manufacturer = 1,
    }
    /**
     * PrinterLogotype enum type.
     */
    enum PrinterLogotype {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Download member.
         */
        Download = 1,
        /**
         * The EpsonFlash member.
         */
        EpsonFlash = 2,
    }
    /**
     * PrinterLogoAlignmentType enum type.
     */
    enum PrinterLogoAlignmentType {
        /**
         * The Left member.
         */
        Left = 0,
        /**
         * The Center member.
         */
        Center = 1,
        /**
         * The Right member.
         */
        Right = 2,
        /**
         * The None member.
         */
        None = -1,
    }
    /**
     * FiscalIntegrationConnectorType enum type.
     */
    enum FiscalIntegrationConnectorType {
        /**
         * The Local member.
         */
        Local = 0,
        /**
         * The External member.
         */
        External = 1,
        /**
         * The Internal member.
         */
        Internal = 2,
    }
    /**
     * ReceiptType enum type.
     */
    enum ReceiptType {
        /**
         * The Unknown member.
         */
        Unknown = 0,
        /**
         * The SalesReceipt member.
         */
        SalesReceipt = 1,
        /**
         * The CardReceiptForShop member.
         */
        CardReceiptForShop = 2,
        /**
         * The CardReceiptForCustomer member.
         */
        CardReceiptForCustomer = 3,
        /**
         * The CardReceiptForShopReturn member.
         */
        CardReceiptForShopReturn = 4,
        /**
         * The CardReceiptForCustomerReturn member.
         */
        CardReceiptForCustomerReturn = 5,
        /**
         * The CustomerAccountReceiptForShop member.
         */
        CustomerAccountReceiptForShop = 7,
        /**
         * The CustomerAccountReceiptForCustomer member.
         */
        CustomerAccountReceiptForCustomer = 8,
        /**
         * The CustomerAccountReceiptForShopReturn member.
         */
        CustomerAccountReceiptForShopReturn = 9,
        /**
         * The CustomerAccountReceiptForCustomerReturn member.
         */
        CustomerAccountReceiptForCustomerReturn = 10,
        /**
         * The CustomerAccountDeposit member.
         */
        CustomerAccountDeposit = 14,
        /**
         * The CreditMemo member.
         */
        CreditMemo = 15,
        /**
         * The SalesOrderReceipt member.
         */
        SalesOrderReceipt = 18,
        /**
         * The GiftCertificate member.
         */
        GiftCertificate = 20,
        /**
         * The QuotationReceipt member.
         */
        QuotationReceipt = 21,
        /**
         * The PackingSlip member.
         */
        PackingSlip = 22,
        /**
         * The PickupReceipt member.
         */
        PickupReceipt = 23,
        /**
         * The XReport member.
         */
        XReport = 24,
        /**
         * The ZReport member.
         */
        ZReport = 25,
        /**
         * The SafeDrop member.
         */
        SafeDrop = 26,
        /**
         * The BankDrop member.
         */
        BankDrop = 27,
        /**
         * The TenderDeclaration member.
         */
        TenderDeclaration = 28,
        /**
         * The RemoveTender member.
         */
        RemoveTender = 29,
        /**
         * The FloatEntry member.
         */
        FloatEntry = 30,
        /**
         * The StartingAmount member.
         */
        StartingAmount = 31,
        /**
         * The OrderSummaryReceipt member.
         */
        OrderSummaryReceipt = 32,
        /**
         * The GiftReceipt member.
         */
        GiftReceipt = 33,
        /**
         * The ReturnLabel member.
         */
        ReturnLabel = 34,
        /**
         * The EFDocDANFESimplified member.
         */
        EFDocDANFESimplified = 35,
        /**
         * The EFDocDANFEDetailed member.
         */
        EFDocDANFEDetailed = 36,
        /**
         * The PickingList member.
         */
        PickingList = 37,
        /**
         * The OpenDrawer member.
         */
        OpenDrawer = 38,
        /**
         * The SuspendedTransaction member.
         */
        SuspendedTransaction = 39,
        /**
         * The GiftCardInquiry member.
         */
        GiftCardInquiry = 40,
        /**
         * The CardTerminationReceiptForShop member.
         */
        CardTerminationReceiptForShop = 41,
        /**
         * The CardTerminationReceiptForCustomer member.
         */
        CardTerminationReceiptForCustomer = 42,
        /**
         * The CustomReceipt1 member.
         */
        CustomReceipt1 = 101,
        /**
         * The CustomReceipt2 member.
         */
        CustomReceipt2 = 102,
        /**
         * The CustomReceipt3 member.
         */
        CustomReceipt3 = 103,
        /**
         * The CustomReceipt4 member.
         */
        CustomReceipt4 = 104,
        /**
         * The CustomReceipt5 member.
         */
        CustomReceipt5 = 105,
        /**
         * The CustomReceipt6 member.
         */
        CustomReceipt6 = 106,
        /**
         * The CustomReceipt7 member.
         */
        CustomReceipt7 = 107,
        /**
         * The CustomReceipt8 member.
         */
        CustomReceipt8 = 108,
        /**
         * The CustomReceipt9 member.
         */
        CustomReceipt9 = 109,
        /**
         * The CustomReceipt10 member.
         */
        CustomReceipt10 = 110,
        /**
         * The CustomReceipt11 member.
         */
        CustomReceipt11 = 111,
        /**
         * The CustomReceipt12 member.
         */
        CustomReceipt12 = 112,
        /**
         * The CustomReceipt13 member.
         */
        CustomReceipt13 = 113,
        /**
         * The CustomReceipt14 member.
         */
        CustomReceipt14 = 114,
        /**
         * The CustomReceipt15 member.
         */
        CustomReceipt15 = 115,
        /**
         * The CustomReceipt16 member.
         */
        CustomReceipt16 = 116,
        /**
         * The CustomReceipt17 member.
         */
        CustomReceipt17 = 117,
        /**
         * The CustomReceipt18 member.
         */
        CustomReceipt18 = 118,
        /**
         * The CustomReceipt19 member.
         */
        CustomReceipt19 = 119,
        /**
         * The CustomReceipt20 member.
         */
        CustomReceipt20 = 120,
    }
    /**
     * PrintBehavior enum type.
     */
    enum PrintBehavior {
        /**
         * The Always member.
         */
        Always = 0,
        /**
         * The Never member.
         */
        Never = 1,
        /**
         * The Prompt member.
         */
        Prompt = 2,
        /**
         * The AsRequired member.
         */
        AsRequired = 3,
    }
    /**
     * DistanceUnit enum type.
     */
    enum DistanceUnit {
        /**
         * The Miles member.
         */
        Miles = 0,
        /**
         * The Kilometers member.
         */
        Kilometers = 1,
    }
    /**
     * StockCountStatus enum type.
     */
    enum StockCountStatus {
        /**
         * The Unchanged member.
         */
        Unchanged = 0,
        /**
         * The PendingUpdate member.
         */
        PendingUpdate = 1,
    }
    /**
     * RecommendedElementType enum type.
     */
    enum RecommendedElementType {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Product member.
         */
        Product = 1,
        /**
         * The Content member.
         */
        Content = 2,
    }
    /**
     * CommerceListInvitationStatus enum type.
     */
    enum CommerceListInvitationStatus {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Pending member.
         */
        Pending = 1,
        /**
         * The Accepted member.
         */
        Accepted = 2,
    }
    /**
     * CommerceListInvitationType enum type.
     */
    enum CommerceListInvitationType {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Public member.
         */
        Public = 1,
        /**
         * The Email member.
         */
        Email = 2,
    }
    /**
     * SearchLocation enum type.
     */
    enum SearchLocation {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Local member.
         */
        Local = 1,
        /**
         * The Remote member.
         */
        Remote = 2,
        /**
         * The All member.
         */
        All = 3,
    }
    /**
     * OrderSearchType enum type.
     */
    enum OrderSearchType {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The SalesOrder member.
         */
        SalesOrder = 1,
        /**
         * The SalesTransaction member.
         */
        SalesTransaction = 2,
        /**
         * The ConsolidateOrder member.
         */
        ConsolidateOrder = 3,
    }
    /**
     * SalesTransactionType enum type.
     */
    enum SalesTransactionType {
        /**
         * The Sales member.
         */
        Sales = 2,
        /**
         * The CustomerAccountDeposit member.
         */
        CustomerAccountDeposit = 3,
        /**
         * The SalesInvoice member.
         */
        SalesInvoice = 15,
        /**
         * The IncomeExpense member.
         */
        IncomeExpense = 18,
        /**
         * The CustomerOrder member.
         */
        CustomerOrder = 19,
        /**
         * The PendingSalesOrder member.
         */
        PendingSalesOrder = 27,
        /**
         * The AsyncCustomerQuote member.
         */
        AsyncCustomerQuote = 31,
        /**
         * The AsyncCustomerOrder member.
         */
        AsyncCustomerOrder = 33,
        /**
         * The SuspendedTransaction member.
         */
        SuspendedTransaction = 36,
        /**
         * The None member.
         */
        None = -1,
    }
    /**
     * RetailAffiliationType enum type.
     */
    enum RetailAffiliationType {
        /**
         * The General member.
         */
        General = 0,
        /**
         * The Loyalty member.
         */
        Loyalty = 1,
        /**
         * The Unknown member.
         */
        Unknown = -1,
    }
    /**
     * InventorySerialNumberLineStatus enum type.
     */
    enum InventorySerialNumberLineStatus {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The NotRegistered member.
         */
        NotRegistered = 1,
        /**
         * The Registering member.
         */
        Registering = 2,
        /**
         * The Registered member.
         */
        Registered = 3,
    }
    /**
     * InventorySourceDocumentLineStatus enum type.
     */
    enum InventorySourceDocumentLineStatus {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Deleted member.
         */
        Deleted = 1,
    }
    /**
     * RefinerType enum type.
     */
    enum RefinerType {
        /**
         * The SingleSelect member.
         */
        SingleSelect = 0,
        /**
         * The MultiSelect member.
         */
        MultiSelect = 1,
        /**
         * The FreeText member.
         */
        FreeText = 2,
    }
    /**
     * DisplayTemplate enum type.
     */
    enum DisplayTemplate {
        /**
         * The List member.
         */
        List = 0,
        /**
         * The Slider member.
         */
        Slider = 1,
        /**
         * The SliderWithBars member.
         */
        SliderWithBars = 2,
        /**
         * The Range member.
         */
        Range = 3,
        /**
         * The TextBox member.
         */
        TextBox = 4,
    }
    /**
     * ClientBookRefinerSource enum type.
     */
    enum ClientBookRefinerSource {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Attribute member.
         */
        Attribute = 1,
        /**
         * The CustomerSearchKeyword member.
         */
        CustomerSearchKeyword = 2,
        /**
         * The StaffId member.
         */
        StaffId = 3,
    }
    /**
     * ProductRefinerSource enum type.
     */
    enum ProductRefinerSource {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Attribute member.
         */
        Attribute = 1,
        /**
         * The Category member.
         */
        Category = 2,
        /**
         * The Price member.
         */
        Price = 3,
        /**
         * The Rating member.
         */
        Rating = 4,
    }
    /**
     * LoyaltyCardTenderType enum type.
     */
    enum LoyaltyCardTenderType {
        /**
         * The AsCardTender member.
         */
        AsCardTender = 0,
        /**
         * The AsContactTender member.
         */
        AsContactTender = 1,
        /**
         * The NoTender member.
         */
        NoTender = 2,
        /**
         * The Blocked member.
         */
        Blocked = 3,
    }
    /**
     * ReleasedProductType enum type.
     */
    enum ReleasedProductType {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Item member.
         */
        Item = 1,
        /**
         * The Service member.
         */
        Service = 2,
    }
    /**
     * RetailChannelType enum type.
     */
    enum RetailChannelType {
        /**
         * The RetailStore member.
         */
        RetailStore = 0,
        /**
         * The OnlineStore member.
         */
        OnlineStore = 1,
        /**
         * The OnlineMarketplace member.
         */
        OnlineMarketplace = 2,
        /**
         * The SharePointOnlineStore member.
         */
        SharePointOnlineStore = 3,
        /**
         * The None member.
         */
        None = -1,
    }
    /**
     * LogOnConfiguration enum type.
     */
    enum LogOnConfiguration {
        /**
         * The LocalDatabase member.
         */
        LocalDatabase = 0,
        /**
         * The RealTimeService member.
         */
        RealTimeService = 1,
    }
    /**
     * TransactionServiceAuthenticationType enum type.
     */
    enum TransactionServiceAuthenticationType {
        /**
         * The CertificateAuthentication member.
         */
        CertificateAuthentication = 0,
        /**
         * The ServiceToServiceAuthentication member.
         */
        ServiceToServiceAuthentication = 1,
        /**
         * The AdfsServiceToServiceClientSecretAuthentication member.
         */
        AdfsServiceToServiceClientSecretAuthentication = 2,
    }
    /**
     * InventAvailabilityCalculationMode enum type.
     */
    enum InventAvailabilityCalculationMode {
        /**
         * The RealTimeService member.
         */
        RealTimeService = 0,
        /**
         * The Channel member.
         */
        Channel = 1,
    }
    /**
     * InventoryAvailabilityClientDisplayMode enum type.
     */
    enum InventoryAvailabilityClientDisplayMode {
        /**
         * The Raw member.
         */
        Raw = 0,
        /**
         * The Buffered member.
         */
        Buffered = 1,
        /**
         * The None member.
         */
        None = 2,
        /**
         * The Unknown member.
         */
        Unknown = -1,
    }
    /**
     * EmployeeActivityType enum type.
     */
    enum EmployeeActivityType {
        /**
         * The ClockIn member.
         */
        ClockIn = 0,
        /**
         * The JobStop member.
         */
        JobStop = 1,
        /**
         * The JobStart member.
         */
        JobStart = 2,
        /**
         * The TeamStop member.
         */
        TeamStop = 3,
        /**
         * The TeamStart member.
         */
        TeamStart = 4,
        /**
         * The BreakFlowStart member.
         */
        BreakFlowStart = 5,
        /**
         * The BreakCancelOne member.
         */
        BreakCancelOne = 6,
        /**
         * The BreakCancelAll member.
         */
        BreakCancelAll = 7,
        /**
         * The BreakFlowStop member.
         */
        BreakFlowStop = 8,
        /**
         * The FinishQuantity member.
         */
        FinishQuantity = 9,
        /**
         * The ClockOut member.
         */
        ClockOut = 10,
        /**
         * The EventCode member.
         */
        EventCode = 11,
        /**
         * The BreakFromWork member.
         */
        BreakFromWork = 12,
        /**
         * The BreakForLunch member.
         */
        BreakForLunch = 13,
        /**
         * The Logbook member.
         */
        Logbook = 14,
        /**
         * The None member.
         */
        None = -1,
    }
    /**
     * DeliveryPreferenceType enum type.
     */
    enum DeliveryPreferenceType {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The ShipToAddress member.
         */
        ShipToAddress = 1,
        /**
         * The PickupFromStore member.
         */
        PickupFromStore = 2,
        /**
         * The ElectronicDelivery member.
         */
        ElectronicDelivery = 3,
        /**
         * The DeliverItemsIndividually member.
         */
        DeliverItemsIndividually = 4,
    }
    /**
     * LayoutType enum type.
     */
    enum LayoutType {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The ModernPosCompact member.
         */
        ModernPosCompact = 1,
        /**
         * The ModernPosFull member.
         */
        ModernPosFull = 2,
        /**
         * The Epos member.
         */
        Epos = 3,
    }
    /**
     * SalesInvoiceType enum type.
     */
    enum SalesInvoiceType {
        /**
         * The Journal member.
         */
        Journal = 0,
        /**
         * The Quotation member.
         */
        Quotation = 1,
        /**
         * The Subscription member.
         */
        Subscription = 2,
        /**
         * The Sales member.
         */
        Sales = 3,
        /**
         * The ReturnItem member.
         */
        ReturnItem = 4,
        /**
         * The Blanket member.
         */
        Blanket = 5,
        /**
         * The ItemRequirements member.
         */
        ItemRequirements = 6,
    }
    /**
     * InvoiceType enum type.
     */
    enum InvoiceType {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The SalesOrderInvoice member.
         */
        SalesOrderInvoice = 1,
        /**
         * The FreeTextInvoice member.
         */
        FreeTextInvoice = 2,
        /**
         * The ProjectInvoice member.
         */
        ProjectInvoice = 3,
        /**
         * The CreditNoteInvoice member.
         */
        CreditNoteInvoice = 4,
        /**
         * The FreeTextCreditNoteInvoice member.
         */
        FreeTextCreditNoteInvoice = 5,
        /**
         * The ProjectCreditNoteInvoice member.
         */
        ProjectCreditNoteInvoice = 6,
    }
    /**
     * TaxOverrideType enum type.
     */
    enum TaxOverrideType {
        /**
         * The ItemSalesTaxGroup member.
         */
        ItemSalesTaxGroup = 0,
        /**
         * The SalesTaxGroup member.
         */
        SalesTaxGroup = 1,
        /**
         * The None member.
         */
        None = -1,
    }
    /**
     * TaxOverrideBy enum type.
     */
    enum TaxOverrideBy {
        /**
         * The Line member.
         */
        Line = 0,
        /**
         * The Cart member.
         */
        Cart = 1,
        /**
         * The None member.
         */
        None = -1,
    }
    /**
     * RetailOperation enum type.
     */
    enum RetailOperation {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The ItemSale member.
         */
        ItemSale = 100,
        /**
         * The PriceCheck member.
         */
        PriceCheck = 101,
        /**
         * The VoidItem member.
         */
        VoidItem = 102,
        /**
         * The ItemComment member.
         */
        ItemComment = 103,
        /**
         * The PriceOverride member.
         */
        PriceOverride = 104,
        /**
         * The SetQuantity member.
         */
        SetQuantity = 105,
        /**
         * The ClearQuantity member.
         */
        ClearQuantity = 106,
        /**
         * The ItemSearch member.
         */
        ItemSearch = 108,
        /**
         * The ReturnItem member.
         */
        ReturnItem = 109,
        /**
         * The WeighItem member.
         */
        WeighItem = 110,
        /**
         * The LinkedItemsAdd member.
         */
        LinkedItemsAdd = 112,
        /**
         * The SetDimensions member.
         */
        SetDimensions = 113,
        /**
         * The ReturnTransaction member.
         */
        ReturnTransaction = 114,
        /**
         * The ShowJournal member.
         */
        ShowJournal = 115,
        /**
         * The SetCostPrice member.
         */
        SetCostPrice = 116,
        /**
         * The LoyaltyRequest member.
         */
        LoyaltyRequest = 117,
        /**
         * The ProcessInput member.
         */
        ProcessInput = 118,
        /**
         * The SalespersonBarcode member.
         */
        SalespersonBarcode = 119,
        /**
         * The SalespersonCard member.
         */
        SalespersonCard = 120,
        /**
         * The SalespersonClear member.
         */
        SalespersonClear = 121,
        /**
         * The InvoiceComment member.
         */
        InvoiceComment = 122,
        /**
         * The ChangeUnitOfMeasure member.
         */
        ChangeUnitOfMeasure = 123,
        /**
         * The ItemSaleMultiple member.
         */
        ItemSaleMultiple = 124,
        /**
         * The RFIDSale member.
         */
        RFIDSale = 125,
        /**
         * The SalesHistory member.
         */
        SalesHistory = 126,
        /**
         * The OverrideTaxTransaction member.
         */
        OverrideTaxTransaction = 127,
        /**
         * The OverrideTaxTransactionList member.
         */
        OverrideTaxTransactionList = 128,
        /**
         * The OverrideTaxLine member.
         */
        OverrideTaxLine = 129,
        /**
         * The OverrideTaxLineList member.
         */
        OverrideTaxLineList = 130,
        /**
         * The PackSlip member.
         */
        PackSlip = 131,
        /**
         * The DepositOverride member.
         */
        DepositOverride = 132,
        /**
         * The BuyWarranty member.
         */
        BuyWarranty = 133,
        /**
         * The AddAffiliation member.
         */
        AddAffiliation = 134,
        /**
         * The AddAffiliationFromList member.
         */
        AddAffiliationFromList = 135,
        /**
         * The AddSerialNumber member.
         */
        AddSerialNumber = 136,
        /**
         * The AddAffiliationToCustomer member.
         */
        AddAffiliationToCustomer = 137,
        /**
         * The RemoveAffiliationFromCustomer member.
         */
        RemoveAffiliationFromCustomer = 138,
        /**
         * The ConcludeTransaction member.
         */
        ConcludeTransaction = 139,
        /**
         * The AddLineCharge member.
         */
        AddLineCharge = 140,
        /**
         * The AddHeaderCharge member.
         */
        AddHeaderCharge = 141,
        /**
         * The ManageCharges member.
         */
        ManageCharges = 142,
        /**
         * The RecalculateCharges member.
         */
        RecalculateCharges = 143,
        /**
         * The AddWarrantyToAnExistingTransaction member.
         */
        AddWarrantyToAnExistingTransaction = 144,
        /**
         * The PayCash member.
         */
        PayCash = 200,
        /**
         * The PayCard member.
         */
        PayCard = 201,
        /**
         * The PayCustomerAccount member.
         */
        PayCustomerAccount = 202,
        /**
         * The PayCurrency member.
         */
        PayCurrency = 203,
        /**
         * The PayCheck member.
         */
        PayCheck = 204,
        /**
         * The PayCashQuick member.
         */
        PayCashQuick = 206,
        /**
         * The PayLoyalty member.
         */
        PayLoyalty = 207,
        /**
         * The PayCorporateCard member.
         */
        PayCorporateCard = 208,
        /**
         * The ChangeBack member.
         */
        ChangeBack = 210,
        /**
         * The VoidPayment member.
         */
        VoidPayment = 211,
        /**
         * The FleetCardInfo member.
         */
        FleetCardInfo = 212,
        /**
         * The PayCreditMemo member.
         */
        PayCreditMemo = 213,
        /**
         * The PayGiftCertificate member.
         */
        PayGiftCertificate = 214,
        /**
         * The CashOutGiftCard member.
         */
        CashOutGiftCard = 215,
        /**
         * The LineDiscountAmount member.
         */
        LineDiscountAmount = 300,
        /**
         * The LineDiscountPercent member.
         */
        LineDiscountPercent = 301,
        /**
         * The TotalDiscountAmount member.
         */
        TotalDiscountAmount = 302,
        /**
         * The TotalDiscountPercent member.
         */
        TotalDiscountPercent = 303,
        /**
         * The DiscountCodeBarcode member.
         */
        DiscountCodeBarcode = 304,
        /**
         * The CalculateFullDiscounts member.
         */
        CalculateFullDiscounts = 310,
        /**
         * The PopupMenu member.
         */
        PopupMenu = 400,
        /**
         * The Submenu member.
         */
        Submenu = 401,
        /**
         * The VoidTransaction member.
         */
        VoidTransaction = 500,
        /**
         * The TransactionComment member.
         */
        TransactionComment = 501,
        /**
         * The SalesPerson member.
         */
        SalesPerson = 502,
        /**
         * The SuspendTransaction member.
         */
        SuspendTransaction = 503,
        /**
         * The RecallTransaction member.
         */
        RecallTransaction = 504,
        /**
         * The RecallUnconcludedTransaction member.
         */
        RecallUnconcludedTransaction = 505,
        /**
         * The CardSwipe member.
         */
        CardSwipe = 506,
        /**
         * The PharmacyPrescriptionAdd member.
         */
        PharmacyPrescriptionAdd = 507,
        /**
         * The PharmacyPrescriptionCancel member.
         */
        PharmacyPrescriptionCancel = 508,
        /**
         * The PharmacyPrescriptionPaid member.
         */
        PharmacyPrescriptionPaid = 509,
        /**
         * The PharmacyPrescriptions member.
         */
        PharmacyPrescriptions = 510,
        /**
         * The IssueCreditMemo member.
         */
        IssueCreditMemo = 511,
        /**
         * The IssueGiftCertificate member.
         */
        IssueGiftCertificate = 512,
        /**
         * The DisplayTotal member.
         */
        DisplayTotal = 513,
        /**
         * The RecallSalesOrder member.
         */
        RecallSalesOrder = 515,
        /**
         * The SalesInvoice member.
         */
        SalesInvoice = 516,
        /**
         * The IncomeAccounts member.
         */
        IncomeAccounts = 517,
        /**
         * The ExpenseAccounts member.
         */
        ExpenseAccounts = 518,
        /**
         * The AddToGiftCard member.
         */
        AddToGiftCard = 519,
        /**
         * The GiftCardBalance member.
         */
        GiftCardBalance = 520,
        /**
         * The LoyaltyCardPointsBalance member.
         */
        LoyaltyCardPointsBalance = 521,
        /**
         * The CashChangerRegisterAmount member.
         */
        CashChangerRegisterAmount = 550,
        /**
         * The CashChangerReset member.
         */
        CashChangerReset = 551,
        /**
         * The CashChangerRegret member.
         */
        CashChangerRegret = 552,
        /**
         * The CashChangerExit member.
         */
        CashChangerExit = 553,
        /**
         * The CashChangerChange member.
         */
        CashChangerChange = 554,
        /**
         * The CashChangerLogOn member.
         */
        CashChangerLogOn = 555,
        /**
         * The CashChangerInit member.
         */
        CashChangerInit = 556,
        /**
         * The SetCustomer member.
         */
        SetCustomer = 600,
        /**
         * The CustomerSearch member.
         */
        CustomerSearch = 602,
        /**
         * The CustomerClear member.
         */
        CustomerClear = 603,
        /**
         * The CustomerCard member.
         */
        CustomerCard = 604,
        /**
         * The CustomerTransactions member.
         */
        CustomerTransactions = 609,
        /**
         * The CustomerTransactionsReport member.
         */
        CustomerTransactionsReport = 610,
        /**
         * The CustomerBalanceReport member.
         */
        CustomerBalanceReport = 611,
        /**
         * The CustomerAdd member.
         */
        CustomerAdd = 612,
        /**
         * The CustomerBarcode member.
         */
        CustomerBarcode = 613,
        /**
         * The EditCustomerOrder member.
         */
        EditCustomerOrder = 614,
        /**
         * The EditQuotation member.
         */
        EditQuotation = 615,
        /**
         * The CreateCustomerOrder member.
         */
        CreateCustomerOrder = 620,
        /**
         * The CreateQuotation member.
         */
        CreateQuotation = 621,
        /**
         * The Search member.
         */
        Search = 622,
        /**
         * The CustomerEdit member.
         */
        CustomerEdit = 623,
        /**
         * The LoyaltyIssueCard member.
         */
        LoyaltyIssueCard = 625,
        /**
         * The RecalculateCustomerOrder member.
         */
        RecalculateCustomerOrder = 627,
        /**
         * The ShipSelectedProducts member.
         */
        ShipSelectedProducts = 629,
        /**
         * The ShipAllProducts member.
         */
        ShipAllProducts = 630,
        /**
         * The PickupSelectedProducts member.
         */
        PickupSelectedProducts = 631,
        /**
         * The PickupAllProducts member.
         */
        PickupAllProducts = 632,
        /**
         * The SetQuotationExpirationDate member.
         */
        SetQuotationExpirationDate = 633,
        /**
         * The PaymentsHistory member.
         */
        PaymentsHistory = 634,
        /**
         * The ReturnChargesOverride member.
         */
        ReturnChargesOverride = 635,
        /**
         * The CreateRetailTransaction member.
         */
        CreateRetailTransaction = 636,
        /**
         * The SetCommissionSalesGroupOnTransaction member.
         */
        SetCommissionSalesGroupOnTransaction = 637,
        /**
         * The SetCommissionSalesGroupOnLine member.
         */
        SetCommissionSalesGroupOnLine = 638,
        /**
         * The ClearCommissionSalesGroupOnTransaction member.
         */
        ClearCommissionSalesGroupOnTransaction = 639,
        /**
         * The ClearCommissionSalesGroupOnLine member.
         */
        ClearCommissionSalesGroupOnLine = 640,
        /**
         * The CarryoutSelectedProducts member.
         */
        CarryoutSelectedProducts = 641,
        /**
         * The CarryoutAllProducts member.
         */
        CarryoutAllProducts = 642,
        /**
         * The AddCoupons member.
         */
        AddCoupons = 643,
        /**
         * The RemoveCoupons member.
         */
        RemoveCoupons = 644,
        /**
         * The ViewAllDiscounts member.
         */
        ViewAllDiscounts = 645,
        /**
         * The ViewAvailableDiscounts member.
         */
        ViewAvailableDiscounts = 646,
        /**
         * The ChangeDeliveryMode member.
         */
        ChangeDeliveryMode = 647,
        /**
         * The CancelOrder member.
         */
        CancelOrder = 648,
        /**
         * The CreatePickingList member.
         */
        CreatePickingList = 649,
        /**
         * The PrintPackingSlip member.
         */
        PrintPackingSlip = 650,
        /**
         * The EditFulfillmentLine member.
         */
        EditFulfillmentLine = 651,
        /**
         * The AcceptFulfillmentLine member.
         */
        AcceptFulfillmentLine = 652,
        /**
         * The RejectFulfillmentLine member.
         */
        RejectFulfillmentLine = 653,
        /**
         * The PickFulfillmentLine member.
         */
        PickFulfillmentLine = 654,
        /**
         * The PackFulfillmentLine member.
         */
        PackFulfillmentLine = 655,
        /**
         * The ShipFulfillmentLine member.
         */
        ShipFulfillmentLine = 656,
        /**
         * The PickupFulfillmentLine member.
         */
        PickupFulfillmentLine = 657,
        /**
         * The LogOn member.
         */
        LogOn = 700,
        /**
         * The LogOff member.
         */
        LogOff = 701,
        /**
         * The ChangeUser member.
         */
        ChangeUser = 702,
        /**
         * The LockTerminal member.
         */
        LockTerminal = 703,
        /**
         * The LogOffForce member.
         */
        LogOffForce = 704,
        /**
         * The EmployeeCard member.
         */
        EmployeeCard = 705,
        /**
         * The EmployeeBarcode member.
         */
        EmployeeBarcode = 706,
        /**
         * The ActivateDevice member.
         */
        ActivateDevice = 707,
        /**
         * The DeactivateDevice member.
         */
        DeactivateDevice = 708,
        /**
         * The ChangeHardwareStation member.
         */
        ChangeHardwareStation = 709,
        /**
         * The PairHardwareStation member.
         */
        PairHardwareStation = 710,
        /**
         * The MassActivateDevice member.
         */
        MassActivateDevice = 711,
        /**
         * The ViewMyClientBook member.
         */
        ViewMyClientBook = 712,
        /**
         * The ViewStoreClientBooks member.
         */
        ViewStoreClientBooks = 713,
        /**
         * The AddCustomerToClientBook member.
         */
        AddCustomerToClientBook = 714,
        /**
         * The RemoveCustomersFromClientBook member.
         */
        RemoveCustomersFromClientBook = 715,
        /**
         * The ReassignClientBookCustomers member.
         */
        ReassignClientBookCustomers = 716,
        /**
         * The HealthCheck member.
         */
        HealthCheck = 717,
        /**
         * The NegativeAdjustment member.
         */
        NegativeAdjustment = 800,
        /**
         * The InventoryLookup member.
         */
        InventoryLookup = 801,
        /**
         * The StockCount member.
         */
        StockCount = 802,
        /**
         * The PickingAndReceiving member.
         */
        PickingAndReceiving = 803,
        /**
         * The InboundInventory member.
         */
        InboundInventory = 804,
        /**
         * The OutboundInventory member.
         */
        OutboundInventory = 805,
        /**
         * The ApplicationExit member.
         */
        ApplicationExit = 900,
        /**
         * The PrintTaxFree member.
         */
        PrintTaxFree = 906,
        /**
         * The PrintPreviousSlip member.
         */
        PrintPreviousSlip = 907,
        /**
         * The PrintPreviousInvoice member.
         */
        PrintPreviousInvoice = 908,
        /**
         * The UploadPrinterLogo member.
         */
        UploadPrinterLogo = 909,
        /**
         * The RestartComputer member.
         */
        RestartComputer = 910,
        /**
         * The ShutdownComputer member.
         */
        ShutdownComputer = 911,
        /**
         * The DesignModeEnable member.
         */
        DesignModeEnable = 912,
        /**
         * The DesignModeDisable member.
         */
        DesignModeDisable = 913,
        /**
         * The MinimizePOSWindow member.
         */
        MinimizePOSWindow = 914,
        /**
         * The BlankOperation member.
         */
        BlankOperation = 915,
        /**
         * The WindowsWorkflowOperation member.
         */
        WindowsWorkflowOperation = 916,
        /**
         * The DatabaseConnectionStatus member.
         */
        DatabaseConnectionStatus = 917,
        /**
         * The ShowBlindClosedShifts member.
         */
        ShowBlindClosedShifts = 918,
        /**
         * The ExtendedLogOn member.
         */
        ExtendedLogOn = 919,
        /**
         * The TimeRegistration member.
         */
        TimeRegistration = 920,
        /**
         * The ViewTimeClockEntries member.
         */
        ViewTimeClockEntries = 921,
        /**
         * The ViewProductDetails member.
         */
        ViewProductDetails = 922,
        /**
         * The ViewOrderFulfillmentLines member.
         */
        ViewOrderFulfillmentLines = 928,
        /**
         * The OpenDrawer member.
         */
        OpenDrawer = 1000,
        /**
         * The ViewReport member.
         */
        ViewReport = 1003,
        /**
         * The TenderDeclaration member.
         */
        TenderDeclaration = 1052,
        /**
         * The BlindCloseShift member.
         */
        BlindCloseShift = 1053,
        /**
         * The SuspendShift member.
         */
        SuspendShift = 1054,
        /**
         * The CloseShift member.
         */
        CloseShift = 1055,
        /**
         * The PrintX member.
         */
        PrintX = 1056,
        /**
         * The PrintZ member.
         */
        PrintZ = 1057,
        /**
         * The PrintFiscalX member.
         */
        PrintFiscalX = 1058,
        /**
         * The PrintFiscalZ member.
         */
        PrintFiscalZ = 1059,
        /**
         * The CustomerAccountDeposit member.
         */
        CustomerAccountDeposit = 1100,
        /**
         * The DeclareStartAmount member.
         */
        DeclareStartAmount = 1200,
        /**
         * The FloatEntry member.
         */
        FloatEntry = 1201,
        /**
         * The TenderRemoval member.
         */
        TenderRemoval = 1210,
        /**
         * The SafeDrop member.
         */
        SafeDrop = 1211,
        /**
         * The BankDrop member.
         */
        BankDrop = 1212,
        /**
         * The ShippingAddressSearch member.
         */
        ShippingAddressSearch = 1213,
        /**
         * The ShippingAddressAdd member.
         */
        ShippingAddressAdd = 1214,
        /**
         * The ChangePassword member.
         */
        ChangePassword = 1215,
        /**
         * The ResetPassword member.
         */
        ResetPassword = 1216,
        /**
         * The KitDisassembly member.
         */
        KitDisassembly = 1217,
        /**
         * The ForceUnlockPeripheral member.
         */
        ForceUnlockPeripheral = 1218,
        /**
         * The OpenURL member.
         */
        OpenURL = 1219,
        /**
         * The ManageSafe member.
         */
        ManageSafe = 1220,
        /**
         * The VoidSuspendedTransactions member.
         */
        VoidSuspendedTransactions = 1221,
        /**
         * The SkipFiscalRegistration member.
         */
        SkipFiscalRegistration = 1300,
        /**
         * The MarkFiscalEventRegistered member.
         */
        MarkFiscalEventRegistered = 1301,
        /**
         * The CompleteFiscalRegistrationProcess member.
         */
        CompleteFiscalRegistrationProcess = 1302,
        /**
         * The SkipHealthCheckError member.
         */
        SkipHealthCheckError = 1303,
        /**
         * The ManageChecklistsAndTasks member.
         */
        ManageChecklistsAndTasks = 1400,
        /**
         * The Invalid member.
         */
        Invalid = 65535,
    }
    /**
     * ReasonCodeInputRequiredType enum type.
     */
    enum ReasonCodeInputRequiredType {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Always member.
         */
        Always = 1,
        /**
         * The Positive member.
         */
        Positive = 2,
        /**
         * The Negative member.
         */
        Negative = 3,
    }
    /**
     * RecordingValueType enum type.
     */
    enum RecordingValueType {
        /**
         * The Preferred member.
         */
        Preferred = 0,
        /**
         * The Example member.
         */
        Example = 1,
    }
    /**
     * UserActionType enum type.
     */
    enum UserActionType {
        /**
         * The Input member.
         */
        Input = 1,
        /**
         * The Output member.
         */
        Output = 16,
        /**
         * The Validation member.
         */
        Validation = 256,
    }
    /**
     * ArtifactType enum type.
     */
    enum ArtifactType {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Ax7Bpm member.
         */
        Ax7Bpm = 1,
        /**
         * The Visio member.
         */
        Visio = 2,
        /**
         * The TaskGuide member.
         */
        TaskGuide = 3,
        /**
         * The Ax6Bpm member.
         */
        Ax6Bpm = 4,
        /**
         * The TaskGuideResources member.
         */
        TaskGuideResources = 5,
        /**
         * The TaskXml member.
         */
        TaskXml = 6,
        /**
         * The VideoWma member.
         */
        VideoWma = 7,
        /**
         * The ProcessXml member.
         */
        ProcessXml = 8,
        /**
         * The Trace member.
         */
        Trace = 9,
        /**
         * The RapidStartXml member.
         */
        RapidStartXml = 10,
        /**
         * The UserDrawing member.
         */
        UserDrawing = 100,
    }
    /**
     * FrameworkAccess enum type.
     */
    enum FrameworkAccess {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Global member.
         */
        Global = 1,
        /**
         * The Corporate member.
         */
        Corporate = 2,
        /**
         * The Private member.
         */
        Private = 3,
        /**
         * The BoxPackage member.
         */
        BoxPackage = 4,
    }
    /**
     * MetadataControl enum type.
     */
    enum MetadataControl {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The SingleValue member.
         */
        SingleValue = 1,
        /**
         * The MultiValue member.
         */
        MultiValue = 2,
        /**
         * The Tags member.
         */
        Tags = 3,
        /**
         * The Links member.
         */
        Links = 4,
        /**
         * The ComboBox member.
         */
        ComboBox = 5,
        /**
         * The MultiSelect member.
         */
        MultiSelect = 6,
    }
    /**
     * FiscalIntegrationRegistrationStatus enum type.
     */
    enum FiscalIntegrationRegistrationStatus {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Completed member.
         */
        Completed = 1,
        /**
         * The Skipped member.
         */
        Skipped = 2,
        /**
         * The MarkedAsRegistered member.
         */
        MarkedAsRegistered = 3,
        /**
         * The AutoSkipped member.
         */
        AutoSkipped = 4,
    }
    /**
     * CustomerOrderOperation enum type.
     */
    enum CustomerOrderOperation {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Edit member.
         */
        Edit = 1,
        /**
         * The Cancel member.
         */
        Cancel = 2,
        /**
         * The PickUpFromStore member.
         */
        PickUpFromStore = 3,
        /**
         * The CreatePickingList member.
         */
        CreatePickingList = 4,
        /**
         * The CreatePackingSlip member.
         */
        CreatePackingSlip = 5,
        /**
         * The PrintPackingSlip member.
         */
        PrintPackingSlip = 6,
        /**
         * The Return member.
         */
        Return = 7,
        /**
         * The RejectFulfillmentLine member.
         */
        RejectFulfillmentLine = 8,
        /**
         * The AcceptFulfillmentLine member.
         */
        AcceptFulfillmentLine = 9,
        /**
         * The PackFulfillmentLine member.
         */
        PackFulfillmentLine = 10,
        /**
         * The ShipFulfillmentLine member.
         */
        ShipFulfillmentLine = 11,
        /**
         * The PickFulfillmentLine member.
         */
        PickFulfillmentLine = 12,
    }
    /**
     * CartType enum type.
     */
    enum CartType {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Shopping member.
         */
        Shopping = 1,
        /**
         * The Checkout member.
         */
        Checkout = 2,
        /**
         * The CustomerOrder member.
         */
        CustomerOrder = 3,
        /**
         * The IncomeExpense member.
         */
        IncomeExpense = 4,
        /**
         * The AccountDeposit member.
         */
        AccountDeposit = 5,
    }
    /**
     * CustomerOrderMode enum type.
     */
    enum CustomerOrderMode {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The CustomerOrderCreateOrEdit member.
         */
        CustomerOrderCreateOrEdit = 1,
        /**
         * The OrderRecalled member.
         */
        OrderRecalled = 2,
        /**
         * The Pickup member.
         */
        Pickup = 3,
        /**
         * The Return member.
         */
        Return = 4,
        /**
         * The Cancellation member.
         */
        Cancellation = 5,
        /**
         * The QuoteCreateOrEdit member.
         */
        QuoteCreateOrEdit = 6,
    }
    /**
     * CartStatus enum type.
     */
    enum CartStatus {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Created member.
         */
        Created = 1,
        /**
         * The Suspended member.
         */
        Suspended = 2,
        /**
         * The Voided member.
         */
        Voided = 3,
    }
    /**
     * CustomerType enum type.
     */
    enum CustomerType {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Person member.
         */
        Person = 1,
        /**
         * The Organization member.
         */
        Organization = 2,
    }
    /**
     * ContactInfoType enum type.
     */
    enum ContactInfoType {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Phone member.
         */
        Phone = 1,
        /**
         * The Email member.
         */
        Email = 2,
        /**
         * The Url member.
         */
        Url = 3,
        /**
         * The Telex member.
         */
        Telex = 4,
        /**
         * The Fax member.
         */
        Fax = 5,
    }
    /**
     * ChecklistStatus enum type.
     */
    enum ChecklistStatus {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The NotStarted member.
         */
        NotStarted = 1,
        /**
         * The InProgress member.
         */
        InProgress = 2,
        /**
         * The Completed member.
         */
        Completed = 3,
    }
    /**
     * ChecklistTaskDeepLinkType enum type.
     */
    enum ChecklistTaskDeepLinkType {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Display member.
         */
        Display = 1,
        /**
         * The Output member.
         */
        Output = 2,
        /**
         * The Action member.
         */
        Action = 3,
        /**
         * The Url member.
         */
        Url = 4,
        /**
         * The PosOperation member.
         */
        PosOperation = 5,
        /**
         * The CustomerAccount member.
         */
        CustomerAccount = 6,
    }
    /**
     * ChecklistTaskStatus enum type.
     */
    enum ChecklistTaskStatus {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The NotStarted member.
         */
        NotStarted = 1,
        /**
         * The InProgress member.
         */
        InProgress = 2,
        /**
         * The Completed member.
         */
        Completed = 3,
    }
    /**
     * DocumentStatus enum type.
     */
    enum DocumentStatus {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Quotation member.
         */
        Quotation = 1,
        /**
         * The PurchaseOrder member.
         */
        PurchaseOrder = 2,
        /**
         * The Confirmation member.
         */
        Confirmation = 3,
        /**
         * The PickingList member.
         */
        PickingList = 4,
        /**
         * The PackingSlip member.
         */
        PackingSlip = 5,
        /**
         * The ReceiptsList member.
         */
        ReceiptsList = 6,
        /**
         * The Invoice member.
         */
        Invoice = 7,
        /**
         * The ApproveJournal member.
         */
        ApproveJournal = 8,
        /**
         * The ProjectInvoice member.
         */
        ProjectInvoice = 9,
        /**
         * The ProjectPackingSlip member.
         */
        ProjectPackingSlip = 10,
        /**
         * The CRMQuotation member.
         */
        CRMQuotation = 11,
        /**
         * The Lost member.
         */
        Lost = 12,
        /**
         * The Canceled member.
         */
        Canceled = 13,
        /**
         * The FreeTextInvoice member.
         */
        FreeTextInvoice = 14,
        /**
         * The RFQ member.
         */
        RFQ = 15,
        /**
         * The RFQAccept member.
         */
        RFQAccept = 16,
        /**
         * The RFQReject member.
         */
        RFQReject = 17,
        /**
         * The PurchaseRequest member.
         */
        PurchaseRequest = 18,
        /**
         * The RFQResend member.
         */
        RFQResend = 19,
    }
    /**
     * CustomerOrderType enum type.
     */
    enum CustomerOrderType {
        /**
         * The SalesOrder member.
         */
        SalesOrder = 0,
        /**
         * The Quote member.
         */
        Quote = 1,
    }
    /**
     * LineDiscountCalculationType enum type.
     */
    enum LineDiscountCalculationType {
        /**
         * The Line member.
         */
        Line = 0,
        /**
         * The Multiline member.
         */
        Multiline = 1,
        /**
         * The MaxLineMultiline member.
         */
        MaxLineMultiline = 2,
        /**
         * The MinLineMultiline member.
         */
        MinLineMultiline = 3,
        /**
         * The LinePlusMultiline member.
         */
        LinePlusMultiline = 4,
        /**
         * The LineMultiplyMultiline member.
         */
        LineMultiplyMultiline = 5,
    }
    /**
     * TaxCalculationType enum type.
     */
    enum TaxCalculationType {
        /**
         * The Regular member.
         */
        Regular = 0,
        /**
         * The GTE member.
         */
        GTE = 1,
    }
    /**
     * ShiftStatus enum type.
     */
    enum ShiftStatus {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Open member.
         */
        Open = 1,
        /**
         * The Closed member.
         */
        Closed = 2,
        /**
         * The BlindClosed member.
         */
        BlindClosed = 3,
        /**
         * The Suspended member.
         */
        Suspended = 4,
        /**
         * The Invalid member.
         */
        Invalid = 5,
    }
    /**
     * TaxRegistrationType enum type.
     */
    enum TaxRegistrationType {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The INN member.
         */
        INN = 1,
        /**
         * The KPP member.
         */
        KPP = 2,
        /**
         * The OKPO member.
         */
        OKPO = 3,
        /**
         * The OKDP member.
         */
        OKDP = 4,
        /**
         * The OKATO member.
         */
        OKATO = 5,
        /**
         * The OGRN member.
         */
        OGRN = 6,
        /**
         * The SNILS member.
         */
        SNILS = 7,
        /**
         * The CIFTS member.
         */
        CIFTS = 8,
        /**
         * The UID member.
         */
        UID = 9,
        /**
         * The TaxId member.
         */
        TaxId = 10,
        /**
         * The BranchId member.
         */
        BranchId = 11,
        /**
         * The CommercialRegisterCZ member.
         */
        CommercialRegisterCZ = 12,
        /**
         * The CustomsCustomerId member.
         */
        CustomsCustomerId = 14,
        /**
         * The Passport member.
         */
        Passport = 15,
        /**
         * The OfficialIdDoc member.
         */
        OfficialIdDoc = 16,
        /**
         * The ResidenceCertificate member.
         */
        ResidenceCertificate = 17,
        /**
         * The OtherIdDoc member.
         */
        OtherIdDoc = 18,
        /**
         * The NotCensused member.
         */
        NotCensused = 19,
        /**
         * The BusinessPremiseId member.
         */
        BusinessPremiseId = 20,
        /**
         * The LotteryCode member.
         */
        LotteryCode = 21,
    }
    /**
     * CommerceListType enum type.
     */
    enum CommerceListType {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The WishList member.
         */
        WishList = 1,
    }
    /**
     * ProductListType enum type.
     */
    enum ProductListType {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The OrderTemplate member.
         */
        OrderTemplate = 1,
    }
    /**
     * RecommendationType enum type.
     */
    enum RecommendationType {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Editorial member.
         */
        Editorial = 1,
        /**
         * The New member.
         */
        New = 2,
        /**
         * The Trending member.
         */
        Trending = 3,
        /**
         * The Bestselling member.
         */
        Bestselling = 4,
        /**
         * The Cart member.
         */
        Cart = 5,
        /**
         * The PeopleAlsoBuy member.
         */
        PeopleAlsoBuy = 6,
        /**
         * The Picks member.
         */
        Picks = 7,
        /**
         * The ShopSimilarLooks member.
         */
        ShopSimilarLooks = 8,
    }
    /**
     * PurchaseTransferOrderType enum type.
     */
    enum PurchaseTransferOrderType {
        /**
         * The Unknown member.
         */
        Unknown = 0,
        /**
         * The PurchaseOrder member.
         */
        PurchaseOrder = 1,
        /**
         * The TransferIn member.
         */
        TransferIn = 2,
        /**
         * The TransferOut member.
         */
        TransferOut = 3,
        /**
         * The TransferOrder member.
         */
        TransferOrder = 4,
        /**
         * The PickingList member.
         */
        PickingList = 5,
    }
    /**
     * BusinessPartnerUserStatus enum type.
     */
    enum BusinessPartnerUserStatus {
        /**
         * The Pending member.
         */
        Pending = 0,
        /**
         * The Active member.
         */
        Active = 1,
        /**
         * The Removed member.
         */
        Removed = 2,
    }
    /**
     * ElectronicAddressType enum type.
     */
    enum ElectronicAddressType {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Email member.
         */
        Email = 1,
    }
    /**
     * DownloadSessionStatus enum type.
     */
    enum DownloadSessionStatus {
        /**
         * The Started member.
         */
        Started = 0,
        /**
         * The Available member.
         */
        Available = 1,
        /**
         * The Requested member.
         */
        Requested = 2,
        /**
         * The Downloaded member.
         */
        Downloaded = 3,
        /**
         * The Applied member.
         */
        Applied = 4,
        /**
         * The Canceled member.
         */
        Canceled = 5,
        /**
         * The CreateFailed member.
         */
        CreateFailed = 6,
        /**
         * The DownloadFailed member.
         */
        DownloadFailed = 7,
        /**
         * The ApplyFailed member.
         */
        ApplyFailed = 8,
    }
    /**
     * HardwareStationType enum type.
     */
    enum HardwareStationType {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Shared member.
         */
        Shared = 1,
        /**
         * The Dedicated member.
         */
        Dedicated = 2,
    }
    /**
     * AuditEventUploadType enum type.
     */
    enum AuditEventUploadType {
        /**
         * The Async member.
         */
        Async = 0,
        /**
         * The RealTime member.
         */
        RealTime = 1,
    }
    /**
     * AuditEventType enum type.
     */
    enum AuditEventType {
        /**
         * The Unknown member.
         */
        Unknown = 0,
        /**
         * The UserLogOn member.
         */
        UserLogOn = 1,
        /**
         * The UserLogOff member.
         */
        UserLogOff = 2,
        /**
         * The ManagerOverride member.
         */
        ManagerOverride = 3,
        /**
         * The ItemVoid member.
         */
        ItemVoid = 4,
        /**
         * The TransactionVoid member.
         */
        TransactionVoid = 5,
        /**
         * The PrintReceiptCopy member.
         */
        PrintReceiptCopy = 6,
        /**
         * The PriceCheck member.
         */
        PriceCheck = 7,
        /**
         * The TaxOverride member.
         */
        TaxOverride = 8,
        /**
         * The QuantityCorrection member.
         */
        QuantityCorrection = 9,
        /**
         * The PurgeTransactionsData member.
         */
        PurgeTransactionsData = 10,
    }
    /**
     * AuditLogTraceLevel enum type.
     */
    enum AuditLogTraceLevel {
        /**
         * The Trace member.
         */
        Trace = 0,
        /**
         * The Debug member.
         */
        Debug = 1,
        /**
         * The Error member.
         */
        Error = 2,
    }
    /**
     * FiscalIntegrationEventType enum type.
     */
    enum FiscalIntegrationEventType {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Sale member.
         */
        Sale = 1,
        /**
         * The PrintReceiptCopy member.
         */
        PrintReceiptCopy = 2,
        /**
         * The ZReport member.
         */
        ZReport = 3,
        /**
         * The XReport member.
         */
        XReport = 4,
        /**
         * The CloseShift member.
         */
        CloseShift = 5,
        /**
         * The BankDrop member.
         */
        BankDrop = 6,
        /**
         * The TenderDeclaration member.
         */
        TenderDeclaration = 7,
        /**
         * The RemoveTender member.
         */
        RemoveTender = 8,
        /**
         * The FloatEntry member.
         */
        FloatEntry = 9,
        /**
         * The SafeDrop member.
         */
        SafeDrop = 10,
        /**
         * The StartingAmount member.
         */
        StartingAmount = 11,
        /**
         * The PackingSlip member.
         */
        PackingSlip = 12,
        /**
         * The GiftReceipt member.
         */
        GiftReceipt = 13,
        /**
         * The CustomerAccountDeposit member.
         */
        CustomerAccountDeposit = 14,
        /**
         * The CreditMemo member.
         */
        CreditMemo = 15,
        /**
         * The EditCustomerOrder member.
         */
        EditCustomerOrder = 16,
        /**
         * The CreateCustomerOrder member.
         */
        CreateCustomerOrder = 17,
        /**
         * The DepositOverride member.
         */
        DepositOverride = 18,
        /**
         * The FiscalXReport member.
         */
        FiscalXReport = 19,
        /**
         * The FiscalZReport member.
         */
        FiscalZReport = 20,
        /**
         * The AuditEvent member.
         */
        AuditEvent = 21,
        /**
         * The OpenDrawer member.
         */
        OpenDrawer = 22,
        /**
         * The CancelCustomerOrder member.
         */
        CancelCustomerOrder = 23,
        /**
         * The BeginSale member.
         */
        BeginSale = 24,
        /**
         * The PreSale member.
         */
        PreSale = 25,
        /**
         * The IncomeAccounts member.
         */
        IncomeAccounts = 26,
        /**
         * The ExpenseAccounts member.
         */
        ExpenseAccounts = 27,
        /**
         * The VoidTransaction member.
         */
        VoidTransaction = 28,
        /**
         * The SuspendTransaction member.
         */
        SuspendTransaction = 29,
        /**
         * The RecallTransaction member.
         */
        RecallTransaction = 30,
    }
    /**
     * FiscalIntegrationDocumentGenerationResultType enum type.
     */
    enum FiscalIntegrationDocumentGenerationResultType {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Succeeded member.
         */
        Succeeded = 1,
        /**
         * The NotSupported member.
         */
        NotSupported = 2,
        /**
         * The NotRequired member.
         */
        NotRequired = 3,
        /**
         * The Failed member.
         */
        Failed = 4,
    }
    /**
     * FiscalIntegrationServiceCommunicationResultType enum type.
     */
    enum FiscalIntegrationServiceCommunicationResultType {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Succeeded member.
         */
        Succeeded = 1,
        /**
         * The Failed member.
         */
        Failed = 2,
    }
    /**
     * FiscalIntegrationServiceFailureType enum type.
     */
    enum FiscalIntegrationServiceFailureType {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Busy member.
         */
        Busy = 1,
        /**
         * The NotAvailable member.
         */
        NotAvailable = 2,
        /**
         * The SubmissionFailed member.
         */
        SubmissionFailed = 3,
        /**
         * The Other member.
         */
        Other = 4,
        /**
         * The BadResponse member.
         */
        BadResponse = 5,
        /**
         * The Timeout member.
         */
        Timeout = 6,
    }
    /**
     * AttachedServiceStatus enum type.
     */
    enum AttachedServiceStatus {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Disabled member.
         */
        Disabled = 1,
        /**
         * The InProgress member.
         */
        InProgress = 2,
        /**
         * The Enabled member.
         */
        Enabled = 3,
        /**
         * The Submitted member.
         */
        Submitted = 4,
    }
    /**
     * CommunicationErrors enum type.
     */
    enum CommunicationErrors {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_HeadquarterCommunicationFailure member.
         */
        Microsoft_Dynamics_Commerce_Runtime_HeadquarterCommunicationFailure = 1,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_HeadquarterResponseParsingError member.
         */
        Microsoft_Dynamics_Commerce_Runtime_HeadquarterResponseParsingError = 2,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_AggregateCommunicationError member.
         */
        Microsoft_Dynamics_Commerce_Runtime_AggregateCommunicationError = 3,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ExternalProviderError member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ExternalProviderError = 4,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_HeadquarterTransactionServiceMethodCallFailure member.
         */
        Microsoft_Dynamics_Commerce_Runtime_HeadquarterTransactionServiceMethodCallFailure = 5,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_TransactionServiceTimeOut member.
         */
        Microsoft_Dynamics_Commerce_Runtime_TransactionServiceTimeOut = 6,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_TransactionServiceException member.
         */
        Microsoft_Dynamics_Commerce_Runtime_TransactionServiceException = 7,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_TransactionServiceAuthenticationFailedFault member.
         */
        Microsoft_Dynamics_Commerce_Runtime_TransactionServiceAuthenticationFailedFault = 8,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_TransactionServiceForbiddenFault member.
         */
        Microsoft_Dynamics_Commerce_Runtime_TransactionServiceForbiddenFault = 9,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_TransactionServiceSenderFault member.
         */
        Microsoft_Dynamics_Commerce_Runtime_TransactionServiceSenderFault = 10,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidS2SClientId member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidS2SClientId = 11,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidS2SSecret member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidS2SSecret = 12,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidS2STenant member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidS2STenant = 13,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidS2SApplicationName member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidS2SApplicationName = 14,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_TransactionServiceLoyaltySenderFault member.
         */
        Microsoft_Dynamics_Commerce_Runtime_TransactionServiceLoyaltySenderFault = 15,
    }
    /**
     * ConfigurationErrors enum type.
     */
    enum ConfigurationErrors {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ConfigurationSettingNotFound member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ConfigurationSettingNotFound = 1,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidConfigurationKeyFormat member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidConfigurationKeyFormat = 2,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ApplicationCompositionFailed member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ApplicationCompositionFailed = 3,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidChannelConfiguration member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidChannelConfiguration = 4,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidPipelineConfiguration member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidPipelineConfiguration = 5,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidProviderConfiguration member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidProviderConfiguration = 6,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_UnableToFindDeliveryOptions member.
         */
        Microsoft_Dynamics_Commerce_Runtime_UnableToFindDeliveryOptions = 7,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_UnableToFindDeliveryPreferences member.
         */
        Microsoft_Dynamics_Commerce_Runtime_UnableToFindDeliveryPreferences = 8,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_UnableToFindConfigForTenderType member.
         */
        Microsoft_Dynamics_Commerce_Runtime_UnableToFindConfigForTenderType = 9,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ConnectionIsNotOverridden member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ConnectionIsNotOverridden = 10,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ConnectionStringNotProvided member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ConnectionStringNotProvided = 11,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_PaymentConnectorNotFound member.
         */
        Microsoft_Dynamics_Commerce_Runtime_PaymentConnectorNotFound = 12,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_DeviceConfigurationNotFound member.
         */
        Microsoft_Dynamics_Commerce_Runtime_DeviceConfigurationNotFound = 13,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_HardwareProfileNotFound member.
         */
        Microsoft_Dynamics_Commerce_Runtime_HardwareProfileNotFound = 14,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_LayoutNotFound member.
         */
        Microsoft_Dynamics_Commerce_Runtime_LayoutNotFound = 15,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_VersionedEdmResourceFileNotFound member.
         */
        Microsoft_Dynamics_Commerce_Runtime_VersionedEdmResourceFileNotFound = 16,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_RetailServerConfigurationNotFound member.
         */
        Microsoft_Dynamics_Commerce_Runtime_RetailServerConfigurationNotFound = 17,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_RetailServerCertificateNotFound member.
         */
        Microsoft_Dynamics_Commerce_Runtime_RetailServerCertificateNotFound = 18,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_RealtimeServiceCertificateNotFound member.
         */
        Microsoft_Dynamics_Commerce_Runtime_RealtimeServiceCertificateNotFound = 19,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_RealtimeServiceInvalidConfiguration member.
         */
        Microsoft_Dynamics_Commerce_Runtime_RealtimeServiceInvalidConfiguration = 20,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ActivatedDeviceMissingTokenIssueDatetime member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ActivatedDeviceMissingTokenIssueDatetime = 21,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_LCSLibrariesNotConfigured member.
         */
        Microsoft_Dynamics_Commerce_Runtime_LCSLibrariesNotConfigured = 22,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_UnknownRequestResponsePair member.
         */
        Microsoft_Dynamics_Commerce_Runtime_UnknownRequestResponsePair = 23,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ProductRecommendationsDisabled member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ProductRecommendationsDisabled = 24,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_UnableToRetrieveRecommendationServiceCredentials member.
         */
        Microsoft_Dynamics_Commerce_Runtime_UnableToRetrieveRecommendationServiceCredentials = 25,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CommerceIssuerNotFound member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CommerceIssuerNotFound = 26,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_SecretProviderNotAvailable member.
         */
        Microsoft_Dynamics_Commerce_Runtime_SecretProviderNotAvailable = 27,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_SecretNotFound member.
         */
        Microsoft_Dynamics_Commerce_Runtime_SecretNotFound = 28,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_SecretProviderRetrievalFailed member.
         */
        Microsoft_Dynamics_Commerce_Runtime_SecretProviderRetrievalFailed = 29,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_NotValidProfilesConfiguration member.
         */
        Microsoft_Dynamics_Commerce_Runtime_NotValidProfilesConfiguration = 30,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ExtensionSettingsMustStartWithExtPrefix member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ExtensionSettingsMustStartWithExtPrefix = 31,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ConfigurationSettingValueIncorrectFormat member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ConfigurationSettingValueIncorrectFormat = 32,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_RequestWasNotHandled member.
         */
        Microsoft_Dynamics_Commerce_Runtime_RequestWasNotHandled = 33,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_FiscalService_NotFound member.
         */
        Microsoft_Dynamics_Commerce_Runtime_FiscalService_NotFound = 34,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidConfigurationExtensionsSection member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidConfigurationExtensionsSection = 35,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CompositionComponentExportingError member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CompositionComponentExportingError = 36,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_VisualProfileNotFound member.
         */
        Microsoft_Dynamics_Commerce_Runtime_VisualProfileNotFound = 37,
    }
    /**
     * DataValidationErrors enum type.
     */
    enum DataValidationErrors {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The RegexAttribute_ValidationError member.
         */
        RegexAttribute_ValidationError = 1,
        /**
         * The RequiredAttribute_ValidationError member.
         */
        RequiredAttribute_ValidationError = 2,
        /**
         * The StringLengthAttribute_ValidationError member.
         */
        StringLengthAttribute_ValidationError = 3,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_AuthenticationGrantTypeNotSupported member.
         */
        Microsoft_Dynamics_Commerce_Runtime_AuthenticationGrantTypeNotSupported = 4,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_BlockedLoyaltyCard member.
         */
        Microsoft_Dynamics_Commerce_Runtime_BlockedLoyaltyCard = 5,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidLoyaltyCardNumber member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidLoyaltyCardNumber = 6,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_LoyaltyCardNotFound member.
         */
        Microsoft_Dynamics_Commerce_Runtime_LoyaltyCardNotFound = 7,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ProductMasterPageRequired member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ProductMasterPageRequired = 8,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_RequiredValueNotFound member.
         */
        Microsoft_Dynamics_Commerce_Runtime_RequiredValueNotFound = 9,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_SalesLineNotAllowed member.
         */
        Microsoft_Dynamics_Commerce_Runtime_SalesLineNotAllowed = 10,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_RemoteProductsNotSupportedWithCurrentTransactionType member.
         */
        Microsoft_Dynamics_Commerce_Runtime_RemoteProductsNotSupportedWithCurrentTransactionType = 11,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CustomerAccountIsBlocked member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CustomerAccountIsBlocked = 12,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CustomerInvoiceAccountIsBlocked member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CustomerInvoiceAccountIsBlocked = 13,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ProductIsNotActive member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ProductIsNotActive = 14,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ProductIsBlocked member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ProductIsBlocked = 15,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ValueOutOfRange member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ValueOutOfRange = 16,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ObjectNotFound member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ObjectNotFound = 17,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_DuplicateObject member.
         */
        Microsoft_Dynamics_Commerce_Runtime_DuplicateObject = 18,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidFormat member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidFormat = 19,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_MissingStockCountTransactions member.
         */
        Microsoft_Dynamics_Commerce_Runtime_MissingStockCountTransactions = 20,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_MissingParameter member.
         */
        Microsoft_Dynamics_Commerce_Runtime_MissingParameter = 21,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidProductDimensionCombinations member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidProductDimensionCombinations = 22,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_EmployeeDiscountExceeded member.
         */
        Microsoft_Dynamics_Commerce_Runtime_EmployeeDiscountExceeded = 23,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_EmployeeDetailsNotFound member.
         */
        Microsoft_Dynamics_Commerce_Runtime_EmployeeDetailsNotFound = 24,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_BarcodeNotFound member.
         */
        Microsoft_Dynamics_Commerce_Runtime_BarcodeNotFound = 25,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CustomerNotFound member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CustomerNotFound = 26,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ExistingCustomerAlreadyMappedToExternalIdentity member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ExistingCustomerAlreadyMappedToExternalIdentity = 27,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_UnsupportedLanguage member.
         */
        Microsoft_Dynamics_Commerce_Runtime_UnsupportedLanguage = 28,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_UnknownRequest member.
         */
        Microsoft_Dynamics_Commerce_Runtime_UnknownRequest = 29,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_UnSupportedType member.
         */
        Microsoft_Dynamics_Commerce_Runtime_UnSupportedType = 30,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_AggregateValidationError member.
         */
        Microsoft_Dynamics_Commerce_Runtime_AggregateValidationError = 31,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_IdMismatch member.
         */
        Microsoft_Dynamics_Commerce_Runtime_IdMismatch = 32,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidRequest member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidRequest = 33,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_MultipleEmployeeLineDiscountsNotAllowed member.
         */
        Microsoft_Dynamics_Commerce_Runtime_MultipleEmployeeLineDiscountsNotAllowed = 34,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_MultipleEmployeeTotalDiscountsNotAllowed member.
         */
        Microsoft_Dynamics_Commerce_Runtime_MultipleEmployeeTotalDiscountsNotAllowed = 35,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_TotalDiscountsNotAllowedForMixSalesAndReturn member.
         */
        Microsoft_Dynamics_Commerce_Runtime_TotalDiscountsNotAllowedForMixSalesAndReturn = 36,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_IncomeExpenseAccountsInSameCart member.
         */
        Microsoft_Dynamics_Commerce_Runtime_IncomeExpenseAccountsInSameCart = 37,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_IncomeExpenseCartDoesNotAllowDiscounts member.
         */
        Microsoft_Dynamics_Commerce_Runtime_IncomeExpenseCartDoesNotAllowDiscounts = 38,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_IncomeExpenseCartDoesNotAllowSalesLine member.
         */
        Microsoft_Dynamics_Commerce_Runtime_IncomeExpenseCartDoesNotAllowSalesLine = 39,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_IncomeExpenseCartDoesNotAllowCustomer member.
         */
        Microsoft_Dynamics_Commerce_Runtime_IncomeExpenseCartDoesNotAllowCustomer = 40,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_IncomeExpenseCartDoesNotAllowGiftCardLine member.
         */
        Microsoft_Dynamics_Commerce_Runtime_IncomeExpenseCartDoesNotAllowGiftCardLine = 41,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_IncomeExpenseLineDoesNotAllowSettingTransactionStatus member.
         */
        Microsoft_Dynamics_Commerce_Runtime_IncomeExpenseLineDoesNotAllowSettingTransactionStatus = 42,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_IncomeExpenseCartDoesNotAllowAffiliation member.
         */
        Microsoft_Dynamics_Commerce_Runtime_IncomeExpenseCartDoesNotAllowAffiliation = 43,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InsufficientQuantityAvailable member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InsufficientQuantityAvailable = 44,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidUnitOfMeasure member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidUnitOfMeasure = 45,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_UnitOfMeasureConversionNotFound member.
         */
        Microsoft_Dynamics_Commerce_Runtime_UnitOfMeasureConversionNotFound = 46,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidDeliveryMode member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidDeliveryMode = 47,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_DeliveryModeMissing member.
         */
        Microsoft_Dynamics_Commerce_Runtime_DeliveryModeMissing = 48,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_UnableToFindDeliveryOptions member.
         */
        Microsoft_Dynamics_Commerce_Runtime_UnableToFindDeliveryOptions = 49,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidEmailAddress member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidEmailAddress = 50,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidDeliveryPreferenceType member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidDeliveryPreferenceType = 51,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidShippingAddress member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidShippingAddress = 52,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidCountryRegion member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidCountryRegion = 53,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidStateProvince member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidStateProvince = 54,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidCounty member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidCounty = 55,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidCity member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidCity = 56,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidDistrict member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidDistrict = 57,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidZipPostalCode member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidZipPostalCode = 58,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidAddress member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidAddress = 59,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidShippingDate member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidShippingDate = 60,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_DiscountAmountInvalidated member.
         */
        Microsoft_Dynamics_Commerce_Runtime_DiscountAmountInvalidated = 61,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidPriceEncountered member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidPriceEncountered = 62,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ItemDiscontinuedFromChannel member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ItemDiscontinuedFromChannel = 63,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_DiscontinuedProductsRemovedFromCart member.
         */
        Microsoft_Dynamics_Commerce_Runtime_DiscontinuedProductsRemovedFromCart = 64,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_GrossWeightForItemNotFound member.
         */
        Microsoft_Dynamics_Commerce_Runtime_GrossWeightForItemNotFound = 65,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ListingIdNotFound member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ListingIdNotFound = 66,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_RequiredReasonCodesMissing member.
         */
        Microsoft_Dynamics_Commerce_Runtime_RequiredReasonCodesMissing = 67,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ReasonCodeLinesReasonCodeIdDuplicated member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ReasonCodeLinesReasonCodeIdDuplicated = 68,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CartNotActive member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CartNotActive = 69,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidStatus member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidStatus = 70,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_VoidTransactionContainsTenderedLines member.
         */
        Microsoft_Dynamics_Commerce_Runtime_VoidTransactionContainsTenderedLines = 71,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidCustomerOrderModeForVoidProducts member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidCustomerOrderModeForVoidProducts = 72,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CartContainsProductsForReturn member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CartContainsProductsForReturn = 73,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidReceiptTemplate member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidReceiptTemplate = 74,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidReceiptItem member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidReceiptItem = 75,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ItemIdBarcodeMissing member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ItemIdBarcodeMissing = 76,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_MultipleItemsForItemId member.
         */
        Microsoft_Dynamics_Commerce_Runtime_MultipleItemsForItemId = 77,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidCustomerOrderModeChange member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidCustomerOrderModeChange = 78,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidCustomerOrderModeForReturnTransaction member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidCustomerOrderModeForReturnTransaction = 79,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidCustomerOrderModeForAddCartLine member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidCustomerOrderModeForAddCartLine = 80,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CannotAddProductHavingRefundChargeAmount member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CannotAddProductHavingRefundChargeAmount = 81,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CannotChangeCustomerIdWhenEditingCustomerOrder member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CannotChangeCustomerIdWhenEditingCustomerOrder = 82,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_QuoteMustNotHaveAnyPayment member.
         */
        Microsoft_Dynamics_Commerce_Runtime_QuoteMustNotHaveAnyPayment = 83,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_QuoteMustHaveValidQuotationExpiryDate member.
         */
        Microsoft_Dynamics_Commerce_Runtime_QuoteMustHaveValidQuotationExpiryDate = 84,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_QuoteMustNotHaveDepositOverride member.
         */
        Microsoft_Dynamics_Commerce_Runtime_QuoteMustNotHaveDepositOverride = 85,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_DepositMustBeGreaterThanZero member.
         */
        Microsoft_Dynamics_Commerce_Runtime_DepositMustBeGreaterThanZero = 86,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_DepositOverrideMustNotBeGreaterThanTotalAmount member.
         */
        Microsoft_Dynamics_Commerce_Runtime_DepositOverrideMustNotBeGreaterThanTotalAmount = 87,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_DepositOverrideMustNotBeGreaterThanMaximumOverrideAmount member.
         */
        Microsoft_Dynamics_Commerce_Runtime_DepositOverrideMustNotBeGreaterThanMaximumOverrideAmount = 88,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidPickupDepositOverrideAmount member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidPickupDepositOverrideAmount = 89,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_OrderWasNotCreatedWithDepositOverride member.
         */
        Microsoft_Dynamics_Commerce_Runtime_OrderWasNotCreatedWithDepositOverride = 90,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_DepositOverrideMayNotBeChanged member.
         */
        Microsoft_Dynamics_Commerce_Runtime_DepositOverrideMayNotBeChanged = 91,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_DepositOverrideMayNotBeCleared member.
         */
        Microsoft_Dynamics_Commerce_Runtime_DepositOverrideMayNotBeCleared = 92,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_AmountDueMustBePaidBeforeCheckout member.
         */
        Microsoft_Dynamics_Commerce_Runtime_AmountDueMustBePaidBeforeCheckout = 93,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_DiscountMustBeCalculatedBeforeCheckout member.
         */
        Microsoft_Dynamics_Commerce_Runtime_DiscountMustBeCalculatedBeforeCheckout = 94,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_TotalsMustBeCalculatedBeforeCheckout member.
         */
        Microsoft_Dynamics_Commerce_Runtime_TotalsMustBeCalculatedBeforeCheckout = 95,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_IncorrectPaymentAmountSign member.
         */
        Microsoft_Dynamics_Commerce_Runtime_IncorrectPaymentAmountSign = 96,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_PaymentExceedsMaximumAmountPerLine member.
         */
        Microsoft_Dynamics_Commerce_Runtime_PaymentExceedsMaximumAmountPerLine = 97,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_PaymentExceedsMinimumAmountPerLine member.
         */
        Microsoft_Dynamics_Commerce_Runtime_PaymentExceedsMinimumAmountPerLine = 98,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_PaymentExceedsMaximumAmountPerTransaction member.
         */
        Microsoft_Dynamics_Commerce_Runtime_PaymentExceedsMaximumAmountPerTransaction = 99,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_PaymentExceedsMinimumAmountPerTransaction member.
         */
        Microsoft_Dynamics_Commerce_Runtime_PaymentExceedsMinimumAmountPerTransaction = 100,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ChangebackIsNotAllowed member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ChangebackIsNotAllowed = 101,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_OvertenderAmountExceedsMaximumAllowedValue member.
         */
        Microsoft_Dynamics_Commerce_Runtime_OvertenderAmountExceedsMaximumAllowedValue = 102,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_BalanceAmountExceedsMaximumAllowedValue member.
         */
        Microsoft_Dynamics_Commerce_Runtime_BalanceAmountExceedsMaximumAllowedValue = 103,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_PaymentMustBeUsedToFinalizeTransaction member.
         */
        Microsoft_Dynamics_Commerce_Runtime_PaymentMustBeUsedToFinalizeTransaction = 104,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_UnableToFindListing member.
         */
        Microsoft_Dynamics_Commerce_Runtime_UnableToFindListing = 105,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_UnableToFindEmployeeActivityBreakCategory member.
         */
        Microsoft_Dynamics_Commerce_Runtime_UnableToFindEmployeeActivityBreakCategory = 106,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_UnableToFindVariant member.
         */
        Microsoft_Dynamics_Commerce_Runtime_UnableToFindVariant = 107,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidStoreNumber member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidStoreNumber = 108,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_SalesLineMustHavePickupDeliveryMode member.
         */
        Microsoft_Dynamics_Commerce_Runtime_SalesLineMustHavePickupDeliveryMode = 109,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_UnableToPickupMoreThanQtyRemaining member.
         */
        Microsoft_Dynamics_Commerce_Runtime_UnableToPickupMoreThanQtyRemaining = 110,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidDeliveryCharge member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidDeliveryCharge = 111,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CurrencyConversionFailed member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CurrencyConversionFailed = 112,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CurrencyChannelOrderMismatch member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CurrencyChannelOrderMismatch = 113,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CurrencyNotFound member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CurrencyNotFound = 114,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidCancellationCharge member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidCancellationCharge = 115,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ChargeNotConfiguredOnHeadquarters member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ChargeNotConfiguredOnHeadquarters = 116,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ShippingChargeRefundCannotBePositive member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ShippingChargeRefundCannotBePositive = 117,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ShippingChargeRefundIsNotAllowed member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ShippingChargeRefundIsNotAllowed = 118,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_SalesGroupItemGroupIntersectionInvalid member.
         */
        Microsoft_Dynamics_Commerce_Runtime_SalesGroupItemGroupIntersectionInvalid = 119,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CannotApplyHeaderChargesWhenShippingRefundAppliedOnCartLines member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CannotApplyHeaderChargesWhenShippingRefundAppliedOnCartLines = 120,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CannotApplyRefundChargeOnProductForSale member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CannotApplyRefundChargeOnProductForSale = 121,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_PickupModeOfDeliveryNotConfiguredOnHeadquarters member.
         */
        Microsoft_Dynamics_Commerce_Runtime_PickupModeOfDeliveryNotConfiguredOnHeadquarters = 122,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_SerialNumberMissing member.
         */
        Microsoft_Dynamics_Commerce_Runtime_SerialNumberMissing = 123,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_SerialNumberCannotBeChanged member.
         */
        Microsoft_Dynamics_Commerce_Runtime_SerialNumberCannotBeChanged = 124,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_SerialNumberMissingInCustomerOrder member.
         */
        Microsoft_Dynamics_Commerce_Runtime_SerialNumberMissingInCustomerOrder = 125,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_SerializedQuantityGreaterThanOne member.
         */
        Microsoft_Dynamics_Commerce_Runtime_SerializedQuantityGreaterThanOne = 126,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_MultipleCreditCardPaymentNotSupported member.
         */
        Microsoft_Dynamics_Commerce_Runtime_MultipleCreditCardPaymentNotSupported = 127,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidCardExpirationDate member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidCardExpirationDate = 128,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_PurchaseTransferOrderMissing member.
         */
        Microsoft_Dynamics_Commerce_Runtime_PurchaseTransferOrderMissing = 129,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_NotAllLinesSaved member.
         */
        Microsoft_Dynamics_Commerce_Runtime_NotAllLinesSaved = 130,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_PurchaseTransferOrderRequired member.
         */
        Microsoft_Dynamics_Commerce_Runtime_PurchaseTransferOrderRequired = 131,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_SalesMustHaveQuantityGreaterThanZero member.
         */
        Microsoft_Dynamics_Commerce_Runtime_SalesMustHaveQuantityGreaterThanZero = 132,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ReturnsMustHaveQuantityLesserThanZero member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ReturnsMustHaveQuantityLesserThanZero = 133,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CannotReturnMoreThanPurchased member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CannotReturnMoreThanPurchased = 134,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CannotReturnMoreThanInvoicedMinusReturned member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CannotReturnMoreThanInvoicedMinusReturned = 135,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CannotReturnMultipleTransactions member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CannotReturnMultipleTransactions = 136,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_PropertyUpdateNotAllowed member.
         */
        Microsoft_Dynamics_Commerce_Runtime_PropertyUpdateNotAllowed = 137,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_GiftCardDiscountNotAllowed member.
         */
        Microsoft_Dynamics_Commerce_Runtime_GiftCardDiscountNotAllowed = 138,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_LoadingActiveCartFromAnotherTerminalNotAllowed member.
         */
        Microsoft_Dynamics_Commerce_Runtime_LoadingActiveCartFromAnotherTerminalNotAllowed = 139,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ShiftAlreadyOpenOnDifferentTerminal member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ShiftAlreadyOpenOnDifferentTerminal = 140,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_TerminalHasAnOpenShift member.
         */
        Microsoft_Dynamics_Commerce_Runtime_TerminalHasAnOpenShift = 141,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CashDrawerHasAnOpenShift member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CashDrawerHasAnOpenShift = 142,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ShiftStartingAmountNotEntered member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ShiftStartingAmountNotEntered = 143,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ShiftTenderDeclarationAmountNotEntered member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ShiftTenderDeclarationAmountNotEntered = 144,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ShiftHasUnreconciledLines member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ShiftHasUnreconciledLines = 145,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ReconciliationLineStatusMustBePending member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ReconciliationLineStatusMustBePending = 146,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ReceiptTypeNotSupported member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ReceiptTypeNotSupported = 147,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ReceiptTypeNotFound member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ReceiptTypeNotFound = 148,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_MoreThanOneTenderTypeForTenderTypeId member.
         */
        Microsoft_Dynamics_Commerce_Runtime_MoreThanOneTenderTypeForTenderTypeId = 149,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_TimeClockNotEnabled member.
         */
        Microsoft_Dynamics_Commerce_Runtime_TimeClockNotEnabled = 150,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ViewTimeClockNotEnabled member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ViewTimeClockNotEnabled = 151,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_NoMoreThanOneOperationWithAGiftCard member.
         */
        Microsoft_Dynamics_Commerce_Runtime_NoMoreThanOneOperationWithAGiftCard = 152,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_GiftCardUnlockFailed member.
         */
        Microsoft_Dynamics_Commerce_Runtime_GiftCardUnlockFailed = 153,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_GiftCardLineVoidReversalNotSupported member.
         */
        Microsoft_Dynamics_Commerce_Runtime_GiftCardLineVoidReversalNotSupported = 154,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_SalesInvoiceLineVoidReversalNotSupported member.
         */
        Microsoft_Dynamics_Commerce_Runtime_SalesInvoiceLineVoidReversalNotSupported = 155,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CannotSuspendCartWithActiveTenderLines member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CannotSuspendCartWithActiveTenderLines = 156,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CannotSuspendCartWithActiveGiftCardSalesLines member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CannotSuspendCartWithActiveGiftCardSalesLines = 157,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CannotUpdateUnitOfMeasureOnPriceOverriddenLine member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CannotUpdateUnitOfMeasureOnPriceOverriddenLine = 158,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_SettleInvoiceFailed member.
         */
        Microsoft_Dynamics_Commerce_Runtime_SettleInvoiceFailed = 159,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_TerminalNotFound member.
         */
        Microsoft_Dynamics_Commerce_Runtime_TerminalNotFound = 160,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidQuantity member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidQuantity = 161,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ItemQuantityExceeded member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ItemQuantityExceeded = 162,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_NoPriceOverrideForReturns member.
         */
        Microsoft_Dynamics_Commerce_Runtime_NoPriceOverrideForReturns = 163,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_NoPriceOverrideForGiftCards member.
         */
        Microsoft_Dynamics_Commerce_Runtime_NoPriceOverrideForGiftCards = 164,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_NoPriceOverrideForInvoiceLines member.
         */
        Microsoft_Dynamics_Commerce_Runtime_NoPriceOverrideForInvoiceLines = 165,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CannotAddNonProductItemToCustomerOrder member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CannotAddNonProductItemToCustomerOrder = 166,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ReturnItemPriceExceeded member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ReturnItemPriceExceeded = 167,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ReturnTransactionTotalExceeded member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ReturnTransactionTotalExceeded = 168,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ShiftNotFound member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ShiftNotFound = 169,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ShiftValidationError member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ShiftValidationError = 170,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CredentialIdentifierAlreadyInUse member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CredentialIdentifierAlreadyInUse = 171,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CreditVoucherNull member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CreditVoucherNull = 172,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CartNotFound member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CartNotFound = 173,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CustomerAccountDepositMultipleCartLinesNotAllowed member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CustomerAccountDepositMultipleCartLinesNotAllowed = 174,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CustomerAccountNumberIsNotSet member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CustomerAccountNumberIsNotSet = 175,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CannotPayForCustomerAccountDepositWithCustomerAccountPaymentMethod member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CannotPayForCustomerAccountDepositWithCustomerAccountPaymentMethod = 176,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CustomerAccountDepositCannotBeNegative member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CustomerAccountDepositCannotBeNegative = 177,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CustomerAccountDepositCannotBeVoided member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CustomerAccountDepositCannotBeVoided = 178,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_OfflineDatabaseChunkFileNotFound member.
         */
        Microsoft_Dynamics_Commerce_Runtime_OfflineDatabaseChunkFileNotFound = 179,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ChannelIsNotPublished member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ChannelIsNotPublished = 180,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidOperation member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidOperation = 181,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_MaxCountingDifferenceExceeded member.
         */
        Microsoft_Dynamics_Commerce_Runtime_MaxCountingDifferenceExceeded = 182,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_EmployeeNotAllowedManageSharedShift member.
         */
        Microsoft_Dynamics_Commerce_Runtime_EmployeeNotAllowedManageSharedShift = 183,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidAmount member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidAmount = 184,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidBagNumber member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidBagNumber = 185,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_NoPrintersReturned member.
         */
        Microsoft_Dynamics_Commerce_Runtime_NoPrintersReturned = 186,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_EnteringPriceNotAllowed member.
         */
        Microsoft_Dynamics_Commerce_Runtime_EnteringPriceNotAllowed = 187,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_MustKeyInEqualHigherPrice member.
         */
        Microsoft_Dynamics_Commerce_Runtime_MustKeyInEqualHigherPrice = 188,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_MustKeyInEqualLowerPrice member.
         */
        Microsoft_Dynamics_Commerce_Runtime_MustKeyInEqualLowerPrice = 189,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_MustKeyInNewPrice member.
         */
        Microsoft_Dynamics_Commerce_Runtime_MustKeyInNewPrice = 190,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ConflictingClaimsPresentOnUserContext member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ConflictingClaimsPresentOnUserContext = 191,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidCartSalesLineAdd member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidCartSalesLineAdd = 192,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidCartSalesLineUpdate member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidCartSalesLineUpdate = 193,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidCartState member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidCartState = 194,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidProduct member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidProduct = 195,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ConflictingCartLineOperation member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ConflictingCartLineOperation = 196,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidCartLinesAggregateError member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidCartLinesAggregateError = 197,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidCartInventoryLocationId member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidCartInventoryLocationId = 198,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidCartVersion member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidCartVersion = 199,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_UpdateOfReadOnlyCart member.
         */
        Microsoft_Dynamics_Commerce_Runtime_UpdateOfReadOnlyCart = 200,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CustomerOrDirectoryPartyNotFound member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CustomerOrDirectoryPartyNotFound = 201,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CannotUpdateCustomerAndLoyaltyCardAtTheSameTime member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CannotUpdateCustomerAndLoyaltyCardAtTheSameTime = 202,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ConflictLoyaltyCardCustomerAndTransactionCustomer member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ConflictLoyaltyCardCustomerAndTransactionCustomer = 203,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidCashBackAmount member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidCashBackAmount = 204,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_UnableToRetrieveCardPaymentAcceptResult member.
         */
        Microsoft_Dynamics_Commerce_Runtime_UnableToRetrieveCardPaymentAcceptResult = 205,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_PreValidationForAsyncAddressFailed member.
         */
        Microsoft_Dynamics_Commerce_Runtime_PreValidationForAsyncAddressFailed = 206,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ZeroPriceIsNotAllowed member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ZeroPriceIsNotAllowed = 207,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_OperationNotAllowedOnLinkedProduct member.
         */
        Microsoft_Dynamics_Commerce_Runtime_OperationNotAllowedOnLinkedProduct = 208,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CustomerAccountMismatchBetweenTransactionAndDepositLine member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CustomerAccountMismatchBetweenTransactionAndDepositLine = 209,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CustomerAccountDepositLineDoesNotAllowSettingTransactionStatus member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CustomerAccountDepositLineDoesNotAllowSettingTransactionStatus = 210,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CustomerAccountDepositLinesNotAllowed member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CustomerAccountDepositLinesNotAllowed = 211,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ReturnLineNumberNotFound member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ReturnLineNumberNotFound = 212,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CustomerNameExceedsMaximumLength member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CustomerNameExceedsMaximumLength = 213,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CustomerPhoneNumberExceedsMaximumLength member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CustomerPhoneNumberExceedsMaximumLength = 214,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CustomerEmailExceedsMaximumLength member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CustomerEmailExceedsMaximumLength = 215,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidShiftStatusChange member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidShiftStatusChange = 216,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_AmountExceedsMaximumAllowed member.
         */
        Microsoft_Dynamics_Commerce_Runtime_AmountExceedsMaximumAllowed = 217,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_PrintXZReportNotConfigured member.
         */
        Microsoft_Dynamics_Commerce_Runtime_PrintXZReportNotConfigured = 218,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ColumnsNameBadFormat member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ColumnsNameBadFormat = 219,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_SelectedValuesDidNotMatchExactlyOneProduct member.
         */
        Microsoft_Dynamics_Commerce_Runtime_SelectedValuesDidNotMatchExactlyOneProduct = 220,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ProductNotFound member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ProductNotFound = 221,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_DiscountNotAllowed member.
         */
        Microsoft_Dynamics_Commerce_Runtime_DiscountNotAllowed = 222,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_FailedToRecallTransaction member.
         */
        Microsoft_Dynamics_Commerce_Runtime_FailedToRecallTransaction = 223,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_MultiplePrimaryAddresses member.
         */
        Microsoft_Dynamics_Commerce_Runtime_MultiplePrimaryAddresses = 224,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_SortingColumnsNotSupported member.
         */
        Microsoft_Dynamics_Commerce_Runtime_SortingColumnsNotSupported = 225,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_WorkerDoesNotHaveAllowSaleOutsideAssortmentPermission member.
         */
        Microsoft_Dynamics_Commerce_Runtime_WorkerDoesNotHaveAllowSaleOutsideAssortmentPermission = 226,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidOrderInvoiceData member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidOrderInvoiceData = 227,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_NoSalesInvoiceReturned member.
         */
        Microsoft_Dynamics_Commerce_Runtime_NoSalesInvoiceReturned = 228,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_GiftCardLineNotAllowedWithInvoiceLine member.
         */
        Microsoft_Dynamics_Commerce_Runtime_GiftCardLineNotAllowedWithInvoiceLine = 229,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvoiceLineNotAllowedInCustomerOrder member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvoiceLineNotAllowedInCustomerOrder = 230,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CustomerOrderNotAllowedToContainInvoiceLine member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CustomerOrderNotAllowedToContainInvoiceLine = 231,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_SalesLineNotAllowedDuringInvoicePayment member.
         */
        Microsoft_Dynamics_Commerce_Runtime_SalesLineNotAllowedDuringInvoicePayment = 232,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvoiceLineNotAllowedWithItemLines member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvoiceLineNotAllowedWithItemLines = 233,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ItemLinesNotAllowedWithInvoiceLine member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ItemLinesNotAllowedWithInvoiceLine = 234,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_MultipleInvoiceLinesNotAllowed member.
         */
        Microsoft_Dynamics_Commerce_Runtime_MultipleInvoiceLinesNotAllowed = 235,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CustomerAccountRemovalNotAllowedForInvoiceSales member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CustomerAccountRemovalNotAllowedForInvoiceSales = 236,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvoiceLineNotAllowedInCartWithoutCustomerAccount member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvoiceLineNotAllowedInCartWithoutCustomerAccount = 237,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvoiceLineNotAllowedInCartWithDifferentCustomerAccount member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvoiceLineNotAllowedInCartWithDifferentCustomerAccount = 238,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvoiceDiscountNotAllowed member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvoiceDiscountNotAllowed = 239,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_AttributeTypeNotSupported member.
         */
        Microsoft_Dynamics_Commerce_Runtime_AttributeTypeNotSupported = 240,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidAttributeValue member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidAttributeValue = 241,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_AttributeValueOutOfBounds member.
         */
        Microsoft_Dynamics_Commerce_Runtime_AttributeValueOutOfBounds = 242,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_AttributeValueCannotBeNull member.
         */
        Microsoft_Dynamics_Commerce_Runtime_AttributeValueCannotBeNull = 243,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_AttributeTypeMismatch member.
         */
        Microsoft_Dynamics_Commerce_Runtime_AttributeTypeMismatch = 244,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_AttributeDefinitionNotFound member.
         */
        Microsoft_Dynamics_Commerce_Runtime_AttributeDefinitionNotFound = 245,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_AttributeValidationFailure member.
         */
        Microsoft_Dynamics_Commerce_Runtime_AttributeValidationFailure = 246,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_MixingSalesAndReturnsProhibited member.
         */
        Microsoft_Dynamics_Commerce_Runtime_MixingSalesAndReturnsProhibited = 247,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidCouponCode member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidCouponCode = 248,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CouponRequiresCustomerOnCart member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CouponRequiresCustomerOnCart = 249,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ExclusiveCouponCannotBeAppliedWithOtherCoupons member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ExclusiveCouponCannotBeAppliedWithOtherCoupons = 250,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CouponExceedsDefinedUsageLimits member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CouponExceedsDefinedUsageLimits = 251,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_UserCannotAcceptFulfillmentLines member.
         */
        Microsoft_Dynamics_Commerce_Runtime_UserCannotAcceptFulfillmentLines = 252,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_UserCannotRejectFulfillmentLines member.
         */
        Microsoft_Dynamics_Commerce_Runtime_UserCannotRejectFulfillmentLines = 253,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_RestrictPrintingReceiptCopy_AlreadyRegistered member.
         */
        Microsoft_Dynamics_Commerce_Runtime_RestrictPrintingReceiptCopy_AlreadyRegistered = 254,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_RestrictPrintingReceiptCopy_HQisNotAvailable member.
         */
        Microsoft_Dynamics_Commerce_Runtime_RestrictPrintingReceiptCopy_HQisNotAvailable = 255,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_RestrictPrintingReceiptCopy member.
         */
        Microsoft_Dynamics_Commerce_Runtime_RestrictPrintingReceiptCopy = 256,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_RemoveAddPaymentMethodConfigurationNotDefined member.
         */
        Microsoft_Dynamics_Commerce_Runtime_RemoveAddPaymentMethodConfigurationNotDefined = 257,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_OverrideDepostAmountShouldBeLargerThanCarriedOutAmount member.
         */
        Microsoft_Dynamics_Commerce_Runtime_OverrideDepostAmountShouldBeLargerThanCarriedOutAmount = 258,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_MixingItemIdsAndProductIdsProhibited member.
         */
        Microsoft_Dynamics_Commerce_Runtime_MixingItemIdsAndProductIdsProhibited = 259,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_PackingLinesFromDifferentOrdersNotAllowed member.
         */
        Microsoft_Dynamics_Commerce_Runtime_PackingLinesFromDifferentOrdersNotAllowed = 260,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidFulfillmentLineKey member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidFulfillmentLineKey = 261,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_Missing_LocationId member.
         */
        Microsoft_Dynamics_Commerce_Runtime_Missing_LocationId = 262,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_Missing_ShipDate member.
         */
        Microsoft_Dynamics_Commerce_Runtime_Missing_ShipDate = 263,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_Missing_ReceiveDate member.
         */
        Microsoft_Dynamics_Commerce_Runtime_Missing_ReceiveDate = 264,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidOrderType member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidOrderType = 265,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ShippingSerializedProductsNotSupported member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ShippingSerializedProductsNotSupported = 266,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ShippingMultipleOrdersNotSupported member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ShippingMultipleOrdersNotSupported = 267,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_UnableToOpenShift member.
         */
        Microsoft_Dynamics_Commerce_Runtime_UnableToOpenShift = 268,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CartAlreadyCheckedOut member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CartAlreadyCheckedOut = 269,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CashDrawerLimitExceeded member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CashDrawerLimitExceeded = 270,
        /**
         * The Microsoft_Dynamics_Commerce_InvalidShift member.
         */
        Microsoft_Dynamics_Commerce_InvalidShift = 271,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_SuspendedTransactionNotFound member.
         */
        Microsoft_Dynamics_Commerce_Runtime_SuspendedTransactionNotFound = 272,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CartContainsProductsForReturnOnly member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CartContainsProductsForReturnOnly = 273,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CustomerBlockedForLoyaltyEnrollment member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CustomerBlockedForLoyaltyEnrollment = 274,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InactiveCouponCode member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InactiveCouponCode = 275,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ExpiredCouponCode member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ExpiredCouponCode = 276,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_NotStartedCouponCode member.
         */
        Microsoft_Dynamics_Commerce_Runtime_NotStartedCouponCode = 277,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ExceededUsageLimitCouponCode member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ExceededUsageLimitCouponCode = 278,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidResumeCartRequest member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidResumeCartRequest = 279,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ChargeCodeNotFound member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ChargeCodeNotFound = 280,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_PaymentException_ReturnWithoutReceiptPayment member.
         */
        Microsoft_Dynamics_Commerce_Runtime_PaymentException_ReturnWithoutReceiptPayment = 281,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_AddressLengthExceeded member.
         */
        Microsoft_Dynamics_Commerce_Runtime_AddressLengthExceeded = 282,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CountyLengthExceeded member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CountyLengthExceeded = 283,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_StreetLengthExceeded member.
         */
        Microsoft_Dynamics_Commerce_Runtime_StreetLengthExceeded = 284,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidLinkedPayment member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidLinkedPayment = 285,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_AttributeMustBeUnique member.
         */
        Microsoft_Dynamics_Commerce_Runtime_AttributeMustBeUnique = 286,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_NotesLengthExceeded member.
         */
        Microsoft_Dynamics_Commerce_Runtime_NotesLengthExceeded = 287,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_UnableToLocateTenderTypeWithGivenId member.
         */
        Microsoft_Dynamics_Commerce_Runtime_UnableToLocateTenderTypeWithGivenId = 288,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_TenderTypeDoesNotSupportGiftCardOperations member.
         */
        Microsoft_Dynamics_Commerce_Runtime_TenderTypeDoesNotSupportGiftCardOperations = 289,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ExtensibleTransactionTypeNotFound member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ExtensibleTransactionTypeNotFound = 290,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_NotValidLastModifiedDateTimeFromValue member.
         */
        Microsoft_Dynamics_Commerce_Runtime_NotValidLastModifiedDateTimeFromValue = 291,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_MissingRequiredCartTenderLines member.
         */
        Microsoft_Dynamics_Commerce_Runtime_MissingRequiredCartTenderLines = 292,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_NotValidRefinerRecordIdForCustomerSearchKeywordRefiner member.
         */
        Microsoft_Dynamics_Commerce_Runtime_NotValidRefinerRecordIdForCustomerSearchKeywordRefiner = 293,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_NotValidCustomerOrderModeForCheckout member.
         */
        Microsoft_Dynamics_Commerce_Runtime_NotValidCustomerOrderModeForCheckout = 294,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_NotValidCartTypeForCheckout member.
         */
        Microsoft_Dynamics_Commerce_Runtime_NotValidCartTypeForCheckout = 295,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_MissingSequentialSignature member.
         */
        Microsoft_Dynamics_Commerce_Runtime_MissingSequentialSignature = 296,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_MissingRecordIdForStorePickUpAddress member.
         */
        Microsoft_Dynamics_Commerce_Runtime_MissingRecordIdForStorePickUpAddress = 297,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidChecklistTasksUpdateRequest member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidChecklistTasksUpdateRequest = 298,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ChecklistTasksCreateNotAllowed member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ChecklistTasksCreateNotAllowed = 299,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_NotValidTransferOrder member.
         */
        Microsoft_Dynamics_Commerce_Runtime_NotValidTransferOrder = 300,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_NotValidTransferOrderLines member.
         */
        Microsoft_Dynamics_Commerce_Runtime_NotValidTransferOrderLines = 301,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_DefaultLocationNotFoundForWarehouse member.
         */
        Microsoft_Dynamics_Commerce_Runtime_DefaultLocationNotFoundForWarehouse = 302,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ApplyMaxQuantitiesNotSupportedForOperationType member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ApplyMaxQuantitiesNotSupportedForOperationType = 303,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentTransactionServiceDeserializationError member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentTransactionServiceDeserializationError = 304,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentNotValidStatus member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentNotValidStatus = 305,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentUpdateLinesCriteriaNotSupported member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentUpdateLinesCriteriaNotSupported = 306,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InventorySourceDocumentLineMissing member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InventorySourceDocumentLineMissing = 307,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_UpdateInventoryDocumentStatusUnsupportedTransition member.
         */
        Microsoft_Dynamics_Commerce_Runtime_UpdateInventoryDocumentStatusUnsupportedTransition = 308,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_AddingLinesToOrderIsNotAllowed member.
         */
        Microsoft_Dynamics_Commerce_Runtime_AddingLinesToOrderIsNotAllowed = 309,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentOverreceivingToTransferOrderIsNotAllowed member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentOverreceivingToTransferOrderIsNotAllowed = 310,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentOverdeliveringToTransferOrderIsNotAllowed member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentOverdeliveringToTransferOrderIsNotAllowed = 311,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentOverreceivingNotEnabled member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentOverreceivingNotEnabled = 312,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentOvershippingNotEnabled member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentOvershippingNotEnabled = 313,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentOverReceivedExceedsThreshold member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentOverReceivedExceedsThreshold = 314,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentOverShippedExceedsThreshold member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentOverShippedExceedsThreshold = 315,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentOperationCommitFailed member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentOperationCommitFailed = 316,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentReceiptIdNotValid member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentReceiptIdNotValid = 317,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentReceiptIdNotSupportedForGivenDocumentType member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentReceiptIdNotSupportedForGivenDocumentType = 318,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentLockedByOtherTerminal member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentLockedByOtherTerminal = 319,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentVersionNull member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentVersionNull = 320,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentNotValidVersion member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentNotValidVersion = 321,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentNotEnoughApplicableLinesForUpdateLinesByProduct member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentNotEnoughApplicableLinesForUpdateLinesByProduct = 322,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentExceedMaximumQuantity member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentExceedMaximumQuantity = 323,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentLineProductIdMissing member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentLineProductIdMissing = 324,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_StoreOrgUnitNameMissing member.
         */
        Microsoft_Dynamics_Commerce_Runtime_StoreOrgUnitNameMissing = 325,
        /**
         * The Microsoft_Dynamics_RetailServer_BadRequest member.
         */
        Microsoft_Dynamics_RetailServer_BadRequest = 326,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidItemTaxGroup member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidItemTaxGroup = 327,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_MixingGiftCardsAndDepositLinesNotAllowed member.
         */
        Microsoft_Dynamics_Commerce_Runtime_MixingGiftCardsAndDepositLinesNotAllowed = 328,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentRowVersionMismatch member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentRowVersionMismatch = 329,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_AssociatedWarrantableIsVoided member.
         */
        Microsoft_Dynamics_Commerce_Runtime_AssociatedWarrantableIsVoided = 330,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidWarrantyLineQuantity member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidWarrantyLineQuantity = 331,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_DuplicatedWarranty member.
         */
        Microsoft_Dynamics_Commerce_Runtime_DuplicatedWarranty = 332,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_SalesOrderNotFound member.
         */
        Microsoft_Dynamics_Commerce_Runtime_SalesOrderNotFound = 333,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_SalesOrderVoided member.
         */
        Microsoft_Dynamics_Commerce_Runtime_SalesOrderVoided = 334,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_WarrantyAlreadyAdded member.
         */
        Microsoft_Dynamics_Commerce_Runtime_WarrantyAlreadyAdded = 335,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_WarrantyAlreadyBought member.
         */
        Microsoft_Dynamics_Commerce_Runtime_WarrantyAlreadyBought = 336,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_WarrantyNotApplicableByPrice member.
         */
        Microsoft_Dynamics_Commerce_Runtime_WarrantyNotApplicableByPrice = 337,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidWarranty member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidWarranty = 338,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_WarrantyOperationalLineNotFound member.
         */
        Microsoft_Dynamics_Commerce_Runtime_WarrantyOperationalLineNotFound = 339,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_WarrantyForReturnedItemNotAllowed member.
         */
        Microsoft_Dynamics_Commerce_Runtime_WarrantyForReturnedItemNotAllowed = 340,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_IsNotWarranty member.
         */
        Microsoft_Dynamics_Commerce_Runtime_IsNotWarranty = 341,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CannotChangeWarrantableProductWhenItAssociatesWarranty member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CannotChangeWarrantableProductWhenItAssociatesWarranty = 342,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_WarrantyNotEmptyForReturn member.
         */
        Microsoft_Dynamics_Commerce_Runtime_WarrantyNotEmptyForReturn = 343,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CannotSpecifyBothWarrantableLineNumberAndWarrantiedId member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CannotSpecifyBothWarrantableLineNumberAndWarrantiedId = 344,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CannotHaveMultipleWarrantablesOrWarrantiesWithSameWarrantiedId member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CannotHaveMultipleWarrantablesOrWarrantiesWithSameWarrantiedId = 345,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_OnlySerializedProductCanHaveWarranty member.
         */
        Microsoft_Dynamics_Commerce_Runtime_OnlySerializedProductCanHaveWarranty = 346,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CrossCustomerWarrantyNotAllowed member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CrossCustomerWarrantyNotAllowed = 347,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CrossCustomerWarrantyReturnNotAllowed member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CrossCustomerWarrantyReturnNotAllowed = 348,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CustomerChangeNotAllowedWithWarrantyLines member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CustomerChangeNotAllowedWithWarrantyLines = 349,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CustomerChangeNotAllowedWithWarrantyReturn member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CustomerChangeNotAllowedWithWarrantyReturn = 350,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CartTypeChangeNotAllowedWhenWarrantableInDifferentOrder member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CartTypeChangeNotAllowedWhenWarrantableInDifferentOrder = 351,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_WarrantyInconsistentCartType member.
         */
        Microsoft_Dynamics_Commerce_Runtime_WarrantyInconsistentCartType = 352,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_WarrantyRelationCombiningCashAndCarryAndCustomerOrderNotAllowed member.
         */
        Microsoft_Dynamics_Commerce_Runtime_WarrantyRelationCombiningCashAndCarryAndCustomerOrderNotAllowed = 353,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_PaymentViolatesReturnPolicy member.
         */
        Microsoft_Dynamics_Commerce_Runtime_PaymentViolatesReturnPolicy = 354,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CardTypeNotValid member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CardTypeNotValid = 355,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_TaxRegistrationFormatNotValid member.
         */
        Microsoft_Dynamics_Commerce_Runtime_TaxRegistrationFormatNotValid = 356,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_TaxRegistrationInvalidCategorySetup member.
         */
        Microsoft_Dynamics_Commerce_Runtime_TaxRegistrationInvalidCategorySetup = 357,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_TaxRegistrationIsPrimaryAddressRestricted member.
         */
        Microsoft_Dynamics_Commerce_Runtime_TaxRegistrationIsPrimaryAddressRestricted = 358,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_TaxRegistrationNumberMustBeUnique member.
         */
        Microsoft_Dynamics_Commerce_Runtime_TaxRegistrationNumberMustBeUnique = 359,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ElectronicAddressTypeNotValid member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ElectronicAddressTypeNotValid = 360,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_RecipientAddressCountExceededMaximumAllowed member.
         */
        Microsoft_Dynamics_Commerce_Runtime_RecipientAddressCountExceededMaximumAllowed = 361,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_SearchingWarehouseLocationsInMultipleWarehousesNotSupported member.
         */
        Microsoft_Dynamics_Commerce_Runtime_SearchingWarehouseLocationsInMultipleWarehousesNotSupported = 362,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_SearchingWarehouseLocationsWithoutWarehouseNotSupported member.
         */
        Microsoft_Dynamics_Commerce_Runtime_SearchingWarehouseLocationsWithoutWarehouseNotSupported = 363,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InventoryNoAvailableReceiveQtyTransferOrder member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InventoryNoAvailableReceiveQtyTransferOrder = 364,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentSerialNumberNotMatch member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentSerialNumberNotMatch = 365,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentSerialNumberLinesFulfilled member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentSerialNumberLinesFulfilled = 366,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentSerialNumberDuplicated member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentSerialNumberDuplicated = 367,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentSerialNumberRequired member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentSerialNumberRequired = 368,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentNotBlankSerialNumberRequired member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentNotBlankSerialNumberRequired = 369,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentSerialNumberLineNonIntegerQuantityEntered member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentSerialNumberLineNonIntegerQuantityEntered = 370,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentNotAllowToUpdatePostedSerialNumbers member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentNotAllowToUpdatePostedSerialNumbers = 371,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_MultiplePrimaryCustomerContactsNotAllowed member.
         */
        Microsoft_Dynamics_Commerce_Runtime_MultiplePrimaryCustomerContactsNotAllowed = 372,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentNotSupportedHeadquarterVersion member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentNotSupportedHeadquarterVersion = 373,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentTransferOrderUnderDeliveryNotAllowed member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentTransferOrderUnderDeliveryNotAllowed = 374,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentTransferOrderLineNotAllowToClose member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentTransferOrderLineNotAllowToClose = 375,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentTransferOrderUnderDeliveryBelowTolerance member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentTransferOrderUnderDeliveryBelowTolerance = 376,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentValidationResultCategoryMustBeSpecified member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentValidationResultCategoryMustBeSpecified = 377,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentValidationResultCategoryCanOnlyBeSpecifiedOnce member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentValidationResultCategoryCanOnlyBeSpecifiedOnce = 378,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentDoesNotExist member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentDoesNotExist = 379,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentPurchaseOrderChangeRequestRequired member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentPurchaseOrderChangeRequestRequired = 380,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentPurchaseOrderChangeRequestRequirementUnknown member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentPurchaseOrderChangeRequestRequirementUnknown = 381,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentLineMissing member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InventoryDocumentLineMissing = 382,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InventorySerialNumberNotAvailable member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InventorySerialNumberNotAvailable = 383,
    }
    /**
     * FeatureNotSupportedErrors enum type.
     */
    enum FeatureNotSupportedErrors {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_RequestTypeNotSupported member.
         */
        Microsoft_Dynamics_Commerce_Runtime_RequestTypeNotSupported = 1,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_RequestParametersNotSupported member.
         */
        Microsoft_Dynamics_Commerce_Runtime_RequestParametersNotSupported = 2,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_RequestParameterValueNotSupported member.
         */
        Microsoft_Dynamics_Commerce_Runtime_RequestParameterValueNotSupported = 3,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ChangeTenderTypeNotSupported member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ChangeTenderTypeNotSupported = 4,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_DemoModeOperationNotSupported member.
         */
        Microsoft_Dynamics_Commerce_Runtime_DemoModeOperationNotSupported = 5,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_RealtimeServiceNotSupported member.
         */
        Microsoft_Dynamics_Commerce_Runtime_RealtimeServiceNotSupported = 6,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ReceiptTypeNotSupported member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ReceiptTypeNotSupported = 7,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_OnlineChannelRequired member.
         */
        Microsoft_Dynamics_Commerce_Runtime_OnlineChannelRequired = 8,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CouponsNotSupportedOnSalesQuotations member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CouponsNotSupportedOnSalesQuotations = 9,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_FeatureNotSupportedInHeadquarters member.
         */
        Microsoft_Dynamics_Commerce_Runtime_FeatureNotSupportedInHeadquarters = 10,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_UpdatingCouponsNotSupportedOnPickup member.
         */
        Microsoft_Dynamics_Commerce_Runtime_UpdatingCouponsNotSupportedOnPickup = 11,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_UpdateAsyncCustomerNotSupported member.
         */
        Microsoft_Dynamics_Commerce_Runtime_UpdateAsyncCustomerNotSupported = 12,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_GiftCardPaymentNotSupported member.
         */
        Microsoft_Dynamics_Commerce_Runtime_GiftCardPaymentNotSupported = 13,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_GiftCardOperationNotSupported member.
         */
        Microsoft_Dynamics_Commerce_Runtime_GiftCardOperationNotSupported = 14,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CurrentVersionSupportsOnlyOneInvoicePayment member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CurrentVersionSupportsOnlyOneInvoicePayment = 15,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_MultipleCategoryIdsNotSupported member.
         */
        Microsoft_Dynamics_Commerce_Runtime_MultipleCategoryIdsNotSupported = 16,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CrossStoreProductSearchNotSupportedInOnlineChannel member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CrossStoreProductSearchNotSupportedInOnlineChannel = 17,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CrossStoreGetActivePriceNotSupportedInOnlineChannel member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CrossStoreGetActivePriceNotSupportedInOnlineChannel = 18,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_UpdateClientBookNotSupported member.
         */
        Microsoft_Dynamics_Commerce_Runtime_UpdateClientBookNotSupported = 19,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_RequestCustomerTimelineItemsNotSupported member.
         */
        Microsoft_Dynamics_Commerce_Runtime_RequestCustomerTimelineItemsNotSupported = 20,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_RequestCustomerTimelineItemTypesNotSupported member.
         */
        Microsoft_Dynamics_Commerce_Runtime_RequestCustomerTimelineItemTypesNotSupported = 21,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CreateCustomerTimelineItemNotSupported member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CreateCustomerTimelineItemNotSupported = 22,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_UpdateCustomerTimelineItemNotSupported member.
         */
        Microsoft_Dynamics_Commerce_Runtime_UpdateCustomerTimelineItemNotSupported = 23,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_SearchByIdsNotSupported member.
         */
        Microsoft_Dynamics_Commerce_Runtime_SearchByIdsNotSupported = 24,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_DocumentOperationNotSupportedInHeadquarters member.
         */
        Microsoft_Dynamics_Commerce_Runtime_DocumentOperationNotSupportedInHeadquarters = 25,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_TaskManagementNotSupported member.
         */
        Microsoft_Dynamics_Commerce_Runtime_TaskManagementNotSupported = 26,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InventoryInboundOutboundDocumentsWithoutASourceDocumentNotSupported member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InventoryInboundOutboundDocumentsWithoutASourceDocumentNotSupported = 27,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_WarrantyForCustomerOrderNotSupported member.
         */
        Microsoft_Dynamics_Commerce_Runtime_WarrantyForCustomerOrderNotSupported = 28,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_OptimizedProductAvailabilityJobNotSupported member.
         */
        Microsoft_Dynamics_Commerce_Runtime_OptimizedProductAvailabilityJobNotSupported = 29,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InventoryInboundOutboundDocumentsValidationNotSupported member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InventoryInboundOutboundDocumentsValidationNotSupported = 30,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InventoryAddingItemToPurchaseOrderNotSupported member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InventoryAddingItemToPurchaseOrderNotSupported = 31,
    }
    /**
     * SecurityErrors enum type.
     */
    enum SecurityErrors {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_AuthenticationFailed member.
         */
        Microsoft_Dynamics_Commerce_Runtime_AuthenticationFailed = 1,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_AuthorizationFailed member.
         */
        Microsoft_Dynamics_Commerce_Runtime_AuthorizationFailed = 2,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_AuthenticationMethodDisabled member.
         */
        Microsoft_Dynamics_Commerce_Runtime_AuthenticationMethodDisabled = 3,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CommerceIdentityNotFound member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CommerceIdentityNotFound = 4,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_UserNotActivated member.
         */
        Microsoft_Dynamics_Commerce_Runtime_UserNotActivated = 5,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_PrincipalMissing member.
         */
        Microsoft_Dynamics_Commerce_Runtime_PrincipalMissing = 6,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_PasswordRequired member.
         */
        Microsoft_Dynamics_Commerce_Runtime_PasswordRequired = 7,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ChangePasswordFailed member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ChangePasswordFailed = 8,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidPassword member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidPassword = 9,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_IdentityProviderNotFound member.
         */
        Microsoft_Dynamics_Commerce_Runtime_IdentityProviderNotFound = 10,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidAuthenticationCredentials member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidAuthenticationCredentials = 11,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_UpdatePasswordFailed member.
         */
        Microsoft_Dynamics_Commerce_Runtime_UpdatePasswordFailed = 12,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ResetPasswordFailed member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ResetPasswordFailed = 13,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_NonDrawerOperationsOnly member.
         */
        Microsoft_Dynamics_Commerce_Runtime_NonDrawerOperationsOnly = 14,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_UseExistingShiftPermissionDenied member.
         */
        Microsoft_Dynamics_Commerce_Runtime_UseExistingShiftPermissionDenied = 15,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CreateTransferOrderNotAllowed member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CreateTransferOrderNotAllowed = 16,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_UserCannotMassActivation member.
         */
        Microsoft_Dynamics_Commerce_Runtime_UserCannotMassActivation = 17,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_OpenMultipleShiftsNotAllowed member.
         */
        Microsoft_Dynamics_Commerce_Runtime_OpenMultipleShiftsNotAllowed = 18,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_UserSessionNotOpened member.
         */
        Microsoft_Dynamics_Commerce_Runtime_UserSessionNotOpened = 19,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_HeadquarterTransactionServiceMethodCallFailure member.
         */
        Microsoft_Dynamics_Commerce_Runtime_HeadquarterTransactionServiceMethodCallFailure = 20,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_HeadquarterCommunicationFailure member.
         */
        Microsoft_Dynamics_Commerce_Runtime_HeadquarterCommunicationFailure = 21,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_DeviceTokenExpired member.
         */
        Microsoft_Dynamics_Commerce_Runtime_DeviceTokenExpired = 22,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_DeviceTokenNotPresent member.
         */
        Microsoft_Dynamics_Commerce_Runtime_DeviceTokenNotPresent = 23,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidChannel member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidChannel = 24,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ElevatedUserSameAsLoggedOnUser member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ElevatedUserSameAsLoggedOnUser = 25,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_GrantTypeNotSupported member.
         */
        Microsoft_Dynamics_Commerce_Runtime_GrantTypeNotSupported = 26,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_DeviceDeactivationFailed member.
         */
        Microsoft_Dynamics_Commerce_Runtime_DeviceDeactivationFailed = 27,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_HardwareStationTokenCreationFailed member.
         */
        Microsoft_Dynamics_Commerce_Runtime_HardwareStationTokenCreationFailed = 28,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidHardwareStationToken member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidHardwareStationToken = 29,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_UserLogonAnotherTerminal member.
         */
        Microsoft_Dynamics_Commerce_Runtime_UserLogonAnotherTerminal = 30,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_UnlockRegisterFailed member.
         */
        Microsoft_Dynamics_Commerce_Runtime_UnlockRegisterFailed = 31,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ChannelDatabaseConnectionFailed member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ChannelDatabaseConnectionFailed = 32,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidUserToken member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidUserToken = 33,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CustomerAccountAuthorizationFailure member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CustomerAccountAuthorizationFailure = 34,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_LocalLogonFailed member.
         */
        Microsoft_Dynamics_Commerce_Runtime_LocalLogonFailed = 35,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_LocalDeviceAuthenticationFailed member.
         */
        Microsoft_Dynamics_Commerce_Runtime_LocalDeviceAuthenticationFailed = 36,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_DeviceTokenValidationFailed member.
         */
        Microsoft_Dynamics_Commerce_Runtime_DeviceTokenValidationFailed = 37,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_NoDeviceManagementPermission member.
         */
        Microsoft_Dynamics_Commerce_Runtime_NoDeviceManagementPermission = 38,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_IncorrectLogonTypeUserAccountOrPassword member.
         */
        Microsoft_Dynamics_Commerce_Runtime_IncorrectLogonTypeUserAccountOrPassword = 39,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidAudience member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidAudience = 40,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidIssuer member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidIssuer = 41,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_TenantIdNotFound member.
         */
        Microsoft_Dynamics_Commerce_Runtime_TenantIdNotFound = 42,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_AADTokenIssuedForDifferentEnvironment member.
         */
        Microsoft_Dynamics_Commerce_Runtime_AADTokenIssuedForDifferentEnvironment = 43,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidAADTenantId member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidAADTenantId = 44,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_UserBlockedDueToTooManyFailedLogonAttempts member.
         */
        Microsoft_Dynamics_Commerce_Runtime_UserBlockedDueToTooManyFailedLogonAttempts = 45,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_UserPasswordExpired member.
         */
        Microsoft_Dynamics_Commerce_Runtime_UserPasswordExpired = 46,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CheckOutNotOverHTTPS member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CheckOutNotOverHTTPS = 47,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_AttemptToActivateFromDifferentPhysicalDevice member.
         */
        Microsoft_Dynamics_Commerce_Runtime_AttemptToActivateFromDifferentPhysicalDevice = 48,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InternalServerError member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InternalServerError = 49,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_DeviceActivationNotAllowedWithUserTokenIssuer member.
         */
        Microsoft_Dynamics_Commerce_Runtime_DeviceActivationNotAllowedWithUserTokenIssuer = 50,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_PasswordComplexityRequirementsNotMet member.
         */
        Microsoft_Dynamics_Commerce_Runtime_PasswordComplexityRequirementsNotMet = 51,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_PasswordHistoryRequirementsNotMet member.
         */
        Microsoft_Dynamics_Commerce_Runtime_PasswordHistoryRequirementsNotMet = 52,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ReturnItemPriceExceeded member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ReturnItemPriceExceeded = 53,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ReturnTransactionTotalExceeded member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ReturnTransactionTotalExceeded = 54,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CredentialsNotConfigured member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CredentialsNotConfigured = 55,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_PolicyBypassNotAllowed member.
         */
        Microsoft_Dynamics_Commerce_Runtime_PolicyBypassNotAllowed = 56,
    }
    /**
     * StorageErrors enum type.
     */
    enum StorageErrors {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CriticalStorageError member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CriticalStorageError = 1,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_UnexpectedNumberOfRowsError member.
         */
        Microsoft_Dynamics_Commerce_Runtime_UnexpectedNumberOfRowsError = 2,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ObjectVersionMismatchError member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ObjectVersionMismatchError = 3,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_StorageRequestTimeout member.
         */
        Microsoft_Dynamics_Commerce_Runtime_StorageRequestTimeout = 4,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_UpdateOfReadOnlyRowError member.
         */
        Microsoft_Dynamics_Commerce_Runtime_UpdateOfReadOnlyRowError = 5,
    }
    /**
     * VersionNotSupportedErrors enum type.
     */
    enum VersionNotSupportedErrors {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_RetailServerApiVersionNotSupported member.
         */
        Microsoft_Dynamics_Commerce_Runtime_RetailServerApiVersionNotSupported = 1,
    }
    /**
     * PaymentErrors enum type.
     */
    enum PaymentErrors {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_UnableToCapturePayment member.
         */
        Microsoft_Dynamics_Commerce_Runtime_UnableToCapturePayment = 1,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_UnableToAuthorizePayment member.
         */
        Microsoft_Dynamics_Commerce_Runtime_UnableToAuthorizePayment = 2,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_UnableToRefundPayment member.
         */
        Microsoft_Dynamics_Commerce_Runtime_UnableToRefundPayment = 3,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_UnableToCancelPayment member.
         */
        Microsoft_Dynamics_Commerce_Runtime_UnableToCancelPayment = 4,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_UnableToGetCardPaymentAcceptPoint member.
         */
        Microsoft_Dynamics_Commerce_Runtime_UnableToGetCardPaymentAcceptPoint = 5,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_UnableToRetrieveCardPaymentAcceptResult member.
         */
        Microsoft_Dynamics_Commerce_Runtime_UnableToRetrieveCardPaymentAcceptResult = 6,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidCashBackAmount member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidCashBackAmount = 7,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_ManualCardNumberNotAllowed member.
         */
        Microsoft_Dynamics_Commerce_Runtime_ManualCardNumberNotAllowed = 8,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_TenderLineCannotBeVoided member.
         */
        Microsoft_Dynamics_Commerce_Runtime_TenderLineCannotBeVoided = 9,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidPaymentRequest member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidPaymentRequest = 10,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_PaymentAlreadyVoided member.
         */
        Microsoft_Dynamics_Commerce_Runtime_PaymentAlreadyVoided = 11,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_InvalidLoyaltyCardNumber member.
         */
        Microsoft_Dynamics_Commerce_Runtime_InvalidLoyaltyCardNumber = 12,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_GiftCardCurrencyMismatch member.
         */
        Microsoft_Dynamics_Commerce_Runtime_GiftCardCurrencyMismatch = 13,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_GiftCardBalanceInquiryFailed member.
         */
        Microsoft_Dynamics_Commerce_Runtime_GiftCardBalanceInquiryFailed = 14,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_NoResponseFromGatewayForGiftCardBalanceInquiry member.
         */
        Microsoft_Dynamics_Commerce_Runtime_NoResponseFromGatewayForGiftCardBalanceInquiry = 15,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_PaymentAmountExceedsGiftBalance member.
         */
        Microsoft_Dynamics_Commerce_Runtime_PaymentAmountExceedsGiftBalance = 16,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_BlockedLoyaltyCard member.
         */
        Microsoft_Dynamics_Commerce_Runtime_BlockedLoyaltyCard = 17,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_NoTenderLoyaltyCard member.
         */
        Microsoft_Dynamics_Commerce_Runtime_NoTenderLoyaltyCard = 18,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_NotEnoughRewardPoints member.
         */
        Microsoft_Dynamics_Commerce_Runtime_NotEnoughRewardPoints = 19,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_RefundAmountMoreThanAllowed member.
         */
        Microsoft_Dynamics_Commerce_Runtime_RefundAmountMoreThanAllowed = 20,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_NoMoreThanOneLoyaltyTender member.
         */
        Microsoft_Dynamics_Commerce_Runtime_NoMoreThanOneLoyaltyTender = 21,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_PaymentUsingUnauthorizedAccount member.
         */
        Microsoft_Dynamics_Commerce_Runtime_PaymentUsingUnauthorizedAccount = 22,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CustomerAccountPaymentIsNotAllowedForCustomerOrderDepositAndCancellation member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CustomerAccountPaymentIsNotAllowedForCustomerOrderDepositAndCancellation = 23,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_PaymentRequiresMerchantProperties member.
         */
        Microsoft_Dynamics_Commerce_Runtime_PaymentRequiresMerchantProperties = 24,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CustomerAccountPaymentExceedsTotalAmountForCarryOutItems member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CustomerAccountPaymentExceedsTotalAmountForCarryOutItems = 25,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CustomerAccountPaymentExceedsTotalAmountForCarryOutAndReturnItems member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CustomerAccountPaymentExceedsTotalAmountForCarryOutAndReturnItems = 26,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CustomerAccountLimitSignDifferentFromAmountDue member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CustomerAccountLimitSignDifferentFromAmountDue = 27,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CustomerAccountLimitSignDifferentFromTotalCustomerAccountPayment member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CustomerAccountLimitSignDifferentFromTotalCustomerAccountPayment = 28,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CustomerAccountPaymentExceedsCustomerAccountFloorLimit member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CustomerAccountPaymentExceedsCustomerAccountFloorLimit = 29,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_UnableToAuthorizePaymentCardTypeMissingOrNotSupported member.
         */
        Microsoft_Dynamics_Commerce_Runtime_UnableToAuthorizePaymentCardTypeMissingOrNotSupported = 30,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_FraudRisk member.
         */
        Microsoft_Dynamics_Commerce_Runtime_FraudRisk = 31,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_TokenizedPaymentCardNotExpected member.
         */
        Microsoft_Dynamics_Commerce_Runtime_TokenizedPaymentCardNotExpected = 32,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_MultipleCustomerAccountPaymentsNotAllowed member.
         */
        Microsoft_Dynamics_Commerce_Runtime_MultipleCustomerAccountPaymentsNotAllowed = 33,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CustomerAccountPaymentForCustomerWithoutAllowOnAccount member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CustomerAccountPaymentForCustomerWithoutAllowOnAccount = 34,
    }
    /**
     * CommerceDataExchangeErrors enum type.
     */
    enum CommerceDataExchangeErrors {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Microsoft_Dynamics_Commerce_Runtime_CdxDataPackageApplicationFailure member.
         */
        Microsoft_Dynamics_Commerce_Runtime_CdxDataPackageApplicationFailure = 1,
    }
    /**
     * WrongEndpointErrors enum type.
     */
    enum WrongEndpointErrors {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Microsoft_Dynamics_Commerce_WrongEndpoint member.
         */
        Microsoft_Dynamics_Commerce_WrongEndpoint = 1,
    }
    /**
     * RetailServerApiErrors enum type.
     */
    enum RetailServerApiErrors {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Microsoft_Dynamics_Internal_Server_Error member.
         */
        Microsoft_Dynamics_Internal_Server_Error = 1,
        /**
         * The Microsoft_Dynamics_RetailServer_BadRequest member.
         */
        Microsoft_Dynamics_RetailServer_BadRequest = 2,
        /**
         * The Microsoft_Dynamics_RetailServer_RequestTooLarge member.
         */
        Microsoft_Dynamics_RetailServer_RequestTooLarge = 3,
    }
    /**
     * ExceptionSeverity enum type.
     */
    enum ExceptionSeverity {
        /**
         * The None member.
         */
        None = 0,
        /**
         * The Error member.
         */
        Error = 1,
        /**
         * The Warning member.
         */
        Warning = 2,
        /**
         * The Critical member.
         */
        Critical = 3,
        /**
         * The Informational member.
         */
        Informational = 4,
    }
    /**
     * Category entity interface.
     */
    interface Category {
        RecordId: number;
        OfflineImage?: string;
        Name?: string;
        ParentCategory?: number;
        DisplayOrder?: number;
        Images?: Entities.MediaLocation[];
        NameTranslations?: Entities.TextValueTranslation[];
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * Cart entity interface.
     */
    interface Cart {
        AffiliationLines?: Entities.AffiliationLoyaltyTier[];
        IsRequiredAmountPaid?: boolean;
        IsDiscountFullyCalculated?: boolean;
        IgnoreDiscountCalculation?: boolean;
        AmountDue?: number;
        AmountPaid?: number;
        AttributeValues?: Entities.AttributeValueBase[];
        BeginDateTime?: Date;
        BusinessDate?: Date;
        CancellationChargeAmount?: number;
        EstimatedShippingAmount?: number;
        CartLines?: Entities.CartLine[];
        CartTypeValue?: number;
        ChannelId?: number;
        ChargeAmount?: number;
        CustomerOrderRemainingBalance?: number;
        ChargeLines?: Entities.ChargeLine[];
        TaxViewLines?: Entities.TaxViewLine[];
        Comment?: string;
        InvoiceComment?: string;
        Coupons?: Entities.Coupon[];
        CustomerId?: string;
        CustomerOrderModeValue?: number;
        DeliveryMode?: string;
        DeliveryModeChargeAmount?: number;
        DiscountAmount?: number;
        DiscountAmountWithoutTax?: number;
        DiscountCodes?: string[];
        Id: string;
        SuspendedCartId?: string;
        TransactionTypeValue?: number;
        CustomerAccountDepositLines?: Entities.CustomerAccountDepositLine[];
        IncomeExpenseLines?: Entities.IncomeExpenseLine[];
        IncomeExpenseTotalAmount?: number;
        IsReturnByReceipt?: boolean;
        ReturnTransactionHasLoyaltyPayment?: boolean;
        IsFavorite?: boolean;
        IsRecurring?: boolean;
        IsSuspended?: boolean;
        LoyaltyCardId?: string;
        ModifiedDateTime?: Date;
        Name?: string;
        OrderNumber?: string;
        AvailableDepositAmount?: number;
        OverriddenDepositAmount?: number;
        OverriddenDepositWithoutCarryoutAmount?: number;
        PrepaymentAmountPaid?: number;
        PrepaymentAppliedOnPickup?: number;
        PromotionLines?: string[];
        QuotationExpiryDate?: Date;
        ReasonCodeLines?: Entities.ReasonCodeLine[];
        ReceiptEmail?: string;
        RequestedDeliveryDate?: Date;
        RequiredDepositAmount?: number;
        RequiredDepositWithoutCarryoutAmount?: number;
        SalesId?: string;
        ShippingAddress?: Entities.Address;
        StaffId?: string;
        SubtotalAmount?: number;
        SubtotalAmountWithoutTax?: number;
        NetPrice?: number;
        SubtotalSalesAmount?: number;
        TaxAmount?: number;
        TaxOnCancellationCharge?: number;
        TaxOverrideCode?: string;
        TenderLines?: Entities.TenderLine[];
        RefundableTenderLines?: Entities.TenderLine[];
        TerminalId?: string;
        TotalAmount?: number;
        TotalSalesAmount?: number;
        TotalReturnAmount?: number;
        TotalCarryoutSalesAmount?: number;
        TotalCustomerOrderSalesAmount?: number;
        TotalManualDiscountAmount?: number;
        TotalManualDiscountPercentage?: number;
        WarehouseId?: string;
        IsCreatedOffline?: boolean;
        CartStatusValue?: number;
        ReceiptTransactionTypeValue?: number;
        CommissionSalesGroup?: string;
        Version?: number;
        TotalItems?: number;
        HasTaxCalculationTriggered?: boolean;
        MerchantProperties?: Entities.PaymentMerchantInformation[];
        HasChargeCalculationTriggered?: boolean;
        FiscalTransactions?: Entities.FiscalTransaction[];
        ShippingChargeAmount?: number;
        OtherChargeAmount?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * Customer entity interface.
     */
    interface Customer {
        AccountNumber: string;
        RecordId?: number;
        CreatedDateTime?: Date;
        ChargeGroup?: string;
        PriceGroup?: string;
        IsCustomerTaxInclusive?: boolean;
        Phone?: string;
        PhoneRecordId?: number;
        PhoneExt?: string;
        Cellphone?: string;
        Email?: string;
        EmailRecordId?: number;
        Url?: string;
        UrlRecordId?: number;
        Name?: string;
        PersonNameId?: number;
        FirstName?: string;
        MiddleName?: string;
        LastName?: string;
        DirectoryPartyRecordId?: number;
        PartyNumber?: string;
        CustomerTypeValue?: number;
        Language?: string;
        CustomerGroup?: string;
        CurrencyCode?: string;
        CNPJCPFNumber?: string;
        IdentificationNumber?: string;
        InvoiceAccount?: string;
        MandatoryCreditLimit?: boolean;
        CreditRating?: string;
        CreditLimit?: number;
        Balance?: number;
        Blocked?: boolean;
        BlockedType?: number;
        UseOrderNumberReference?: boolean;
        OrganizationId?: string;
        UsePurchaseRequest?: boolean;
        MultilineDiscountGroup?: string;
        TotalDiscountGroup?: string;
        LineDiscountGroup?: string;
        TaxGroup?: string;
        SalesTaxGroup?: string;
        CommissionSalesGroupId?: string;
        TaxExemptNumber?: string;
        VatNumber?: string;
        TaxOffice?: string;
        NonChargeableAccount?: boolean;
        Tag?: string;
        ReceiptSettings?: number;
        ReceiptEmail?: string;
        OptOutPersonalization?: boolean;
        OptOutWebActivityTracking?: boolean;
        RetailCustomerTableRecordId?: number;
        OfflineImage?: string;
        IsAsyncCustomer?: boolean;
        NewCustomerPartyNumber?: string;
        CustomerAffiliations?: Entities.CustomerAffiliation[];
        Addresses?: Entities.Address[];
        Attributes?: Entities.CustomerAttribute[];
        Images?: Entities.MediaLocation[];
        TitleRecordId?: number;
        IsFloorLimitBlocked?: boolean;
        IsB2b?: boolean;
        IsB2bAdmin?: boolean;
        Contacts?: Entities.ContactInfo[];
        AllowOnAccountPayment?: boolean;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * Employee entity interface.
     */
    interface Employee {
        StaffId: string;
        NameOnReceipt?: string;
        Name?: string;
        CultureName?: string;
        NumberOfDaysToPasswordExpiry?: number;
        Permissions?: Entities.EmployeePermissions;
        Images?: Entities.MediaLocation[];
        DefaultImage?: string;
        DefaultCommissionSalesGroup?: string;
        RecordId?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * Checklist entity interface.
     */
    interface Checklist {
        RecordId: number;
        Tasks?: Entities.ChecklistTask[];
        Version?: string;
        ProcessId?: string;
        Name?: string;
        Description?: string;
        AssignedToChannelId?: number;
        AssignedToWorkerPersonnelNumber?: string;
        StatusValue?: number;
        StartDateTime?: Date;
        EndDateTime?: Date;
        TargetDateTime?: Date;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * SalesOrder entity interface.
     */
    interface SalesOrder {
        DocumentStatusValue?: number;
        RecordId?: number;
        StatusValue?: number;
        McrOrderStopped?: boolean;
        Shipments?: Entities.Shipment[];
        DetailedOrderStatusValue?: number;
        AffiliationLoyaltyTierLines?: Entities.SalesAffiliationLoyaltyTier[];
        IsRequiredAmountPaid?: boolean;
        IsDiscountFullyCalculated?: boolean;
        IgnoreDiscountCalculation?: boolean;
        AmountDue?: number;
        EstimatedShippingAmount?: number;
        AmountPaid?: number;
        CustomerOrderRemainingBalance?: number;
        AttributeValues?: Entities.AttributeValueBase[];
        AvailableDepositAmount?: number;
        BeginDateTime?: Date;
        CreatedDateTime?: Date;
        BusinessDate?: Date;
        CalculatedDepositAmount?: number;
        CancellationCharge?: number;
        ChannelId?: number;
        ChannelReferenceId?: string;
        ChargeAmount?: number;
        ChargeLines?: Entities.ChargeLine[];
        Comment?: string;
        Coupons?: Entities.Coupon[];
        InvoiceComment?: string;
        ContactInformationCollection?: Entities.ContactInformation[];
        CurrencyCode?: string;
        CustomerAccountDepositLines?: Entities.CustomerAccountDepositLine[];
        CustomerId?: string;
        CustomerOrderModeValue?: number;
        CustomerOrderTypeValue?: number;
        DeliveryMode?: string;
        DeliveryModeChargeAmount?: number;
        DiscountAmount?: number;
        DiscountAmountWithoutTax?: number;
        NetPrice?: number;
        DiscountCodes?: string[];
        EntryStatusValue?: number;
        GrossAmount?: number;
        HasLoyaltyPayment?: boolean;
        Id: string;
        SuspendedTransactionId?: string;
        IncomeExpenseLines?: Entities.IncomeExpenseLine[];
        IncomeExpenseTotalAmount?: number;
        InventoryLocationId?: string;
        IsCreatedOffline?: boolean;
        IsReturnByReceipt?: boolean;
        IsSuspended?: boolean;
        IsTaxIncludedInPrice?: boolean;
        IsTaxExemptedForPriceInclusive?: boolean;
        LineDiscount?: number;
        LineDiscountCalculationTypeValue?: number;
        LoyaltyCardId?: string;
        LoyaltyDiscountAmount?: number;
        LoyaltyManualDiscountAmount?: number;
        LoyaltyRewardPointLines?: Entities.LoyaltyRewardPointLine[];
        ModifiedDateTime?: Date;
        Name?: string;
        NetAmount?: number;
        NetAmountWithoutTax?: number;
        NetAmountWithNoTax?: number;
        NetAmountWithTax?: number;
        NumberOfItems?: number;
        OverriddenDepositAmount?: number;
        OverriddenDepositWithoutCarryoutAmount?: number;
        PeriodicDiscountAmount?: number;
        TenderDiscountAmount?: number;
        PrepaymentAmountAppliedOnPickup?: number;
        PrepaymentAmountInvoiced?: number;
        PrepaymentAmountPaid?: number;
        QuotationExpiryDate?: Date;
        ReasonCodeLines?: Entities.ReasonCodeLine[];
        ReceiptEmail?: string;
        ReceiptId?: string;
        RequestedDeliveryDate?: Date;
        RequiredDepositAmount?: number;
        RequiredDepositWithoutCarryoutAmount?: number;
        ReturnTransactionHasLoyaltyPayment?: boolean;
        SalesId?: string;
        SalesPaymentDifference?: number;
        SalesLines?: Entities.SalesLine[];
        ShiftId?: number;
        ShiftTerminalId?: string;
        ShippingAddress?: Entities.Address;
        StaffId?: string;
        StatementCode?: string;
        StoreId?: string;
        SubtotalAmount?: number;
        SubtotalAmountWithoutTax?: number;
        SubtotalSalesAmount?: number;
        TaxAmount?: number;
        TaxAmountExclusive?: number;
        TaxAmountInclusive?: number;
        TaxLines?: Entities.TaxLine[];
        TaxOnCancellationCharge?: number;
        TaxOverrideCode?: string;
        TenderLines?: Entities.TenderLine[];
        RefundableTenderLines?: Entities.TenderLine[];
        TerminalId?: string;
        TotalAmount?: number;
        TotalSalesAmount?: number;
        TotalReturnAmount?: number;
        TotalCarryoutSalesAmount?: number;
        TotalCustomerOrderSalesAmount?: number;
        TotalDiscount?: number;
        TotalManualDiscountAmount?: number;
        TotalManualDiscountPercentage?: number;
        TransactionTypeValue?: number;
        TaxCalculationTypeValue?: number;
        SalesInvoiceAmount?: number;
        GiftCardActiveFrom?: Date;
        GiftCardBalance?: number;
        GiftCardExpireDate?: Date;
        GiftCardHistoryDetails?: string;
        GiftCardIssueAmount?: number;
        GiftCardIdMasked?: string;
        CommissionSalesGroup?: string;
        IsCommissionSalesGroupOverriddenByCustomer?: boolean;
        CommissionSalesGroupSetByCashier?: string;
        HasTaxCalculationTriggered?: boolean;
        HasChargeCalculationTriggered?: boolean;
        ShippingChargeAmount?: number;
        OtherChargeAmount?: number;
        FiscalTransactions?: Entities.FiscalTransaction[];
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * Shift entity interface.
     */
    interface Shift {
        ShiftId: number;
        TerminalId: string;
        StartingAmountTotal: number;
        FloatingEntryAmountTotal: number;
        AddToTenderAmountTotal: number;
        SafeDropTotal: number;
        BankDropTotal: number;
        RemoveTenderAmountTotal: number;
        DeclareTenderAmountTotal: number;
        OverShortTotal: number;
        TenderedTotal: number;
        ChangeTotal: number;
        IncomeAccountTotal: number;
        ExpenseAccountTotal: number;
        CashDrawer?: string;
        StoreRecordId?: number;
        StoreId?: string;
        StaffId?: string;
        CurrentStaffId?: string;
        StatusValue?: number;
        StartDateTime?: Date;
        CloseDateTime?: Date;
        ClosedAtTerminalId?: string;
        CurrentTerminalId?: string;
        SalesTotal?: number;
        StatusDateTime?: Date;
        ReturnsTotal?: number;
        PaidToAccountTotal?: number;
        TaxTotal?: number;
        ChargeTotal?: number;
        DiscountTotal?: number;
        RoundedAmountTotal?: number;
        CustomerCount?: number;
        SaleTransactionCount?: number;
        NoSaleTransactionCount?: number;
        VoidTransactionCount?: number;
        LogOnTransactionCount?: number;
        SuspendedTransactionCount?: number;
        TransactionCount?: number;
        ReceiptsCount?: number;
        ReturnsCount?: number;
        GoodsSoldQty?: number;
        ServicesSoldQty?: number;
        ReceiptCopiesCount?: number;
        ReceiptCopiesTotal?: number;
        PriceOverrideTotal?: number;
        SuspendedTotal?: number;
        SalesTotalIncludingTax?: number;
        SalesTotalExcludingTax?: number;
        SalesGrandTotal?: number;
        ReturnsGrandTotal?: number;
        TaxLines?: Entities.ShiftTaxLine[];
        TenderLines?: Entities.ShiftTenderLine[];
        AccountLines?: Entities.ShiftAccountLine[];
        IsShared?: boolean;
        StartingAmountRunningTotal?: number;
        GiftCardsTotal?: number;
        GiftCardCashOutTotal?: number;
        VoidedSalesTotal?: number;
        ShiftSalesTotal?: number;
        ShiftReturnsTotal?: number;
        HasPendingOfflineTransactions?: number;
        NumberOfUnreconciledLines?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * StockCountJournal entity interface.
     */
    interface StockCountJournal {
        JournalId: string;
        RecordId?: string;
        Description?: string;
        InventLocationId?: string;
        DataAreaId?: string;
        StockCountTransactionLines?: Entities.StockCountJournalTransaction[];
        Worker?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * OrgUnit entity interface.
     */
    interface OrgUnit {
        OrgUnitNumber: string;
        RecordId: number;
        InventoryLocationId?: string;
        OMOperatingUnitNumber?: string;
        TaxGroup?: string;
        FunctionalityProfileId?: string;
        UseCustomerBasedTax?: boolean;
        UseCustomerBasedTaxExemption?: boolean;
        UseDestinationBasedTax?: boolean;
        Currency?: string;
        OrgUnitAddress?: Entities.Address;
        OrgUnitFullAddress?: string;
        OrgUnitName?: string;
        Latitude?: number;
        Longitude?: number;
        EmailReceiptProfileId?: string;
        ShippingWarehouseAddress?: Entities.Address;
        TaxRegistrations?: Entities.TaxRegistration[];
        EventNotificationProfileId?: string;
        Name?: string;
        DefaultCustomerAccount?: string;
        CategoryHierarchyId?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * Product entity interface.
     */
    interface Product {
        RecordId: number;
        ProductName?: string;
        ProductNumber?: string;
        Description?: string;
        IsMasterProduct: boolean;
        IsKit: boolean;
        ItemId?: string;
        HasLinkedProducts: boolean;
        Rules: Entities.ProductRules;
        DefaultUnitOfMeasure?: string;
        Name?: string;
        Locale?: string;
        OfflineImage?: string;
        IsRemote?: boolean;
        ChangeTrackingInformation?: Entities.ProductChangeTrackingInformation;
        Image?: Entities.RichMediaLocations;
        UnitsOfMeasureSymbol?: string[];
        LinkedProducts?: Entities.LinkedProduct[];
        BasePrice?: number;
        Price?: number;
        AdjustedPrice?: number;
        RetailContext?: Entities.ProjectionDomain;
        PrimaryCategoryId?: number;
        CategoryIds?: number[];
        DisplayOrderInCategories?: Entities.DisplayOrderInCategory[];
        RelatedProducts?: Entities.RelatedProduct[];
        ProductsRelatedToThis?: Entities.RelatedProduct[];
        ProductSchema?: string[];
        ProductProperties?: Entities.ProductPropertyTranslation[];
        CompositionInformation?: Entities.ProductCompositionInformation;
        ParentKits?: Entities.KitComponent[];
        SearchName?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ProductCatalog entity interface.
     */
    interface ProductCatalog {
        RecordId: number;
        Name?: string;
        Description?: string;
        Language?: string;
        IsSnapshotEnabled: boolean;
        ValidFrom: Date;
        ValidTo: Date;
        CreatedOn: Date;
        ModifiedOn: Date;
        PublishedOn: Date;
        Images?: Entities.MediaLocation[];
        ChannelId?: number;
        DefaultImage?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * CommerceList entity interface.
     */
    interface CommerceList {
        Id: number;
        Name?: string;
        CustomerId?: string;
        CustomerName?: string;
        IsFavorite?: boolean;
        IsRecurring?: boolean;
        IsPrivate?: boolean;
        IsCollaborative?: boolean;
        CreatedDateTime?: Date;
        DueDateTime?: Date;
        CommerceListTypeValue?: number;
        CommerceListLines?: Entities.CommerceListLine[];
        CommerceListContributors?: Entities.CommerceListContributor[];
        CommerceListInvitations?: Entities.CommerceListInvitation[];
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ProductList entity interface.
     */
    interface ProductList {
        Id: string;
        Name?: string;
        CustomerId?: string;
        CreatedDateTime?: Date;
        LastUpdated?: Date;
        DeletedDateTime?: Date;
        ProductListTypeValue?: number;
        DataAreaId?: string;
        ProductListLines?: Entities.ProductListLine[];
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * Recommendation entity interface.
     */
    interface Recommendation {
        Id: string;
        RecommendationTypeValue?: number;
        Title?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * TransferOrder entity interface.
     */
    interface TransferOrder {
        OrderId: string;
        RecordId?: string;
        Status?: string;
        Lines?: number;
        TotalItems?: number;
        OrderTypeValue?: number;
        InventLocationIdFrom?: string;
        InventLocationIdTo?: string;
        QuantityShipped?: number;
        QuantityReceived?: number;
        QuantityShipNow?: number;
        QuantityReceiveNow?: number;
        QuantityShipRemaining?: number;
        QuantityReceiveRemaining?: number;
        ShipDate?: Date;
        ReceiveDate?: Date;
        DeliveryModeId?: string;
        OrderLines?: Entities.TransferOrderLine[];
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * PurchaseOrder entity interface.
     */
    interface PurchaseOrder {
        OrderId: string;
        RecordId?: string;
        Status?: string;
        Lines?: number;
        TotalItems?: number;
        OrderTypeValue?: number;
        TotalReceived?: number;
        OrderLines?: Entities.PurchaseOrderLine[];
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * PickingList entity interface.
     */
    interface PickingList {
        OrderId: string;
        RecordId?: string;
        Status?: string;
        Lines?: number;
        TotalItems?: number;
        OrderTypeValue?: number;
        InventLocationId?: string;
        DeliveryDate?: Date;
        DeliveryMode?: string;
        TotalReceived?: number;
        OrderLines?: Entities.PickingListLine[];
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * Warehouse entity interface.
     */
    interface Warehouse {
        InventLocation: string;
        Name?: string;
        IsWMSEnabled: boolean;
        DefaultInventoryStatus?: string;
        DefaultReceiptLocation?: string;
        DefaultLocationId?: string;
        DefaultIssueLocation?: string;
        Address?: Entities.Address;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ScanResult entity interface.
     */
    interface ScanResult {
        ScannedText: string;
        MaskTypeValue?: number;
        Barcode?: Entities.Barcode;
        Product?: Entities.SimpleProduct;
        LoyaltyCard?: Entities.LoyaltyCard;
        GiftCard?: Entities.GiftCard;
        ExtensionProperties?: Entities.CommerceProperty[];
        Customer?: Entities.Customer;
    }
    /**
     * SalesOrderContextualOperationsMap entity interface.
     */
    interface SalesOrderContextualOperationsMap {
        Id: string;
        ApplicableOperationsValues?: number[];
        ExtensionProperties?: Entities.CommerceProperty[];
        SalesOrder?: Entities.SalesOrder;
    }
    /**
     * InventoryInboundOutboundDocument entity interface.
     */
    interface InventoryInboundOutboundDocument {
        WorkDocumentId: string;
        TerminalId?: string;
        CommitRequestId?: string;
        ReceiveDate?: Date;
        ShipDate?: Date;
        Sender?: string;
        Receiver?: string;
        SenderDetails?: string;
        ReceiverDetails?: string;
        DeliveryMode?: string;
        OperationTypeValue?: number;
        StatusValue?: number;
        ReceiptId?: string;
        Note?: string;
        OperationResultMessage?: string;
        DocumentId?: string;
        LongVersion?: number;
        SourceDocument?: Entities.InventoryInboundOutboundSourceDocument;
        SourceDocumentTypeValue?: number;
        CreatedDateTime?: Date;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * BusinessPartner entity interface.
     */
    interface BusinessPartner {
        BusinessPartnerId: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * BusinessPartnerUser entity interface.
     */
    interface BusinessPartnerUser {
        Email: string;
        BusinessPartnerId?: string;
        FirstName?: string;
        LastName?: string;
        SpendingLimit?: number;
        LastOperationId?: string;
        StatusValue?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * SuspendedCart entity interface.
     */
    interface SuspendedCart {
        Id: string;
        ReceiptId?: string;
        ShiftId?: number;
        ShiftTerminalId?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
        Cart?: Entities.Cart;
    }
    /**
     * ExtensibleEnumeration entity interface.
     */
    interface ExtensibleEnumeration {
        Name: string;
        Value: number;
    }
    /**
     * ExtensibleEnumeration_1OfT entity interface.
     */
    interface ExtensibleEnumeration_1OfT extends ExtensibleEnumeration {
    }
    /**
     * ExtensibleTransactionType entity interface.
     */
    interface ExtensibleTransactionType extends ExtensibleEnumeration {
    }
    /**
     * ExtensibleSalesTransactionType entity interface.
     */
    interface ExtensibleSalesTransactionType extends ExtensibleEnumeration {
    }
    /**
     * FulfillmentLineStatus entity interface.
     */
    interface FulfillmentLineStatus extends ExtensibleEnumeration {
    }
    /**
     * FulfillmentLineDeliveryType entity interface.
     */
    interface FulfillmentLineDeliveryType extends ExtensibleEnumeration {
    }
    /**
     * ExtensibleAddressType entity interface.
     */
    interface ExtensibleAddressType extends ExtensibleEnumeration {
    }
    /**
     * ExtensibleLoyaltyRewardPointActivityEntryType entity interface.
     */
    interface ExtensibleLoyaltyRewardPointActivityEntryType extends ExtensibleEnumeration {
    }
    /**
     * ExtensibleAttributeDataType entity interface.
     */
    interface ExtensibleAttributeDataType extends ExtensibleEnumeration {
    }
    /**
     * ReleasedProductServiceType entity interface.
     */
    interface ReleasedProductServiceType extends ExtensibleEnumeration {
    }
    /**
     * Address entity interface.
     */
    interface Address {
        Name?: string;
        FullAddress?: string;
        RecordId?: number;
        Street?: string;
        StreetNumber?: string;
        County?: string;
        CountyName?: string;
        City?: string;
        DistrictName?: string;
        State?: string;
        StateName?: string;
        ZipCode?: string;
        ThreeLetterISORegionName?: string;
        Phone?: string;
        PhoneRecordId?: number;
        PhoneExt?: string;
        Email?: string;
        EmailContent?: string;
        EmailRecordId?: number;
        Url?: string;
        UrlRecordId?: number;
        TwoLetterISORegionName?: string;
        Deactivate?: boolean;
        AttentionTo?: string;
        BuildingCompliment?: string;
        Postbox?: string;
        TaxGroup?: string;
        AddressTypeValue?: number;
        IsPrimary?: boolean;
        IsPrivate?: boolean;
        PartyNumber?: string;
        IsAsyncAddress?: boolean;
        DirectoryPartyTableRecordId?: number;
        DirectoryPartyLocationRecordId?: number;
        DirectoryPartyLocationRoleRecordId?: number;
        LogisticsLocationId?: string;
        LogisticsLocationRecordId?: number;
        LogisticsLocationExtRecordId?: number;
        LogisticsLocationRoleRecordId?: number;
        PhoneLogisticsLocationRecordId?: number;
        PhoneLogisticsLocationId?: string;
        EmailLogisticsLocationRecordId?: number;
        EmailLogisticsLocationId?: string;
        UrlLogisticsLocationRecordId?: number;
        UrlLogisticsLocationId?: string;
        ExpireRecordId?: number;
        SortOrder?: number;
        RoleCount?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * CustomerAffiliation entity interface.
     */
    interface CustomerAffiliation {
        RecordId?: number;
        RetailAffiliationId?: number;
        Name?: string;
        Description?: string;
        HideInChannels?: boolean;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * CustomerBalances entity interface.
     */
    interface CustomerBalances {
        Balance: number;
        PendingBalance: number;
        CreditLimit: number;
        InvoiceAccountBalance: number;
        InvoiceAccountPendingBalance: number;
        InvoiceAccountCreditLimit: number;
    }
    /**
     * GlobalCustomer entity interface.
     */
    interface GlobalCustomer {
        PartyNumber?: string;
        RecordId?: number;
        IsAsyncCustomer?: boolean;
        AccountNumber?: string;
        FullName?: string;
        FullAddress?: string;
        Phone?: string;
        Email?: string;
        CustomerTypeValue?: number;
        Images?: Entities.MediaLocation[];
        OfflineImage?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * AttributeValue entity interface.
     */
    interface AttributeValue {
        Name?: string;
        KeyName?: string;
        UnitOfMeasureSymbol?: string;
        DataTypeValue?: number;
        BooleanValue?: boolean;
        DateTimeOffsetValue?: Date;
        FloatValue?: number;
        IntegerValue?: number;
        TextValue?: string;
        CurrencyValue?: number;
        CurrencyCode?: string;
        AttributeValueId?: number;
        RecordId?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * AttributeValueBase entity interface.
     */
    interface AttributeValueBase {
        Name?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * Barcode entity interface.
     */
    interface Barcode {
        BarcodeId?: string;
        BarcodePrice?: number;
        Quantity?: number;
        CustomerId?: string;
        EmployeeId?: string;
        SalespersonId?: string;
        EANLicenseId?: string;
        DataEntry?: string;
        DiscountCode?: string;
        GiftCardNumber?: string;
        LoyaltyCardNumber?: string;
        ItemBarcode?: Entities.ItemBarcode;
        EntryMethodTypeValue?: number;
        ItemType?: number;
        EnterDimensions?: boolean;
        ItemGroupId?: string;
        ItemDepartmentId?: string;
        ScaleItem?: boolean;
        ZeroPriceValid?: boolean;
        NegativeQuantity?: boolean;
        DiscountNotAllowed?: boolean;
        DateToBeBlocked?: Date;
        DateToBeActivated?: Date;
        CheckDigitValidated?: boolean;
        CouponId?: string;
        Message?: string;
        LineDiscountGroup?: string;
        MultilineDiscountGroup?: string;
        IncludedInTotalDiscount?: boolean;
        CostPrice?: number;
        BatchId?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ItemBarcode entity interface.
     */
    interface ItemBarcode {
        RecordId?: number;
        ItemId?: string;
        Description?: string;
        BarcodeSetupId?: string;
        ItemBarcodeValue?: string;
        InventoryDimensionId?: string;
        IsBlocked?: boolean;
        Display?: boolean;
        VariantId?: string;
        UnitId?: string;
        UseForInput?: boolean;
        UseForPrinting?: boolean;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ButtonGrid entity interface.
     */
    interface ButtonGrid {
        Id?: string;
        Name?: string;
        DefaultColor?: number;
        SpaceBetweenButtonsInPixels?: number;
        Buttons?: Entities.ButtonGridButton[];
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * GetButtonGridsByIdsCriteria entity interface.
     */
    interface GetButtonGridsByIdsCriteria {
        ButtonGridIds?: string[];
    }
    /**
     * CartLine entity interface.
     */
    interface CartLine {
        LineId?: string;
        TaxOverrideCode?: string;
        ItemId?: string;
        Barcode?: string;
        EntryMethodTypeValue?: number;
        Description?: string;
        InventoryDimensionId?: string;
        Comment?: string;
        ProductId?: number;
        WarehouseId?: string;
        Quantity?: number;
        Price?: number;
        ExtendedPrice?: number;
        TaxAmount?: number;
        ItemTaxGroupId?: string;
        TotalAmount?: number;
        NetAmountWithoutTax?: number;
        NetPrice?: number;
        DiscountAmountWithoutTax?: number;
        DiscountAmount?: number;
        LineDiscount?: number;
        LinePercentageDiscount?: number;
        LineManualDiscountPercentage?: number;
        LineManualDiscountAmount?: number;
        UnitOfMeasureSymbol?: string;
        ShippingAddress?: Entities.Address;
        DeliveryMode?: string;
        DeliveryModeChargeAmount?: number;
        RequestedDeliveryDate?: Date;
        IsWarrantyLine?: boolean;
        WarrantableTransactionId?: string;
        WarrantableSalesId?: string;
        WarrantableLineNumber?: number;
        WarrantableSerialNumber?: string;
        WarrantiedId?: string;
        ReturnTransactionId?: string;
        ReturnLineNumber?: number;
        ReturnInventTransId?: string;
        IsVoided?: boolean;
        IsTaxOverideCodeTaxExempt?: boolean;
        IsGiftCardLine?: boolean;
        IsPriceKeyedIn?: boolean;
        GiftCardId?: string;
        GiftCardCurrencyCode?: string;
        GiftCardOperationValue?: number;
        GiftCardTypeValue?: number;
        SalesStatusValue?: number;
        QuantityOrdered?: number;
        QuantityInvoiced?: number;
        QuantityCanceled?: number;
        FulfillmentStoreId?: string;
        SerialNumber?: string;
        ElectronicDeliveryEmail?: string;
        ElectronicDeliveryEmailContent?: string;
        IsPriceOverridden?: boolean;
        OriginalPrice?: number;
        IsInvoiceLine?: boolean;
        InvoiceId?: string;
        InvoiceAmount?: number;
        GiftCardBalance?: number;
        LineVersion?: number;
        PromotionLines?: string[];
        DiscountLines?: Entities.DiscountLine[];
        RelatedDiscountedLineIds?: string[];
        ReasonCodeLines?: Entities.ReasonCodeLine[];
        ChargeLines?: Entities.ChargeLine[];
        TaxRatePercent?: number;
        IsCustomerAccountDeposit?: boolean;
        LinkedParentLineId?: string;
        QuantityReturnable?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
        LineNumber?: number;
        CommissionSalesGroup?: string;
        TrackingId?: string;
        StaffId?: string;
        QuantityRemained?: number;
        QuantityShipped?: number;
        CatalogId?: number;
        AttributeValues?: Entities.AttributeValueBase[];
        ThirdPartyGiftCardInfo?: Entities.ThirdPartyGiftCardInfo;
        BarcodeEmbeddedPrice?: number;
        PriceInBarcode?: boolean;
        InvoiceTypeValue?: number;
        InvoicedSalesId?: string;
    }
    /**
     * ThirdPartyGiftCardInfo entity interface.
     */
    interface ThirdPartyGiftCardInfo {
        Amount?: number;
        Authorization?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * CardTypeInfo entity interface.
     */
    interface CardTypeInfo {
        RecordId?: number;
        TypeId?: string;
        Name?: string;
        PaymentMethodId?: string;
        CardTypeValue?: number;
        Issuer?: string;
        NumberFrom?: string;
        NumberTo?: string;
        CashBackLimit?: number;
        AllowManualInput?: boolean;
        CheckModulus?: boolean;
        HasTenderDiscount?: boolean;
        IsPinRequired?: boolean;
        IsExpirationDateRequired?: boolean;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * CashDeclaration entity interface.
     */
    interface CashDeclaration {
        RecordId?: number;
        Currency?: string;
        Amount?: number;
        CashTypeValue?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * IncomeExpenseAccount entity interface.
     */
    interface IncomeExpenseAccount {
        Amount?: number;
        AccountNumber?: string;
        AccountName?: string;
        AccountNameAlias?: string;
        AccountTypeValue?: number;
        Quantity?: number;
        Message1Line?: string;
        Message2Line?: string;
        SlipText1Line?: string;
        SlipText2Line?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * IncomeExpenseLine entity interface.
     */
    interface IncomeExpenseLine {
        Amount?: number;
        IncomeExpenseAccount?: string;
        StoreNumber?: string;
        AccountTypeValue?: number;
        Terminal?: string;
        Shift?: string;
        TransactionStatusValue?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * CartTenderLine entity interface.
     */
    interface CartTenderLine {
        PaymentCard?: Entities.PaymentCard;
        TokenizedPaymentCard?: Entities.TokenizedPaymentCard;
        IsLinkedRefund?: boolean;
        LinkedPaymentStore?: string;
        LinkedPaymentTerminalId?: string;
        LinkedPaymentTransactionId?: string;
        LinkedPaymentLineNumber?: number;
        LinkedPaymentCurrency?: string;
        TenderLineId?: string;
        Amount?: number;
        CashBackAmount?: number;
        AmountInTenderedCurrency?: number;
        AmountInCompanyCurrency?: number;
        Currency?: string;
        ExchangeRate?: number;
        CompanyCurrencyExchangeRate?: number;
        TenderTypeId?: string;
        SignatureData?: string;
        ReasonCodeLines?: Entities.ReasonCodeLine[];
        LineNumber?: number;
        GiftCardId?: string;
        GiftCardPin?: string;
        GiftCardExpirationYear?: number;
        GiftCardExpirationMonth?: number;
        CreditMemoId?: string;
        CustomerId?: string;
        LoyaltyCardId?: string;
        CardTypeId?: string;
        IsChangeLine?: boolean;
        IsHistorical?: boolean;
        IsVoidable?: boolean;
        StatusValue?: number;
        VoidStatusValue?: number;
        AuthorizedAmount?: number;
        PaymentRefRecId?: number;
        CardPaymentAccountId?: string;
        ProcessingTypeValue?: number;
        CardProcessorStatusValue?: number;
        LinkedPaymentRefRecId?: number;
        IsPolicyBypassed?: boolean;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ChargeLine entity interface.
     */
    interface ChargeLine {
        ChargeLineId?: string;
        ChargeCode?: string;
        CurrencyCode?: string;
        ModuleTypeValue?: number;
        IsHeaderChargeProrated?: boolean;
        ChargeTypeValue?: number;
        ChargeMethodValue?: number;
        CalculatedAmount?: number;
        Value?: number;
        Description?: string;
        TransactionId?: string;
        MarkupAutoLineRecordId?: number;
        MarkupAutoTableRecId?: number;
        SaleLineNumber?: number;
        FromAmount?: number;
        ToAmount?: number;
        Keep?: number;
        AmountRefunded?: number;
        ChargeLineOverrides?: Entities.ChargeLineOverride[];
        ReasonCodeLines?: Entities.ReasonCodeLine[];
        IsRefundable?: boolean;
        IsShipping?: boolean;
        IsOverridden?: boolean;
        ItemId?: string;
        Quantity?: number;
        Price?: number;
        ItemTaxGroupId?: string;
        SalesTaxGroupId?: string;
        OriginalSalesTaxGroupId?: string;
        OriginalItemTaxGroupId?: string;
        TaxAmount?: number;
        SalesOrderUnitOfMeasure?: string;
        NetAmount?: number;
        NetAmountPerUnit?: number;
        GrossAmount?: number;
        TaxLines?: Entities.TaxLine[];
        TaxMeasures?: Entities.TaxMeasure[];
        TaxAmountExemptInclusive?: number;
        TaxAmountInclusive?: number;
        TaxAmountExclusive?: number;
        NetAmountWithAllInclusiveTax?: number;
        BeginDateTime?: Date;
        EndDateTime?: Date;
        TaxRatePercent?: number;
        IsReturnByReceipt?: boolean;
        ReturnLineTaxAmount?: number;
        ReturnTaxLines?: Entities.TaxLine[];
        TaxExemptPriceInclusiveReductionAmount?: number;
        TaxExemptPriceInclusiveOriginalPrice?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * CityInfo entity interface.
     */
    interface CityInfo {
        Name?: string;
        Description?: string;
        CountryRegionId?: string;
        StateId?: string;
        CountyId?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * CommissionSalesGroup entity interface.
     */
    interface CommissionSalesGroup {
        GroupId?: string;
        Name?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ContactInformation entity interface.
     */
    interface ContactInformation {
        Value?: string;
        ContactInformationTypeValue?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * AttributeCategory entity interface.
     */
    interface AttributeCategory {
        Value?: Entities.CommercePropertyValue;
        RecordId?: number;
        Name?: string;
        KeyName?: string;
        DataTypeValue?: number;
        Attribute?: number;
        NameTranslations?: Entities.TextValueTranslation[];
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * AttributeProduct entity interface.
     */
    interface AttributeProduct {
        MetadataFlags?: Entities.ProductAttributeMetadataFlags;
        IsDimension?: boolean;
        RecordId?: number;
        Name?: string;
        KeyName?: string;
        DataTypeValue?: number;
        Attribute?: number;
        NameTranslations?: Entities.TextValueTranslation[];
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ProductComparisonEntry entity interface.
     */
    interface ProductComparisonEntry {
        ProductId: number;
        AttributeValue?: Entities.AttributeValue;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ProductComparisonLine entity interface.
     */
    interface ProductComparisonLine {
        AttributeRecordId: number;
        AttributeName?: string;
        ProductAttributeComparisonEntries?: Entities.ProductComparisonEntry[];
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * CustomerSearchField entity interface.
     */
    interface CustomerSearchField {
        IsShortcut?: boolean;
        DisplayName?: string;
        CanBeRefined?: boolean;
        SearchField?: Entities.CustomerSearchFieldType;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * CustomerSearchByFieldCriteria entity interface.
     */
    interface CustomerSearchByFieldCriteria {
        Criteria?: Entities.CustomerSearchByFieldCriterion[];
        DataLevelValue?: number;
    }
    /**
     * CustomerSearchByFieldCriterion entity interface.
     */
    interface CustomerSearchByFieldCriterion {
        SearchTerm?: string;
        SearchField?: Entities.CustomerSearchFieldType;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * CustomerSearchFieldType entity interface.
     */
    interface CustomerSearchFieldType extends ExtensibleEnumeration {
    }
    /**
     * OrderShipments entity interface.
     */
    interface OrderShipments {
        SalesId?: string;
        ChannelId?: number;
        ChannelReferenceId?: string;
        TransactionId?: string;
        CreatedDateTime?: Date;
        StatusValue?: number;
        CurrencyCode?: string;
        CustomerId?: string;
        DeliveryMode?: string;
        GrossAmount?: number;
        InventoryLocationId?: string;
        ReceiptId?: string;
        RequestedDeliveryDate?: Date;
        TotalAmount?: number;
        TaxAmount?: number;
        SalesLines?: Entities.SalesLine[];
        Shipments?: Entities.Shipment[];
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * Shipment entity interface.
     */
    interface Shipment {
        SalesId?: string;
        ShipmentId?: string;
        DeliveryAddress?: Entities.Address;
        ShipDate?: Date;
        DeliveryMode?: string;
        TermsOfDelivery?: string;
        WeightUnit?: string;
        TrackingNumber?: string;
        TrackingUrl?: string;
        LatestCarrierTrackingInfo?: Entities.TrackingInfo;
        CarrierId?: string;
        CarrierName?: string;
        ShippingWeight?: number;
        ShipmentLines?: Entities.ShipmentLine[];
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ShipmentLine entity interface.
     */
    interface ShipmentLine {
        ShipmentLineId?: string;
        ItemId?: string;
        Description?: string;
        InventDimId?: string;
        OrderedQuantity?: number;
        DeliveredQuantity?: number;
        RemainingQuantity?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * Transaction entity interface.
     */
    interface Transaction {
        Id?: string;
        StoreId?: string;
        TerminalId?: string;
        IsCreatedOffline?: boolean;
        StaffId?: string;
        ShiftId?: string;
        ShiftTerminalId?: string;
        Description?: string;
        ReceiptId?: string;
        GrossAmount?: number;
        TotalAmount?: number;
        CreatedDateTime?: Date;
        TransactionTypeValue?: number;
        TransactionStatusValue?: number;
        BeginDateTime?: Date;
        GiftCardActiveFrom?: Date;
        GiftCardBalance?: number;
        GiftCardExpireDate?: Date;
        GiftCardHistoryDetails?: string;
        GiftCardIssueAmount?: number;
        GiftCardIdMasked?: string;
        FromSafe?: string;
        ToSafe?: string;
        FromShiftTerminalId?: string;
        ToShiftTerminalId?: string;
        FromShiftId?: string;
        TransactionSourceContextTypeValue?: number;
        TransactionDestinationContextTypeValue?: number;
        ToShiftId?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ShiftReconciliationLine entity interface.
     */
    interface ShiftReconciliationLine extends Transaction {
        GroupId?: number;
        GroupDescription?: string;
        ShiftGroupLinesCount?: number;
        ShiftGroupLinesClosedCount?: number;
    }
    /**
     * ShiftReconciliationLineRetrievalCriteria entity interface.
     */
    interface ShiftReconciliationLineRetrievalCriteria {
        TransactionTypeValues?: number[];
        ShiftReconciliationLineStatusValue?: number;
        Shifts?: Entities.ShiftKey[];
        DestinationShift?: Entities.ShiftKey;
        SourceShift?: Entities.ShiftKey;
        SourceSafe?: string;
        DestinationSafe?: string;
        TransactionSourceContextTypeValue?: number;
        TransactionDestinationContextTypeValue?: number;
    }
    /**
     * SearchConfiguration entity interface.
     */
    interface SearchConfiguration {
        ProductSortColumns?: Entities.SortColumn[];
        ProductSearchServiceTypeValue?: number;
    }
    /**
     * CustomerTimelineItem entity interface.
     */
    interface CustomerTimelineItem {
        CustomerId?: string;
        Description?: string;
        Id?: string;
        EntityType?: string;
        TypeId?: string;
        StaffId?: string;
        StartDateTime?: Date;
        Title?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * AttributeDefinition entity interface.
     */
    interface AttributeDefinition {
        RecordId: number;
        Name?: string;
        AttributeTypeName?: string;
        ExtDataType?: Entities.ExtensibleAttributeDataType;
        DataTypeValue?: number;
        IsHidden?: boolean;
        IsMandatory?: boolean;
        IsMultiValue?: boolean;
        IsEnumeration?: boolean;
        TranslationDetails?: Entities.AttributeTranslationDetails[];
        EnumerationDetails?: Entities.AttributeEnumeration[];
        DefaultValue?: Entities.CommercePropertyValue;
        UpperBound?: Entities.CommercePropertyValue;
        LowerBound?: Entities.CommercePropertyValue;
        DisplayOrder?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * AttributeTranslationDetails entity interface.
     */
    interface AttributeTranslationDetails {
        AttributeRecordId: number;
        LanguageId?: string;
        FriendlyName?: string;
        Description?: string;
        HelpText?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * AttributeEnumeration entity interface.
     */
    interface AttributeEnumeration {
        OrdinalNumber?: number;
        EnumerationValue?: string;
        AttributeEnumerationTranslations?: Entities.AttributeEnumerationTranslation[];
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * AttributeEnumerationTranslation entity interface.
     */
    interface AttributeEnumerationTranslation {
        LanguageId?: string;
        EnumerationTranslationValue?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * AttributeDefinitionCriteria entity interface.
     */
    interface AttributeDefinitionCriteria {
        AttributeGroupIdentifier?: number;
        Languages?: string[];
    }
    /**
     * AttributeGroupDefinition entity interface.
     */
    interface AttributeGroupDefinition {
        RecordId: number;
        Name?: string;
        TranslationDetails?: Entities.AttributeGroupTranslationDetails[];
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * AttributeGroupTranslationDetails entity interface.
     */
    interface AttributeGroupTranslationDetails {
        AttributeGroupRecordId: number;
        LanguageId?: string;
        FriendlyName?: string;
        Description?: string;
        HelpText?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * AttributeGroupDefinitionCriteria entity interface.
     */
    interface AttributeGroupDefinitionCriteria {
        AttributeGroupIdentifiers?: number[];
        Languages?: string[];
    }
    /**
     * CountyInfo entity interface.
     */
    interface CountyInfo {
        Name?: string;
        CountyId?: string;
        CountryRegionId?: string;
        StateId?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * CustomerGroup entity interface.
     */
    interface CustomerGroup {
        CustomerGroupNumber?: string;
        CustomerGroupName?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * DiscountLine entity interface.
     */
    interface DiscountLine {
        SaleLineNumber?: number;
        OfferId?: string;
        OfferName?: string;
        Amount?: number;
        DiscountCost?: number;
        EffectiveAmount?: number;
        SavedEffectiveAmount?: number;
        Percentage?: number;
        DealPrice?: number;
        DiscountLineTypeValue?: number;
        ManualDiscountTypeValue?: number;
        CustomerDiscountTypeValue?: number;
        PeriodicDiscountTypeValue?: number;
        DiscountApplicationGroup?: string;
        ConcurrencyModeValue?: number;
        IsCompoundable?: boolean;
        DiscountCode?: string;
        PricingPriorityNumber?: number;
        IsDiscountCodeRequired?: boolean;
        ThresholdAmountRequired?: number;
        BundleId?: number;
        ValidFrom?: Date;
        ValidTo?: Date;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * EmployeePermissions entity interface.
     */
    interface EmployeePermissions {
        PriceOverrideRestrictionValue?: number;
        AllowPriceOverride?: number;
        MaximumDiscountPercentage?: number;
        MaximumLineDiscountAmount?: number;
        MaximumLineReturnAmount?: number;
        MaximumTotalDiscountAmount?: number;
        MaximumTotalDiscountPercentage?: number;
        MaxTotalReturnAmount?: number;
        StaffId?: string;
        Roles?: string[];
        AllowUseSharedShift?: boolean;
        AllowManageSharedShift?: boolean;
        AllowTaskGuides?: boolean;
        AllowSaleOutsideAssortment?: boolean;
        AllowPrintingReceiptCopy?: string;
        AllowSkipFiscalRegistration?: boolean;
        AllowSkipRegistrationOrMarkAsRegistered?: boolean;
        AllowCreateTransferOrder?: boolean;
        AllowAcceptOrder?: boolean;
        AllowTaskManagement?: boolean;
        AllowRejectOrder?: boolean;
        AllowMassActivation?: boolean;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * CommerceProperty entity interface.
     */
    interface CommerceProperty {
        Key?: string;
        Value?: Entities.CommercePropertyValue;
    }
    /**
     * CommercePropertyValue entity interface.
     */
    interface CommercePropertyValue {
        BooleanValue?: boolean;
        ByteValue?: number;
        DateTimeOffsetValue?: Date;
        DecimalValue?: number;
        IntegerValue?: number;
        LongValue?: number;
        StringValue?: string;
    }
    /**
     * CountryRegionInfo entity interface.
     */
    interface CountryRegionInfo {
        CountryRegionId?: string;
        ShortName?: string;
        LongName?: string;
        ISOCode?: string;
        TimeZone?: number;
        LanguageId?: string;
        AddressFormatLines?: Entities.AddressFormattingInfo[];
        AddressFormatId?: string;
        AddressFormatName?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * CreditMemo entity interface.
     */
    interface CreditMemo {
        Id?: string;
        Balance?: number;
        CurrencyCode?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * Currency entity interface.
     */
    interface Currency {
        CurrencyCode?: string;
        CurrencySymbol?: string;
        RoundOffPrice?: number;
        RoundOffSales?: number;
        RoundOffTypePrice?: number;
        RoundOffTypeSales?: number;
        NumberOfDecimals?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * CurrencyAmount entity interface.
     */
    interface CurrencyAmount {
        CurrencyCode?: string;
        CurrencySymbol?: string;
        ConvertedAmount?: number;
        RoundedConvertedAmount?: number;
        ExchangeRate?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * EnvironmentConfiguration entity interface.
     */
    interface EnvironmentConfiguration {
        EnvironmentId?: string;
        EnvironmentName?: string;
        TenantId?: string;
        ClientAppInsightsInstrumentationKey?: string;
        HardwareStationAppInsightsInstrumentationKey?: string;
        WindowsPhonePosAppInsightsInstrumentationKey?: string;
        BaseVersion?: string;
        ScaleUnit?: Entities.ScaleUnitConfiguration;
        AADAuthority?: string;
    }
    /**
     * DeviceConfiguration entity interface.
     */
    interface DeviceConfiguration {
        UseInMemoryDeviceDataStorage?: boolean;
        AllowItemsAggregation?: boolean;
        AggregateItemsForPrinting?: boolean;
        AggregatePayments?: boolean;
        AlwaysExpandTransactionScreenLineDetails?: boolean;
        AuditEnabled?: boolean;
        DiscountAtTotal?: string;
        ProductDiscount?: string;
        ManuallyCalculateComplexDiscounts?: boolean;
        DisplaySecondaryTotalCurrency?: boolean;
        EndOfTransaction?: string;
        ItemNotOnFile?: string;
        LimitStaffListToStore?: boolean;
        LineItemTaxChange?: string;
        MarkUp?: string;
        MaximumPrice?: number;
        MaximumQuantity?: number;
        MinimumPasswordLength?: number;
        MustKeyInPriceIfZero?: boolean;
        NfcEContingencyModeEnabled?: string;
        NfcEVoided?: string;
        FunctionalityProfileDescription?: string;
        OverridePrice?: string;
        PrintVoidTransactionReceipts?: boolean;
        PrintReceiptsOnCardDecline?: boolean;
        PrintXZReportsOnTerminal?: boolean;
        PrintTenderDetailsOnXReport?: boolean;
        ProfileId?: string;
        RefundSale?: string;
        ReturnProduct?: string;
        SalesPerson?: string;
        SecondaryTotalCurrency?: string;
        SelectHardwareStationOnTendering?: boolean;
        SerialNumber?: string;
        ShowStaffListAtLogOn?: boolean;
        StaffBarcodeLogOn?: boolean;
        StaffBarcodeLogOnRequiresPassword?: boolean;
        StaffCardLogOn?: boolean;
        StaffCardLogOnRequiresPassword?: boolean;
        StartOfTransaction?: string;
        EnableTimeRegistration?: boolean;
        TenderDeclaration?: string;
        TransactionTaxChange?: string;
        VoidItem?: string;
        VoidPayment?: string;
        SalesModeDefaultsAsCustomerOrder?: boolean;
        CreateOfflineCustomerOrders?: boolean;
        CreateAsyncCustomers?: boolean;
        EnableAxCustomerSearch?: boolean;
        VoidTransaction?: string;
        CultureName?: string;
        SystemLegalTermsUrl?: string;
        SystemPrivacyStatementUrl?: string;
        HideTrainingMode?: boolean;
        StorePhone?: string;
        StatementMethod?: string;
        StoreNumber?: string;
        ChannelId?: number;
        StoreTaxGroup?: string;
        TaxIdNumber?: string;
        TaxOverrideGroup?: number;
        TenderDeclarationCalculation?: number;
        UseCustomerBasedTax?: boolean;
        UseDestinationBasedTax?: boolean;
        AutoLogOffTimeoutInMinutes?: number;
        AutoExitMethodValue?: number;
        CustomerDisplayText1?: string;
        CustomerDisplayText2?: string;
        EFTStoreId?: number;
        EFTTerminalId?: string;
        ExitAfterEachTransaction?: boolean;
        HardwareProfile?: string;
        Placement?: string;
        TerminalDescription?: string;
        OpenDrawer?: string;
        OpenDrawerAtLogOnLogOff?: boolean;
        PrintTaxRefundChecks?: boolean;
        StandAlone?: boolean;
        TerminalId?: string;
        TerminalStatement?: boolean;
        VisualProfile?: string;
        Currency?: string;
        InventLocationId?: string;
        IncludeKitComponents?: boolean;
        AccentColor?: number;
        HeaderColor?: number;
        Theme?: string;
        FontScheme?: number;
        ShowAppBarLabel?: boolean;
        LogOnBackgroundPictureAsBase64?: string;
        LogOnBackgroundPicturePortraitAsBase64?: string;
        BackgroundPictureAsBase64?: string;
        LogonBackgroundPictureId?: number;
        LogonBackgroundPictureIdCompact?: number;
        LogonBackgroundPictureIdPortrait?: number;
        LogonBackgroundPictureIdCompactPortrait?: number;
        BackgroundPictureId?: number;
        RequireAmountDeclaration?: boolean;
        DecimalNotRequiredForMinorCurrencyUnit?: boolean;
        MaxTransactionSearchResults?: number;
        OfflineProfileId?: number;
        NewOfflineDatabaseCheckInterval?: number;
        OfflineTransactionUploadInterval?: number;
        ReconnectToOnlineInterval?: number;
        SwitchToOfflineTimeout?: number;
        RetentionDays?: number;
        HardwareConfigurations?: Entities.HardwareConfigurations;
        CreateRecording?: boolean;
        PlaybackRecording?: boolean;
        ShouldUseDefaultCommisionSalesGroup?: boolean;
        AskForSalesRepresentative?: number;
        IsSalesRepRequired?: boolean;
        ProhibitMixingSalesAndReturns?: boolean;
        ApplyDiscountsToPriceKeyedIn?: boolean;
        ApplyDiscountsToPriceOverrides?: boolean;
        IsProductSuggestionsEnabled?: boolean;
        ProductSearchType?: string;
        TerminalRecId?: number;
        DeviceRecId?: number;
        DenominationsToDisplayValue?: number;
        PromptOnSeamlessOffline?: boolean;
        RetryCountToOffline?: number;
        EnableAdvancedOfflineSwitching?: boolean;
        SystemHealthCheckInterval?: number;
        RejectOrderFulfillment?: string;
        ManuallyCalculateTaxes?: boolean;
        EmployeeLogonTypeValue?: number;
        StartAmountCalculation?: number;
        BankDropCalculation?: number;
        GenerateLoyaltyCardNumber?: boolean;
        FiscalRegistrationProcessId?: string;
        IncludeSalesOrderInvoices?: boolean;
        IncludeFreeTextInvoices?: boolean;
        IncludeProjectInvoices?: boolean;
        IncludeCreditNoteInvoices?: boolean;
        DisplayTaxExemptInLineDetails?: boolean;
        TaxExemptReceiptIndicator?: string;
        ManuallyCalculateCharges?: boolean;
        ChargeOverrideReasonCode?: string;
        ShiftReconcilation?: string;
        CustomerAccountFloorLimit?: number;
        VoidSuspendedTransactionsOnCloseShift?: boolean;
        ShowDateTime?: boolean;
        UseAdvancedCashManagement?: boolean;
        DefaultCustomerSearchModeValue?: number;
        AllowManualOfflineBeforeSignIn?: boolean;
        UseFinancialReconciliationInStore?: boolean;
        RequirePaymentForFulfillmentValue?: number;
        CardNotPresentProcessingConfigurationValue?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * VisualProfile entity interface.
     */
    interface VisualProfile {
        ChannelId?: number;
        TerminalId?: string;
        AccentColor?: number;
        HeaderColor?: number;
        Theme?: string;
        FontSchemeTypeValue?: number;
        IsAppBarLabelVisible?: boolean;
        IsDateTimeVisible?: boolean;
        LogOnLayoutTypeValue?: number;
        LogOnKeyboardTypeValue?: number;
        LogonBackgroundPictureId?: number;
        CompactLogonBackgroundPictureId?: number;
        PortraitLogonBackgroundPictureId?: number;
        CompactPortraitLogonBackgroundPictureId?: number;
        BackgroundPictureId?: number;
        LogOnLogoPictureId?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * Device entity interface.
     */
    interface Device {
        ChannelId: number;
        RecordId?: number;
        DeviceNumber?: string;
        DeviceId?: string;
        Description?: string;
        DeviceType?: number;
        TerminalRecordId?: number;
        TerminalId?: string;
        ChannelName?: string;
        UseInMemoryDeviceDataStorage?: boolean;
        AllowMassActivation?: boolean;
        TokenIssueTime?: Date;
        ActivationStatusValue?: number;
        Token?: string;
        CountryRegionIsoCode?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * DiscountCode entity interface.
     */
    interface DiscountCode {
        RecordId: number;
        Barcode?: string;
        Code?: string;
        ConcurrencyMode?: number;
        Description?: string;
        Disclaimer?: string;
        IsDiscountCodeRequired?: boolean;
        Name?: string;
        OfferId?: string;
        IsEnabled?: boolean;
        ValidFrom?: Date;
        ValidTo?: Date;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * DistrictInfo entity interface.
     */
    interface DistrictInfo {
        Name?: string;
        Description?: string;
        CountryRegionId?: string;
        StateId?: string;
        CountyId?: string;
        CityName?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * HardwareProfile entity interface.
     */
    interface HardwareProfile {
        RecordId?: number;
        LineDisplayDelayForLinkedItems?: number;
        LineDisplayBalanceText?: string;
        LineDisplayBinaryConversion?: boolean;
        LineDisplayCharacterSet?: number;
        LineDisplayClosedLine1?: string;
        LineDisplayClosedLine2?: string;
        LineDisplayDeviceDescription?: string;
        LineDisplayDeviceTypeValue?: number;
        LineDisplayDeviceName?: string;
        LineDisplayDisplayLinkedItem?: boolean;
        LineDisplayDisplayTerminalClosed?: boolean;
        LineDisplayTotalText?: string;
        DualDisplayActive?: boolean;
        DualDisplayWebBrowserUrl?: string;
        DualDisplayImageRotatorInterval?: number;
        DualDisplayImageRotatorPath?: string;
        DualDisplayReceiptWidthPercentage?: number;
        DualDisplayDisplayType?: string;
        EftTypeId?: number;
        EftCompanyId?: string;
        EftConfiguration?: number;
        EftPaymentConnectorName?: string;
        EftData?: string;
        EftDescription?: string;
        EftMerchantId?: string;
        EftPassword?: string;
        EftServerName?: string;
        EftServerPort?: string;
        EftUserId?: string;
        EftTestMode?: boolean;
        MsrEndTrack1?: string;
        MsrEndTrack2?: string;
        FiscalPrinterManagementReportPAFIdentification?: string;
        FiscalPrinterManagementReportConfigParameter?: string;
        FiscalPrinterManagementReportTenderType?: string;
        FiscalPrinterManagementReportGiftCard?: string;
        FiscalRegisterDeviceTypeValue?: number;
        FiscalRegisterConfiguration?: string;
        FiscalRegisterDeviceDescription?: string;
        FiscalRegisterDeviceName?: string;
        KeyboardMappingId?: string;
        KeyLockDeviceTypeValue?: number;
        KeyLockDeviceDescription?: string;
        KeyLockDeviceName?: string;
        MsrDeviceTypeValue?: number;
        MsrDeviceDescription?: string;
        MsrDeviceName?: string;
        MsrMake?: string;
        MsrModel?: string;
        MsrSeparator?: string;
        MsrStartTrack?: string;
        PinPadDeviceTypeValue?: number;
        PinPadDeviceName?: string;
        PinPadMake?: string;
        PinPadModel?: string;
        PinPadDeviceDescription?: string;
        ProfileDescription?: string;
        ProfileId?: string;
        RFIDDeviceTypeValue?: number;
        RFIDDeviceName?: string;
        RFIDDeviceDescription?: string;
        ScaleDeviceTypeValue?: number;
        ScaleDeviceName?: string;
        ScaleDeviceDescription?: string;
        ScaleManualInputAllowed?: boolean;
        ScaleTimeoutInSeconds?: number;
        SignatureCaptureDeviceTypeValue?: number;
        SignatureCaptureDeviceName?: string;
        SignatureCaptureMake?: string;
        SignatureCaptureModel?: string;
        SignatureCaptureDeviceDescription?: string;
        SignatureCaptureFormName?: string;
        Printers?: Entities.HardwareProfilePrinter[];
        Scanners?: Entities.HardwareProfileScanner[];
        FiscalIntegrationTechnicalProfiles?: Entities.FiscalIntegrationTechnicalProfile[];
        CashDrawers?: Entities.HardwareProfileCashDrawer[];
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * SupportedLanguage entity interface.
     */
    interface SupportedLanguage {
        LanguageId?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * PaymentCard entity interface.
     */
    interface PaymentCard {
        UseShippingAddress?: boolean;
        CardNumber?: string;
        CCID?: string;
        Track1?: string;
        Track2?: string;
        Track3?: string;
        VoiceAuthorizationCode?: string;
        EncryptedPin?: string;
        AdditionalSecurityData?: string;
        IsSwipe?: boolean;
        Phone?: string;
        Country?: string;
        House?: string;
        Address1?: string;
        Address2?: string;
        City?: string;
        State?: string;
        Zip?: string;
        NameOnCard?: string;
        CardTypeId?: string;
        ExpirationMonth?: number;
        ExpirationYear?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * CardPaymentAcceptSettings entity interface.
     */
    interface CardPaymentAcceptSettings {
        HostPageOrigin?: string;
        AdaptorPath?: string;
        CardTokenizationEnabled?: boolean;
        CardPaymentEnabled?: boolean;
        PaymentAmount?: number;
        HideBillingAddress?: boolean;
    }
    /**
     * CardPaymentAcceptPoint entity interface.
     */
    interface CardPaymentAcceptPoint {
        AcceptPageUrl?: string;
        AcceptPageSubmitUrl?: string;
        MessageOrigin?: string;
        AcceptPageContent?: string;
    }
    /**
     * CardPaymentAcceptResult entity interface.
     */
    interface CardPaymentAcceptResult {
        TenderLine?: Entities.TenderLine;
        TokenizedPaymentCard?: Entities.TokenizedPaymentCard;
        PaymentSdkErrors?: Entities.PaymentError[];
        AdditionalContext?: string;
    }
    /**
     * ReasonCodeLine entity interface.
     */
    interface ReasonCodeLine {
        LineId?: string;
        Amount?: number;
        Information?: string;
        InformationAmount?: number;
        InputTypeValue?: number;
        ItemTender?: string;
        LineNumber?: number;
        LineTypeValue?: number;
        ParentLineId?: string;
        ReasonCodeId?: string;
        StatementCode?: string;
        SubReasonCodeId?: string;
        SourceCode?: string;
        SourceCode2?: string;
        SourceCode3?: string;
        TransactionId?: string;
        CreatedDateTime?: Date;
        FiscalTransactionParentGuid?: string;
        IsChanged?: boolean;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ReasonSubCode entity interface.
     */
    interface ReasonSubCode {
        TriggerCode?: string;
        AmountPercent: number;
        ReasonCodeId?: string;
        SubCodeId?: string;
        Description?: string;
        TriggerFunctionTypeValue?: number;
        ProductId?: number;
        PriceTypeValue?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * Receipt entity interface.
     */
    interface Receipt {
        TransactionId?: string;
        Header?: string;
        Body?: string;
        Footer?: string;
        Width?: number;
        ReceiptId?: string;
        LayoutId?: string;
        ReceiptTitle?: string;
        ReceiptTypeValue?: number;
        ReceiptTypeStrValue?: string;
        Printers?: Entities.Printer[];
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ReceiptMask entity interface.
     */
    interface ReceiptMask {
        FunctionalityProfileId?: string;
        IsIndependent: boolean;
        ReceiptTransactionTypeValue: number;
        RecordId: number;
        Mask?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * SalesLine entity interface.
     */
    interface SalesLine {
        StaffId?: string;
        LineId?: string;
        Description?: string;
        OriginLineId?: string;
        TaxOverrideCode?: string;
        IsPriceKeyedIn?: boolean;
        IsTaxOverideCodeTaxExempt?: boolean;
        ProductId?: number;
        Barcode?: string;
        BarcodeEmbeddedPrice?: number;
        PriceInBarcode?: boolean;
        EntryMethodTypeValue?: number;
        MasterProductId?: number;
        ListingId?: number;
        IsPriceOverridden?: boolean;
        OriginalPrice?: number;
        TotalAmount?: number;
        NetAmountWithoutTax?: number;
        DiscountAmount?: number;
        DiscountAmountWithoutTax?: number;
        NetPrice?: number;
        TotalDiscount?: number;
        TotalPercentageDiscount?: number;
        LineDiscount?: number;
        PeriodicDiscount?: number;
        LineManualDiscountPercentage?: number;
        LineManualDiscountAmount?: number;
        ShippingAddress?: Entities.Address;
        DeliveryMode?: string;
        Comment?: string;
        RequestedDeliveryDate?: Date;
        InventoryLocationId?: string;
        WarehouseLocation?: string;
        InventoryStatusId?: string;
        LicensePlate?: string;
        InventoryDimensionId?: string;
        ItemType?: number;
        ReservationId?: string;
        LineNumber?: number;
        ReturnQuantity?: number;
        QuantityRemained?: number;
        QuantityShipped?: number;
        LineVersion?: number;
        StatusValue?: number;
        SalesStatusValue?: number;
        ProductSourceValue?: number;
        IsGiftCardLine?: boolean;
        GiftCardId?: string;
        GiftCardCurrencyCode?: string;
        GiftCardOperationValue?: number;
        GiftCardTypeValue?: number;
        IsInvoiceLine?: boolean;
        InvoiceId?: string;
        InvoiceAmount?: number;
        IsInvoiceSettled?: boolean;
        InvoiceTypeValue?: number;
        InvoicedSalesId?: string;
        IsVoided?: boolean;
        IsPriceLocked?: boolean;
        ChargeLines?: Entities.ChargeLine[];
        BasePrice?: number;
        AgreementPrice?: number;
        AdjustedPrice?: number;
        IsWarrantyLine?: boolean;
        WarrantableTransactionId?: string;
        WarrantableSalesId?: string;
        WarrantableLineNumber?: number;
        WarrantableSerialNumber?: string;
        ReturnTransactionId?: string;
        ReturnLineNumber?: number;
        ReturnInventTransId?: string;
        ReturnStore?: string;
        ReturnTerminalId?: string;
        ReturnChannelId?: number;
        FulfillmentStoreId?: string;
        SalesDate?: Date;
        QuantityInvoiced?: number;
        QuantityOrdered?: number;
        QuantityCanceled?: number;
        SavedQuantity?: number;
        IsSavedDiscount?: boolean;
        RecordId?: number;
        SerialNumber?: string;
        BatchId?: string;
        DeliveryModeChargeAmount?: number;
        UnitOfMeasureSymbol?: string;
        CatalogId?: number;
        ElectronicDeliveryEmailAddress?: string;
        ElectronicDeliveryEmailContent?: string;
        LoyaltyDiscountAmount?: number;
        LoyaltyPercentageDiscount?: number;
        TenderDiscountAmount?: number;
        TenderDiscountPercentage?: number;
        GiftCardBalance?: number;
        IsCustomerAccountDeposit?: boolean;
        Blocked?: boolean;
        Found?: boolean;
        DateToActivateItem?: Date;
        LinePercentageDiscount?: number;
        PeriodicPercentageDiscount?: number;
        QuantityDiscounted?: number;
        UnitQuantity?: number;
        UnitOfMeasureConversion?: Entities.UnitOfMeasureConversion;
        DiscountLines?: Entities.DiscountLine[];
        PriceLines?: Entities.PriceLine[];
        PeriodicDiscountPossibilities?: Entities.DiscountLine[];
        ReasonCodeLines?: Entities.ReasonCodeLine[];
        ReturnLabelProperties?: Entities.ReturnLabelContent;
        LineMultilineDiscOnItem?: string;
        RelatedDiscountedLineIds?: string[];
        LinkedParentLineId?: string;
        LineMultilineDiscOnItemValue?: number;
        WasChanged?: boolean;
        OriginalSalesOrderUnitOfMeasure?: string;
        InventOrderUnitOfMeasure?: string;
        TrackingId?: string;
        IsLoyaltyDiscountApplied?: boolean;
        CommissionSalesGroup?: string;
        IsCommissionSalesGroupOverriddenByCustomer?: boolean;
        CommissionSalesGroupSetByCashier?: string;
        AttributeValues?: Entities.AttributeValueBase[];
        ThirdPartyGiftCardInfo?: Entities.ThirdPartyGiftCardInfo;
        QuantityReturnable?: number;
        LoyaltyRewardPointLines?: Entities.LoyaltyRewardPointLine[];
        ReturnLoyaltyRewardPointLines?: Entities.LoyaltyRewardPointLine[];
        ItemId?: string;
        Quantity?: number;
        Price?: number;
        ItemTaxGroupId?: string;
        SalesTaxGroupId?: string;
        OriginalSalesTaxGroupId?: string;
        OriginalItemTaxGroupId?: string;
        TaxAmount?: number;
        SalesOrderUnitOfMeasure?: string;
        NetAmount?: number;
        NetAmountPerUnit?: number;
        GrossAmount?: number;
        TaxLines?: Entities.TaxLine[];
        TaxMeasures?: Entities.TaxMeasure[];
        TaxAmountExemptInclusive?: number;
        TaxAmountInclusive?: number;
        TaxAmountExclusive?: number;
        NetAmountWithAllInclusiveTax?: number;
        BeginDateTime?: Date;
        EndDateTime?: Date;
        TaxRatePercent?: number;
        IsReturnByReceipt?: boolean;
        ReturnLineTaxAmount?: number;
        ReturnTaxLines?: Entities.TaxLine[];
        TaxExemptPriceInclusiveReductionAmount?: number;
        TaxExemptPriceInclusiveOriginalPrice?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * SearchArea entity interface.
     */
    interface SearchArea {
        Longitude?: number;
        Latitude?: number;
        Radius?: number;
        DistanceUnitValue?: number;
    }
    /**
     * ShiftAccountLine entity interface.
     */
    interface ShiftAccountLine {
        AccountTypeValue?: number;
        AccountNumber?: string;
        Amount?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ShiftTenderLine entity interface.
     */
    interface ShiftTenderLine {
        TenderTypeId?: string;
        TenderTypeName?: string;
        CardTypeId?: string;
        TenderCurrency?: string;
        CountingRequired?: boolean;
        StartingAmountOfStoreCurrency?: number;
        StartingAmountOfTenderCurrency?: number;
        FloatingEntryAmountOfStoreCurrency?: number;
        FloatingEntryAmountOfTenderCurrency?: number;
        SafeDropAmountOfStoreCurrency?: number;
        SafeDropAmountOfTenderCurrency?: number;
        BankDropAmountOfStoreCurrency?: number;
        BankDropAmountOfTenderCurrency?: number;
        RemoveTenderAmountOfStoreCurrency?: number;
        RemoveTenderAmountOfTenderCurrency?: number;
        DeclareTenderAmountOfStoreCurrency?: number;
        DeclareTenderAmountOfTenderCurrency?: number;
        TenderedAmountOfStoreCurrency?: number;
        TenderedAmountOfTenderCurrency?: number;
        ChangeAmountOfStoreCurrency?: number;
        ChangeAmountOfTenderCurrency?: number;
        Count?: number;
        Notes?: string;
        OverriddenFloatEntryAmountInTenderedCurrency?: number;
        OverriddenBankDropAmountInTenderedCurrency?: number;
        OverriddenChangeAmountInTenderedCurrency?: number;
        OverriddenDeclaredTenderAmountInTenderedCurrency?: number;
        OverriddenRemovedTenderAmountInTenderedCurrency?: number;
        OverriddenSafeDropAmountInTenderedCurrency?: number;
        OverriddenStartingAmountInTenderedCurrency?: number;
        OverriddenTenderedAmountInTenderedCurrency?: number;
        OverShortAmountOfTenderCurrency?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * StockCountJournalTransaction entity interface.
     */
    interface StockCountJournalTransaction {
        JournalId?: string;
        RecordId?: number;
        OperationType?: number;
        ItemId?: string;
        DataAreaId?: string;
        ProductRecordId?: number;
        ItemName?: string;
        InventDimId?: string;
        Counted?: number;
        Quantity?: number;
        EstimatedOnHandQuantity?: number;
        OnHandCalculationDateTime?: Date;
        Unit?: string;
        UserId?: string;
        TerminalId?: string;
        CountedDate?: Date;
        Status?: number;
        InventBatchId?: string;
        WarehouseLocationId?: string;
        InventoryStatus?: string;
        LicensePlate?: string;
        WarehousePalletId?: string;
        InventSiteId?: string;
        InventLocationId?: string;
        ConfigId?: string;
        InventSizeId?: string;
        InventColorId?: string;
        InventStyleId?: string;
        InventSerialId?: string;
        TrackingGuid?: string;
        UpdatedInAx?: boolean;
        Message?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * TaxLine entity interface.
     */
    interface TaxLine {
        TaxGroup?: string;
        Percentage?: number;
        IsExempt?: boolean;
        TaxBasis?: number;
        IsIncludedInPrice?: boolean;
        SaleLineNumber?: number;
        StoreId?: string;
        TerminalId?: string;
        TransactionId?: string;
        TaxCode?: string;
        Amount?: number;
        AmountRefunded?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * TenderLine entity interface.
     */
    interface TenderLine {
        StoreId?: string;
        TerminalId?: string;
        TransactionId?: string;
        RefundableAmount?: number;
        CaptureToken?: string;
        CardToken?: string;
        Authorization?: string;
        TransactionStatusValue?: number;
        IncomeExpenseAccountTypeValue?: number;
        MaskedCardNumber?: string;
        TenderDate?: Date;
        IsPreProcessed?: boolean;
        IsDeposit?: boolean;
        IsCustomerAccountFloorLimitUsed?: boolean;
        ChannelId?: number;
        IsLinkedRefund?: boolean;
        LinkedPaymentStore?: string;
        LinkedPaymentTerminalId?: string;
        LinkedPaymentTransactionId?: string;
        LinkedPaymentLineNumber?: number;
        LinkedPaymentCurrency?: string;
        TenderLineId?: string;
        Amount?: number;
        CashBackAmount?: number;
        AmountInTenderedCurrency?: number;
        AmountInCompanyCurrency?: number;
        Currency?: string;
        ExchangeRate?: number;
        CompanyCurrencyExchangeRate?: number;
        TenderTypeId?: string;
        SignatureData?: string;
        ReasonCodeLines?: Entities.ReasonCodeLine[];
        LineNumber?: number;
        GiftCardId?: string;
        GiftCardPin?: string;
        GiftCardExpirationYear?: number;
        GiftCardExpirationMonth?: number;
        CreditMemoId?: string;
        CustomerId?: string;
        LoyaltyCardId?: string;
        CardTypeId?: string;
        IsChangeLine?: boolean;
        IsHistorical?: boolean;
        IsVoidable?: boolean;
        StatusValue?: number;
        VoidStatusValue?: number;
        AuthorizedAmount?: number;
        PaymentRefRecId?: number;
        CardPaymentAccountId?: string;
        ProcessingTypeValue?: number;
        CardProcessorStatusValue?: number;
        LinkedPaymentRefRecId?: number;
        IsPolicyBypassed?: boolean;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * TextValueTranslation entity interface.
     */
    interface TextValueTranslation {
        Language?: string;
        Text?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * UnitOfMeasure entity interface.
     */
    interface UnitOfMeasure {
        DecimalPrecision?: number;
        Symbol?: string;
        Description?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * RecommendedElement entity interface.
     */
    interface RecommendedElement {
        ElementId?: string;
        ElementTypeValue?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * RecommendationCriteria entity interface.
     */
    interface RecommendationCriteria {
        CustomerAccountNumber?: string;
        CatalogId?: number;
        ProductIds?: number[];
        CategoryIds?: number[];
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ProductListLine entity interface.
     */
    interface ProductListLine {
        ProductListId?: string;
        LineId?: string;
        ProductId?: number;
        Quantity?: number;
        UnitOfMeasure?: string;
        CreatedDateTime?: Date;
        LastUpdated?: Date;
        DeletedDateTime?: Date;
        DataAreaId?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * CommerceListLine entity interface.
     */
    interface CommerceListLine {
        CommerceListId?: number;
        LineId?: number;
        CustomerId?: string;
        CustomerName?: string;
        ProductId?: number;
        Quantity?: number;
        UnitOfMeasure?: string;
        IsFavorite?: boolean;
        IsRecurring?: boolean;
        IsPrivate?: boolean;
        CreatedDateTime?: Date;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * CommerceListContributor entity interface.
     */
    interface CommerceListContributor {
        RecordId?: number;
        CustomerId?: string;
        CustomerName?: string;
        InvitationId?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * CommerceListInvitation entity interface.
     */
    interface CommerceListInvitation {
        RecordId?: number;
        Invitee?: string;
        IsSent?: boolean;
        LastRequestDateTime?: Date;
        LastSentDateTime?: Date;
        StatusValue?: number;
        Token?: string;
        InvitationTypeValue?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * SearchFilter entity interface.
     */
    interface SearchFilter {
        Key?: string;
        FilterTypeValue: number;
        SearchValues?: Entities.SearchFilterValue[];
    }
    /**
     * SearchFilterValue entity interface.
     */
    interface SearchFilterValue {
        Value?: Entities.CommercePropertyValue;
    }
    /**
     * TransactionSearchCriteria entity interface.
     */
    interface TransactionSearchCriteria {
        TransactionIds?: string[];
        SalesId?: string;
        ReceiptId?: string;
        ChannelReferenceId?: string;
        CustomerAccountNumber?: string;
        CustomerFirstName?: string;
        CustomerLastName?: string;
        StoreId?: string;
        TerminalId?: string;
        ItemId?: string;
        Barcode?: string;
        SerialNumber?: string;
        StaffId?: string;
        StartDateTime?: Date;
        EndDateTime?: Date;
        ReceiptEmailAddress?: string;
        SearchIdentifiers?: string;
        SearchLocationTypeValue?: number;
        CustomFilters?: Entities.SearchFilter[];
    }
    /**
     * SalesOrderSearchCriteria entity interface.
     */
    interface SalesOrderSearchCriteria {
        TransactionIds?: string[];
        SalesId?: string;
        ReceiptId?: string;
        ChannelReferenceId?: string;
        CustomerAccountNumber?: string;
        CustomerFirstName?: string;
        CustomerLastName?: string;
        StoreId?: string;
        TerminalId?: string;
        ItemId?: string;
        Barcode?: string;
        SerialNumber?: string;
        StaffId?: string;
        SearchTypeValue?: number;
        StartDateTime?: Date;
        EndDateTime?: Date;
        IncludeDetails?: boolean;
        ReceiptEmailAddress?: string;
        SearchIdentifiers?: string;
        SalesTransactionTypeValues?: number[];
        SearchLocationTypeValue?: number;
        TransactionStatusTypeValues?: number[];
    }
    /**
     * SearchStoreCriteria entity interface.
     */
    interface SearchStoreCriteria {
        ChannelId?: number;
        StoreNumber?: string;
        InventoryLocationId?: string;
    }
    /**
     * CustomerSearchCriteria entity interface.
     */
    interface CustomerSearchCriteria {
        Keyword?: string;
        SearchOnlyCurrentCompany?: boolean;
        SearchLocationValue?: number;
        DataLevelValue?: number;
    }
    /**
     * ProductPrice entity interface.
     */
    interface ProductPrice {
        ProductId?: number;
        ListingId?: number;
        BasePrice?: number;
        TradeAgreementPrice?: number;
        AdjustedPrice?: number;
        CustomerContextualPrice?: number;
        DiscountAmount?: number;
        CurrencyCode?: string;
        ItemId?: string;
        InventoryDimensionId?: string;
        UnitOfMeasure?: string;
        ValidFrom?: Date;
        ProductLookupId?: number;
        ChannelId?: number;
        CatalogId?: number;
        DiscountLines?: Entities.DiscountLine[];
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * OrgUnitAvailability entity interface.
     */
    interface OrgUnitAvailability {
        OrgUnitLocation?: Entities.OrgUnitLocation;
        ItemAvailabilities?: Entities.ItemAvailability[];
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ProductVariantPropertySet entity interface.
     */
    interface ProductVariantPropertySet {
        VariantId?: number;
        ProductVariantPropertiesAsList?: Entities.ProductPropertyTranslation[];
    }
    /**
     * PurchaseOrderLine entity interface.
     */
    interface PurchaseOrderLine {
        RecordId?: number;
        OrderId?: string;
        ProductRecordId?: number;
        ItemId?: string;
        ItemName?: string;
        InventDimId?: string;
        QuantityOrdered?: number;
        PurchaseQuantity?: number;
        PurchaseUnit?: string;
        PurchaseReceived?: number;
        PurchaseReceivedNow?: number;
        InventBatchId?: string;
        WMSLocationId?: string;
        WMSPalletId?: string;
        InventoryStatus?: string;
        LicensePlate?: string;
        InventSiteId?: string;
        InventLocationId?: string;
        ConfigId?: string;
        InventSerialId?: string;
        InventSizeId?: string;
        InventColorId?: string;
        InventStyleId?: string;
        IsCommitted?: boolean;
        Message?: string;
        UniqueIdentifier?: string;
        DeliveryMethod?: string;
        DataAreaId?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * TransferOrderLine entity interface.
     */
    interface TransferOrderLine {
        RecordId?: number;
        OrderId?: string;
        ProductRecordId?: number;
        ItemId?: string;
        ItemName?: string;
        InventDimId?: string;
        QuantityTransferred?: number;
        QuantityShipped?: number;
        QuantityReceived?: number;
        QuantityShipNow?: number;
        QuantityReceiveNow?: number;
        QuantityRemainShip?: number;
        QuantityRemainReceive?: number;
        PurchaseUnit?: string;
        InventBatchId?: string;
        WMSLocationId?: string;
        WMSPalletId?: string;
        InventoryStatus?: string;
        LicensePlate?: string;
        InventSiteId?: string;
        InventLocationId?: string;
        ConfigId?: string;
        InventSerialId?: string;
        InventSizeId?: string;
        InventColorId?: string;
        InventStyleId?: string;
        IsCommitted?: boolean;
        Message?: string;
        Guid?: string;
        DeliveryMethod?: string;
        DataAreaId?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * TransferOrderJournal entity interface.
     */
    interface TransferOrderJournal {
        OrderId?: string;
        VoucherId?: string;
        UpdatedByWorker?: string;
        InventLocationIdFrom?: string;
        InventLocationIdTo?: string;
        QuantityShipped?: number;
        PostingDate?: Date;
        DeliveryMode?: string;
        Comments?: string;
        JournalLines?: Entities.TransferOrderJournalLine[];
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * PickingListLine entity interface.
     */
    interface PickingListLine {
        RecordId?: number;
        OrderId?: string;
        ProductRecordId?: number;
        ItemId?: string;
        ItemName?: string;
        InventDimId?: string;
        QuantityOrdered?: number;
        PurchaseReceivedNow?: number;
        InventBatchId?: string;
        WMSLocationId?: string;
        WMSPalletId?: string;
        InventoryStatus?: string;
        LicensePlate?: string;
        InventSiteId?: string;
        InventLocationId?: string;
        ConfigId?: string;
        InventSerialId?: string;
        InventSizeId?: string;
        InventColorId?: string;
        InventStyleId?: string;
        IsCommitted?: boolean;
        Message?: string;
        Guid?: string;
        DeliveryMethod?: string;
        DataAreaId?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * Affiliation entity interface.
     */
    interface Affiliation {
        RecordId?: number;
        AffiliationTypeValue?: number;
        Description?: string;
        Name?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * InventoryInboundOutboundDocumentLinesSummary entity interface.
     */
    interface InventoryInboundOutboundDocumentLinesSummary {
        InProgressQuantity?: number;
        TotalLineNumber?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * InventoryDocumentSerialNumberLinesSummary entity interface.
     */
    interface InventoryDocumentSerialNumberLinesSummary {
        RegisteringQuantity?: number;
        RegisteredQuantity?: number;
        TotalLineNumber?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * InventoryInboundOutboundDocumentLine entity interface.
     */
    interface InventoryInboundOutboundDocumentLine {
        WorkDocumentId?: string;
        LineId?: string;
        SourceDocumentRecordId?: number;
        SourceDocumentLineRecordId?: number;
        SourceDocumentTypeValue?: number;
        QuantityOrdered?: number;
        QuantityShipped?: number;
        QuantityReceived?: number;
        QuantityCancelled?: number;
        QuantityToUpdate?: number;
        LocationId?: string;
        ItemId?: string;
        ProductId?: number;
        ItemName?: string;
        ItemPrimaryImageUrl?: string;
        IsLocationActive?: boolean;
        IsLocationAllowBlankReceiptEnabled?: boolean;
        IsLocationBlankIssueAllowed?: boolean;
        ProductDimensions?: Entities.ProductDimension[];
        Note?: string;
        OperationResultMessage?: string;
        IsCloseLine?: boolean;
        SourceDocumentLine?: Entities.InventoryInboundOutboundSourceDocumentLine;
        SerialNumberLines?: Entities.InventoryDocumentSerialNumberLine[];
        LongVersion?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * InventoryInboundOutboundSourceDocument entity interface.
     */
    interface InventoryInboundOutboundSourceDocument {
        RecordId?: number;
        DocumentTypeValue?: number;
        DocumentId?: string;
        StatusValue?: number;
        ReceiveDate?: Date;
        ShipDate?: Date;
        Sender?: string;
        Receiver?: string;
        SenderDetails?: string;
        ReceiverDetails?: string;
        DeliveryMode?: string;
        TotalQuantityOrdered?: number;
        TotalQuantityShipped?: number;
        TotalQuantityReceived?: number;
        TotalQuantityCancelled?: number;
        DataAreaId?: string;
        Note?: string;
        TotalLines?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * InventoryInboundOutboundSourceDocumentLine entity interface.
     */
    interface InventoryInboundOutboundSourceDocumentLine {
        DocumentRecordId?: number;
        DocumentTypeValue?: number;
        RecordId?: number;
        LineNumber?: number;
        ItemId?: string;
        ProductId?: number;
        QuantityOrdered?: number;
        QuantityShipped?: number;
        QuantityReceived?: number;
        QuantityCancelled?: number;
        LocationId?: string;
        OverDeliveryPercentage?: number;
        UnderDeliveryPercentage?: number;
        UnitId?: string;
        Receiver?: string;
        DataAreaId?: string;
        Note?: string;
        DocumentId?: string;
        ItemName?: string;
        ItemPrimaryImageUrl?: string;
        IsLocationActive?: boolean;
        IsLocationAllowBlankReceiptEnabled?: boolean;
        IsLocationBlankIssueAllowed?: boolean;
        HasSerialNumber?: boolean;
        IsSerialNumberBlankReceiptAllowed?: boolean;
        IsSerialNumberDuplicateCheckEnabled?: boolean;
        ProductDimensions?: Entities.ProductDimension[];
        SerialNumberLines?: Entities.InventoryDocumentSourceSerialNumberLine[];
        StatusValue?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * InventoryDocumentLineFilterCriteria entity interface.
     */
    interface InventoryDocumentLineFilterCriteria {
        ProductId?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * InventoryDocumentUpdateLinesAction entity interface.
     */
    interface InventoryDocumentUpdateLinesAction {
        Quantity?: number;
        ActionTypeValue?: number;
        LocationId?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * InventoryDocumentLineOperationResultSettings entity interface.
     */
    interface InventoryDocumentLineOperationResultSettings {
        ModeValue?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * InventoryDocumentLineSearchCriteria entity interface.
     */
    interface InventoryDocumentLineSearchCriteria {
        SourceDocumentId?: string;
        SourceDocumentTypeValue?: number;
        WorkDocumentId?: string;
        AvailableSerializedLineOnly?: boolean;
        DocumentLineIds?: string[];
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * InventoryDocumentSearchCriteria entity interface.
     */
    interface InventoryDocumentSearchCriteria {
        DocumentId?: string;
        DocumentStateValue?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * InventoryDocumentSerialNumberLineSearchCriteria entity interface.
     */
    interface InventoryDocumentSerialNumberLineSearchCriteria {
        DocumentLineId?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * InventoryDocumentSerialNumberLineUpdateAction entity interface.
     */
    interface InventoryDocumentSerialNumberLineUpdateAction {
        DocumentLineId?: string;
        LineId?: string;
        SerialNumber?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * InventoryDocumentSerialNumberLineResetAction entity interface.
     */
    interface InventoryDocumentSerialNumberLineResetAction {
        DocumentLineId?: string;
        LineId?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * InventoryInboundOutboundDocumentUpdateLinesByCriteriaResult entity interface.
     */
    interface InventoryInboundOutboundDocumentUpdateLinesByCriteriaResult {
        UpdatedLines?: Entities.InventoryInboundOutboundDocumentLine[];
        TotalLinesUpdated?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * WarehouseLocationSearchCriteria entity interface.
     */
    interface WarehouseLocationSearchCriteria {
        WarehouseIds?: string[];
        IsLocationProfileRequired?: boolean;
        SearchText?: string;
    }
    /**
     * InventoryDocumentSerialNumberLine entity interface.
     */
    interface InventoryDocumentSerialNumberLine {
        WorkDocumentId?: string;
        WorkDocumentLineId?: string;
        SourceLineId?: string;
        LineId?: string;
        Quantity?: number;
        SerialNumber?: string;
        StatusValue?: number;
        ProductId?: number;
        ModifiedDateTime?: Date;
        SourceLine?: Entities.InventoryDocumentSourceSerialNumberLine;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * InventoryDocumentValidationCategoryResultsSummary entity interface.
     */
    interface InventoryDocumentValidationCategoryResultsSummary {
        CategoryName?: string;
        SeverityValue?: number;
        TotalValidationResultCount?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * InventoryDocumentValidationResultSummary entity interface.
     */
    interface InventoryDocumentValidationResultSummary {
        DocumentId?: string;
        DocumentVersion?: number;
        CategorySummaries?: Entities.InventoryDocumentValidationCategoryResultsSummary[];
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * InventoryDocumentValidationResultLine entity interface.
     */
    interface InventoryDocumentValidationResultLine {
        DocumentValidationResultLineId?: string;
        CategoryName?: string;
        SeverityValue?: number;
        ErrorCode?: number;
        ErrorMessage?: string;
        DocumentId?: string;
        DocumentLongVersion?: number;
        DocumentLineId?: string;
        CreatedDateTime?: Date;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * InventoryDocumentValidationResultSearchCriteria entity interface.
     */
    interface InventoryDocumentValidationResultSearchCriteria {
        DocumentId?: string;
        DocumentVersion?: number;
        SeverityValue?: number;
        Categories?: string[];
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ProductDimension entity interface.
     */
    interface ProductDimension {
        DimensionTypeValue: number;
        DimensionValue?: Entities.ProductDimensionValue;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ProductDimensionValue entity interface.
     */
    interface ProductDimensionValue {
        RecordId: number;
        Value?: string;
        DimensionId?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ProductDimensionCombination entity interface.
     */
    interface ProductDimensionCombination {
        ProductDimensions?: Entities.ProductDimension[];
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * SearchRefiner entity interface.
     */
    interface SearchRefiner {
        RecordId?: number;
        KeyName?: string;
        DataTypeValue?: number;
        RefinerTypeValue?: number;
        DisplayTemplateValue?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * SearchRefinerValue entity interface.
     */
    interface SearchRefinerValue {
        RefinerRecordId?: number;
        DataTypeValue?: number;
        LeftValueBoundString?: string;
        RightValueBoundString?: string;
        UnitText?: string;
        RowNumber?: number;
        Count?: number;
        LeftValueBoundLocalizedString?: string;
        RightValueBoundLocalizedString?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ProductRefiner entity interface.
     */
    interface ProductRefiner extends SearchRefiner {
        SourceValue?: number;
        Values?: Entities.ProductRefinerValue[];
        IsDimension?: boolean;
    }
    /**
     * ProductRefinerValue entity interface.
     */
    interface ProductRefinerValue extends SearchRefinerValue {
        RefinerSourceValue?: number;
    }
    /**
     * ClientBookRefiner entity interface.
     */
    interface ClientBookRefiner extends SearchRefiner {
        SourceValue?: number;
        Values?: Entities.ClientBookRefinerValue[];
    }
    /**
     * ClientBookRefinerValue entity interface.
     */
    interface ClientBookRefinerValue extends SearchRefinerValue {
        RefinerSourceValue?: number;
    }
    /**
     * ProductRelationType entity interface.
     */
    interface ProductRelationType {
        Name?: string;
        RecordId: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ComponentInSlotRelation entity interface.
     */
    interface ComponentInSlotRelation {
        ComponentId: number;
        SlotId: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ProductRules entity interface.
     */
    interface ProductRules {
        HasLinkedProducts: boolean;
        IsSerialized: boolean;
        IsActiveInSalesProcess: boolean;
        IsBlocked: boolean;
        DateOfBlocking: Date;
        DateToActivate: Date;
        DateToBlock: Date;
        DefaultUnitOfMeasure?: string;
        PriceKeyingRequirementValue: number;
        QuantityKeyingRequirementValue: number;
        MustKeyInComment: boolean;
        CanQuantityBecomeNegative: boolean;
        MustScaleItem: boolean;
        CanPriceBeZero: boolean;
        ProductId?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * LocalizedString entity interface.
     */
    interface LocalizedString {
        RecordId?: number;
        LanguageId?: string;
        TextId?: number;
        Text?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * LoyaltyCard entity interface.
     */
    interface LoyaltyCard {
        CardNumber?: string;
        CardTenderTypeValue?: number;
        CustomerAccount?: string;
        LoyaltyGroups?: Entities.LoyaltyGroup[];
        RewardPoints?: Entities.LoyaltyRewardPoint[];
        LoyaltyEnrollmentDate?: Date;
        LoyaltyEnrollmentDateLocal?: Date;
        LoyaltyEnrollmentTime?: number;
        LoyaltyEnrollmentTimeLocal?: number;
        OmOperatingUnitId?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ProductComponent entity interface.
     */
    interface ProductComponent {
        ProductId: number;
        SlotId: number;
        Product?: Entities.SimpleProduct;
        AdditionalChargeForComponent?: number;
        Behavior?: Entities.ProductBehavior;
        Description?: string;
        Dimensions?: Entities.ProductDimension[];
        ItemId?: string;
        Name?: string;
        ProductTypeValue?: number;
        Quantity?: number;
        UnitOfMeasure?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * SimpleProduct entity interface.
     */
    interface SimpleProduct {
        RecordId: number;
        ItemId?: string;
        Name?: string;
        Description?: string;
        ProductTypeValue: number;
        DefaultUnitOfMeasure?: string;
        BasePrice: number;
        Price: number;
        AdjustedPrice: number;
        MasterProductId?: number;
        Components?: Entities.ProductComponent[];
        Dimensions?: Entities.ProductDimension[];
        Behavior?: Entities.ProductBehavior;
        LinkedProducts?: Entities.SimpleLinkedProduct[];
        PrimaryImageUrl?: string;
        ItemTypeValue?: number;
        ItemServiceTypeValue?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ProductBehavior entity interface.
     */
    interface ProductBehavior {
        HasSerialNumber: boolean;
        IsDiscountAllowed: boolean;
        IsManualDiscountAllowed: boolean;
        IsKitDisassemblyAllowed: boolean;
        IsNegativeQuantityAllowed: boolean;
        IsReturnAllowed: boolean;
        IsSaleAtPhysicalStoresAllowed: boolean;
        IsZeroSalePriceAllowed: boolean;
        KeyInPriceValue: number;
        KeyInQuantityValue: number;
        MustKeyInComment: boolean;
        MustPrintIndividualShelfLabelsForVariants: boolean;
        MustPromptForSerialNumberOnlyAtSale: boolean;
        MustWeighProductAtSale: boolean;
        ValidFromDateForSaleAtPhysicalStores: Date;
        ValidToDateForSaleAtPhysicalStores: Date;
        IsStorageDimensionGroupLocationActive: boolean;
        IsStorageDimensionGroupLocationAllowBlankReceiptEnabled: boolean;
        AllowNegativePhysicalInventory: boolean;
        IsBlankSerialNumberAllowed?: boolean;
        IsBlankSerialNumberReceiptAllowed?: boolean;
        IsSerialNumberControlEnabled?: boolean;
        IsStorageDimensionGroupLocationBlankIssueAllowed?: boolean;
        IsSerialNumberRequired?: boolean;
        DefaultQuantity?: number;
        MaximumQuantity?: number;
        MinimumQuantity?: number;
        MultipleOfQuantity?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * SimpleLinkedProduct entity interface.
     */
    interface SimpleLinkedProduct {
        RecordId: number;
        ItemId?: string;
        Name?: string;
        Description?: string;
        ProductTypeValue: number;
        DefaultUnitOfMeasure?: string;
        BasePrice: number;
        Price: number;
        AdjustedPrice: number;
        Quantity: number;
        Behavior?: Entities.ProductBehavior;
        Dimensions?: Entities.ProductDimension[];
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ProductSearchResult entity interface.
     */
    interface ProductSearchResult {
        ItemId?: string;
        Name?: string;
        Price: number;
        PrimaryImageUrl?: string;
        RecordId: number;
        TrackingId?: string;
        AverageRating?: number;
        TotalRatings?: number;
        Description?: string;
        BasePrice?: number;
        DisplayOrder?: number;
        AttributeValues?: Entities.AttributeValue[];
        IsMasterProduct?: boolean;
        MasterProductId?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * SearchSuggestion entity interface.
     */
    interface SearchSuggestion {
        Value?: string;
        Value2?: Entities.CommerceProperty;
        Value3?: Entities.CommerceProperty;
        Value4?: Entities.CommerceProperty;
        SuggestionType?: string;
        Id?: string;
        ImageUrl?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * LoyaltyPointRedemptionEstimate entity interface.
     */
    interface LoyaltyPointRedemptionEstimate {
        MaxCurrencyValueOfLoyaltyPoints?: number;
        RewardPointToRedeemList?: Entities.LoyaltyRewardPointLine[];
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * LoyaltyGroup entity interface.
     */
    interface LoyaltyGroup {
        Description?: string;
        Name?: string;
        RecordId: number;
        LoyaltyTiers?: Entities.LoyaltyTier[];
        LoyaltyCardTiers?: Entities.LoyaltyCardTier[];
        HighestActiveLoyaltyCardTier?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * LoyaltyTier entity interface.
     */
    interface LoyaltyTier {
        Description?: string;
        RecordId: number;
        TierId?: string;
        TierLevel: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * LoyaltyCardTier entity interface.
     */
    interface LoyaltyCardTier {
        RecordId: number;
        TierId?: string;
        LoyaltyTierRecordId: number;
        ValidFrom: Date;
        ValidTo: Date;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * LoyaltyRewardPoint entity interface.
     */
    interface LoyaltyRewardPoint {
        IsRedeemable: boolean;
        RewardPointCurrency?: string;
        RewardPointTypeValue: number;
        Description?: string;
        RewardPointId?: string;
        IssuedPoints?: number;
        UsedPoints?: number;
        ExpiredPoints?: number;
        ActivePoints?: number;
        PointsExpiringSoon?: number;
        UnvestedPoints?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * LoyaltyCardTransaction entity interface.
     */
    interface LoyaltyCardTransaction {
        ChannelName?: string;
        EntryDateTime: Date;
        EntryTypeValue: number;
        ExpirationDate: Date;
        RewardPointAmountQuantity: number;
        TransactionId?: string;
    }
    /**
     * GiftCard entity interface.
     */
    interface GiftCard {
        Id?: string;
        Balance?: number;
        BalanceCurrencyCode?: string;
        BalanceInCardCurrency?: number;
        CardCurrencyCode?: string;
        GiftCardIssueAmount?: number;
        GiftCardActiveFrom?: Date;
        GiftCardExpireDate?: Date;
        GiftCardHistoryDetails?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * OperationPermission entity interface.
     */
    interface OperationPermission {
        OperationName?: string;
        OperationId?: number;
        CheckUserAccess?: boolean;
        AllowAnonymousAccess?: boolean;
        AllowCustomerAccess?: boolean;
        AllowApplicationAccess?: boolean;
        IsEnabledForTaskManagement?: boolean;
        Permissions?: string[];
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * StateProvinceInfo entity interface.
     */
    interface StateProvinceInfo {
        CountryRegionId?: string;
        StateId?: string;
        StateName?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * TransactionLog entity interface.
     */
    interface TransactionLog extends Transaction {
    }
    /**
     * KitTransaction entity interface.
     */
    interface KitTransaction extends TransactionLog {
        KitTransactionLines?: Entities.KitTransactionLine[];
    }
    /**
     * SalesTaxGroup entity interface.
     */
    interface SalesTaxGroup {
        RecordId: number;
        TaxGroup?: string;
        TaxGroupName?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ProductProperty entity interface.
     */
    interface ProductProperty {
        ValueString?: string;
        UnitText?: string;
        PropertyTypeValue?: number;
        KeyName?: string;
        FriendlyName?: string;
        RecordId?: number;
        IsDimensionProperty?: boolean;
        AttributeValueId?: number;
        GroupId?: number;
        GroupTypeValue?: number;
        GroupName?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
        ProductId?: number;
        CatalogId?: number;
    }
    /**
     * ProductCompositionInformation entity interface.
     */
    interface ProductCompositionInformation {
        VariantInformation?: Entities.ProductVariantInformation;
        KitDefinition?: Entities.KitDefinition;
    }
    /**
     * ProductVariantInformation entity interface.
     */
    interface ProductVariantInformation {
        ActiveVariantProductId: number;
        Variants?: Entities.ProductVariant[];
        Dimensions?: Entities.ProductDimensionSet[];
        ItemId?: string;
        MasterProductId?: number;
    }
    /**
     * ProductChangeTrackingInformation entity interface.
     */
    interface ProductChangeTrackingInformation {
        ModifiedDateTime: Date;
        ChangeActionValue?: number;
        RequestedActionValue?: number;
    }
    /**
     * ProductDimensionSet entity interface.
     */
    interface ProductDimensionSet {
        DimensionKey?: string;
        DimensionValues?: Entities.ProductDimensionValueSet[];
    }
    /**
     * ProductDimensionValueSet entity interface.
     */
    interface ProductDimensionValueSet {
        DimensionId?: string;
        DimensionValue?: string;
        VariantSet?: number[];
    }
    /**
     * RichMediaLocations entity interface.
     */
    interface RichMediaLocations {
        Items?: Entities.RichMediaLocationsRichMediaLocation[];
    }
    /**
     * RichMediaLocationsRichMediaLocation entity interface.
     */
    interface RichMediaLocationsRichMediaLocation {
        Url?: string;
        AltText?: string;
        IsSelfHosted?: boolean;
        IsDefault?: boolean;
    }
    /**
     * KitDefinition entity interface.
     */
    interface KitDefinition {
        DisassembleAtRegister: boolean;
        KitLineDefinitions?: Entities.KitLineDefinition[];
        KitLineProductToVariantMap?: Entities.ComponentKitVariantSet[];
        KitVariantToComponentMap?: Entities.KitVariantContent[];
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ComponentKitVariantSet entity interface.
     */
    interface ComponentKitVariantSet {
        KitLineProductId: number;
        KitVariantIdList?: number[];
    }
    /**
     * KitLineDefinition entity interface.
     */
    interface KitLineDefinition {
        ComponentProductId: number;
        KitLineIdentifier: number;
        SubstituteProductIds?: number[];
        ComponentProperties?: Entities.KitLineProductProperty[];
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * KitLineProductProperty entity interface.
     */
    interface KitLineProductProperty {
        KitLineIdentifier: number;
        ProductId: number;
        Unit?: string;
        Quantity: number;
        Charge: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * KitComponentKey entity interface.
     */
    interface KitComponentKey {
        KitLineIdentifier: number;
        DistinctProductId: number;
    }
    /**
     * KitVariantContent entity interface.
     */
    interface KitVariantContent {
        KitVariantId: number;
        KitComponentKeyList?: Entities.KitComponentKey[];
    }
    /**
     * ProductLookupClause entity interface.
     */
    interface ProductLookupClause {
        ItemId?: string;
        InventDimensionId?: string;
        Barcode?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ProductAssortmentInterval entity interface.
     */
    interface ProductAssortmentInterval {
        ProductId?: number;
        ValidFrom?: Date;
        ValidTo?: Date;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * OrgUnitLocation entity interface.
     */
    interface OrgUnitLocation {
        Contacts?: Entities.OrgUnitContact[];
        ChannelId?: number;
        Latitude?: number;
        Longitude?: number;
        OrgUnitName?: string;
        OrgUnitNumber?: string;
        Address?: string;
        Street?: string;
        StreetNumber?: string;
        City?: string;
        DistrictName?: string;
        BuildingCompliment?: string;
        Postbox?: string;
        Zip?: string;
        County?: string;
        CountyName?: string;
        State?: string;
        StateName?: string;
        Country?: string;
        Distance?: number;
        InventoryLocationId?: string;
        InventorySiteId?: string;
        PostalAddressId?: number;
        OpenFrom?: number;
        OpenTo?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * OrgUnitContact entity interface.
     */
    interface OrgUnitContact {
        ChannelId: number;
        Locator?: string;
        LocatorExtension?: string;
        ContactTypeValue: number;
        IsPrimary: boolean;
        IsPrivate: boolean;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * SalesLineDeliveryOption entity interface.
     */
    interface SalesLineDeliveryOption {
        SalesLineId?: string;
        DeliveryOptions?: Entities.DeliveryOption[];
    }
    /**
     * DeliveryOption entity interface.
     */
    interface DeliveryOption {
        ChargeGroup?: string;
        Code?: string;
        Description?: string;
        RecordId: number;
        DeliveryChargeLines?: Entities.DeliveryChargeLine[];
        TotalChargeAmount?: number;
        ShippingChargeAmount?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ChannelIdentity entity interface.
     */
    interface ChannelIdentity {
        Name?: string;
        OperatingUnitNumber?: string;
        DataAreaId?: string;
        RecordId: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ChannelProfileProperty entity interface.
     */
    interface ChannelProfileProperty {
        Key: number;
        Value?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ChannelConfiguration entity interface.
     */
    interface ChannelConfiguration {
        RecordId: number;
        ChannelNaturalId?: string;
        MinimumDepositPercentage: number;
        QuoteExpirationDays: number;
        PickupDeliveryModeCode?: string;
        CarryoutDeliveryModeCode?: string;
        CancellationChargePercentage: number;
        InventLocation?: string;
        InventLocationDataAreaId?: string;
        BingMapsApiKey?: string;
        BingMapsEnabled: boolean;
        Currency?: string;
        CatalogDefaultImageTemplate?: string;
        CompanyCurrency?: string;
        PriceIncludesSalesTax: boolean;
        CountryRegionId?: string;
        ChannelCountryRegionISOCode?: string;
        DefaultLanguageId?: string;
        TimeZoneInfoId?: string;
        EmailDeliveryModeCode?: string;
        GiftCardItemId?: string;
        EnableProductRecommendations: boolean;
        RefundableShippingAmountWithoutApproval: number;
        RefundShippingCharges: boolean;
        ReceiptSettingsValue: number;
        CustomerAttributeGroupId: number;
        ClientBookAttributeGroupId: number;
        NotificationRefreshInterval: number;
        AllowExchangeOnReturnOrders?: boolean;
        FiscalRegistrationProcessId?: string;
        IsInventoryAutomaticValidationEnabled: boolean;
        ProfileProperties?: Entities.ChannelProfileProperty[];
        Properties?: Entities.ChannelProperty[];
        Languages?: Entities.ChannelLanguage[];
        UseAdvancedAutoCharges?: boolean;
        UseRTSForOnlineOrderCreation?: boolean;
        IsWarrantyAutoPromptEnabled?: boolean;
        EnableProductRatingsForRetailStores?: boolean;
        EnableFetchingPickingListsForPickingAndReceiving?: boolean;
        EnableReturnsForMultipleOrderInvoices?: boolean;
        VoidSuspendedTransactionsOnCloseShift?: number;
        EnableOmniChannelPayments?: boolean;
        UseAdvancedCashManagement?: boolean;
        EnableFiscalRegistrationStorageBackup?: boolean;
        UseSalesReceiptAsDefaultReceiptTypeInJournal?: boolean;
        SalesOrderHeaderAttributeGroups?: number[];
        SalesOrderLinesAttributeGroups?: number[];
        EnableReturnPolicies?: boolean;
        InventAvailabilityCalculationMode?: string;
        IsPriceInclusiveTaxExemptCalculationEnabled?: boolean;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ChannelProperty entity interface.
     */
    interface ChannelProperty {
        Name?: string;
        Value?: string;
        Channel?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ChannelLanguage entity interface.
     */
    interface ChannelLanguage {
        LanguageId?: string;
        IsDefault: boolean;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * NonSalesTransaction entity interface.
     */
    interface NonSalesTransaction extends Transaction {
        ReasonCodeLines?: Entities.ReasonCodeLine[];
        Amount?: number;
        ForeignCurrency?: string;
        OpenDrawer?: boolean;
        DenominationDetails?: Entities.DenominationDetail[];
    }
    /**
     * DropAndDeclareTransaction entity interface.
     */
    interface DropAndDeclareTransaction extends Transaction {
        TenderDetails?: Entities.TenderDetail[];
        ReasonCodeLines?: Entities.ReasonCodeLine[];
        OpenDrawer?: boolean;
    }
    /**
     * ProductSearchCriteria entity interface.
     */
    interface ProductSearchCriteria {
        Ids?: number[];
        CategoryIds?: number[];
        IncludeProductsFromDescendantCategories?: boolean;
        SearchCondition?: string;
        SkipVariantExpansion?: boolean;
        IncludeAttributes?: boolean;
        Barcodes?: string[];
        ItemIds?: Entities.ProductLookupClause[];
        Refinement?: Entities.ProductRefinerValue[];
        CustomerAccountNumber?: string;
        RecommendationListId?: string;
        DownloadProductData?: boolean;
        Context?: Entities.ProjectionDomain;
        Language?: string;
        IsOnline?: boolean;
        DataLevelValue?: number;
    }
    /**
     * ChangedProductsSearchCriteria entity interface.
     */
    interface ChangedProductsSearchCriteria {
        SynchronizationToken?: string;
        Context?: Entities.ProjectionDomain;
        AsListings?: boolean;
        Session?: Entities.ReadChangedProductsSession;
        DataLevelValue?: number;
    }
    /**
     * EmployeeActivitySearchCriteria entity interface.
     */
    interface EmployeeActivitySearchCriteria {
        FromDateTimeOffset?: Date;
        ToDateTimeOffset?: Date;
        StoreNumber?: string;
        EmployeeActivityTypeValues?: number[];
        DataLevelValue?: number;
    }
    /**
     * SearchSuggestionCriteria entity interface.
     */
    interface SearchSuggestionCriteria {
        ProductSearchCriteria?: Entities.ProductSearchCriteria;
        SuggestionType?: string;
        HitPrefix?: string;
        HitSuffix?: string;
    }
    /**
     * CartLineDeliveryPreference entity interface.
     */
    interface CartLineDeliveryPreference {
        LineId?: string;
        DeliveryPreferenceTypeValues?: number[];
    }
    /**
     * CartLinePromotion entity interface.
     */
    interface CartLinePromotion {
        LineId?: string;
        Promotions?: string[];
    }
    /**
     * ProductVariant entity interface.
     */
    interface ProductVariant {
        ItemId?: string;
        MasterProductId: number;
        InventoryDimensionId?: string;
        AdjustedPrice: number;
        BasePrice: number;
        Price: number;
        Color?: string;
        Style?: string;
        Size?: string;
        Configuration?: string;
        ColorId?: string;
        StyleId?: string;
        SizeId?: string;
        ConfigId?: string;
        VariantId?: string;
        Images?: Entities.RichMediaLocations[];
        DistinctProductVariantId?: number;
        ProductNumber?: string;
        PropertiesAsList?: Entities.ProductPropertyTranslation[];
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * HardwareProfilePrinter entity interface.
     */
    interface HardwareProfilePrinter {
        ProfileId?: string;
        DeviceTypeValue?: number;
        DeviceName?: string;
        DeviceMake?: string;
        DeviceModel?: string;
        DeviceDescription?: string;
        CharacterSet?: number;
        ReceiptProfileId?: string;
        BinaryConversion?: boolean;
        DocInsertRemovalTimeout?: number;
        Logo?: string;
        LogoAlignment?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * HardwareProfileScanner entity interface.
     */
    interface HardwareProfileScanner {
        ProfileId?: string;
        DeviceTypeValue?: number;
        DeviceName?: string;
        DeviceDescription?: string;
        DecodeData?: boolean;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * HardwareProfileCashDrawer entity interface.
     */
    interface HardwareProfileCashDrawer {
        ProfileId?: string;
        DeviceTypeValue?: number;
        DeviceName?: string;
        DeviceDescription?: string;
        DeviceMake?: string;
        DeviceModel?: string;
        IsSharedShiftDrawer?: boolean;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * TillLayout entity interface.
     */
    interface TillLayout {
        CashChangerLayoutXml?: string;
        CustomerLayoutId?: string;
        CustomerLayoutXml?: string;
        Height?: number;
        LayoutId?: string;
        LayoutTypeValue?: number;
        LayoutXml?: string;
        LayoutXmlPortrait?: string;
        Name?: string;
        ReceiptId?: string;
        ReceiptItemsLayoutXml?: string;
        ReceiptPaymentLayoutXml?: string;
        TotalId?: string;
        TotalsLayoutXml?: string;
        Width?: number;
        RecordId?: number;
        StartScreen?: number;
        ButtonGridZones?: Entities.ButtonGridZone[];
        ImageZones?: Entities.ImageZone[];
        ReportZones?: Entities.ReportZone[];
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * SalesInvoice entity interface.
     */
    interface SalesInvoice {
        RecordId?: number;
        Id?: string;
        SalesId?: string;
        SalesType?: string;
        InvoiceDate?: Date;
        CurrencyCode?: string;
        Amount?: number;
        AmountPaid?: number;
        Account?: string;
        Name?: string;
        TotalManualDiscountPercentage?: number;
        TotalManualDiscountAmount?: number;
        SalesInvoiceLine?: Entities.SalesInvoiceLine[];
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * OrderInvoice entity interface.
     */
    interface OrderInvoice {
        Id?: string;
        CustomerAccountNumber?: string;
        CustomerName?: string;
        InvoiceDate?: Date;
        TotalAmount?: number;
        AmountPaid?: number;
        AmountBalance?: number;
        InvoiceTypeValue?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * TaxOverride entity interface.
     */
    interface TaxOverride {
        Code?: string;
        SourceTaxGroup?: string;
        DestinationTaxGroup?: string;
        SourceItemTaxGroup?: string;
        DestinationItemTaxGroup?: string;
        ChannelId?: number;
        AdditionalDescription?: string;
        Status?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * TenderType entity interface.
     */
    interface TenderType {
        Function: number;
        TenderTypeId?: string;
        Name?: string;
        OperationId?: number;
        OperationName?: string;
        ChangeTenderTypeId?: string;
        AboveMinimumChangeAmount?: number;
        AboveMinimumChangeTenderTypeId?: string;
        OpenDrawer?: boolean;
        UseSignatureCaptureDevice?: boolean;
        MinimumSignatureCaptureAmount?: number;
        IsOvertenderAllowed?: boolean;
        IsUndertenderAllowed?: boolean;
        MaximumOvertenderAmount?: number;
        MaximumUndertenderAmount?: number;
        MaximumAmountPerTransaction?: number;
        MaximumAmountPerLine?: number;
        MinimumAmountPerTransaction?: number;
        MinimumAmountPerLine?: number;
        RoundOff?: number;
        CountingRequired?: number;
        TakenToBank?: number;
        TakenToSafe?: number;
        ConnectorId?: string;
        GiftCardItem?: string;
        GiftCardCashoutOutThreshold?: number;
        ChangeLineOnReceipt?: string;
        HideCardInputDetails?: boolean;
        CashDrawerLimitEnabled?: boolean;
        CashDrawerLimit?: number;
        RestrictReturnsWithoutReceipt?: boolean;
        HasTenderDiscount?: boolean;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ReasonCode entity interface.
     */
    interface ReasonCode {
        InputRequired: boolean;
        LinkedReasonCodeId?: string;
        MaximumLength: number;
        MaximumValue: number;
        MinimumLength: number;
        MinimumValue: number;
        OncePerTransaction: boolean;
        PrintInputNameOnReceipt: boolean;
        PrintInputToReceipt: boolean;
        PrintPromptToReceipt: boolean;
        Prompt?: string;
        RandomFactor: number;
        RetailUseReasonCode: boolean;
        ReasonCodeId?: string;
        Description?: string;
        InputTypeValue?: number;
        ActivityValue?: number;
        IsMultiLineText?: boolean;
        ReasonSubCodes?: Entities.ReasonSubCode[];
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ReportDataSet entity interface.
     */
    interface ReportDataSet {
        ReportId?: string;
        Parameters?: Entities.CommerceProperty[];
        Locale?: string;
        Output?: Entities.ReportRow[];
        HasTotalRow?: boolean;
        HasDisclaimer?: boolean;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ZipCodeInfo entity interface.
     */
    interface ZipCodeInfo {
        ZipPostalCode?: string;
        StreetName?: string;
        TimeZone?: number;
        CountryRegionId?: string;
        StateId?: string;
        CountyId?: string;
        CityName?: string;
        CityAlias?: string;
        District?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ReasonCodeRequirement entity interface.
     */
    interface ReasonCodeRequirement {
        ReasonCodeId?: string;
        SourceId?: string;
        TableRefTypeValue?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * QueryResultSettings entity interface.
     */
    interface QueryResultSettings {
        Paging?: Entities.PagingInfo;
        Sorting?: Entities.SortingInfo;
    }
    /**
     * SortingInfo entity interface.
     */
    interface SortingInfo {
        Columns?: Entities.SortColumn[];
    }
    /**
     * SortColumn entity interface.
     */
    interface SortColumn {
        ColumnName?: string;
        IsDescending?: boolean;
    }
    /**
     * PagingInfo entity interface.
     */
    interface PagingInfo {
        Top?: number;
        Skip?: number;
    }
    /**
     * ProductPropertyTranslation entity interface.
     */
    interface ProductPropertyTranslation {
        TranslationLanguage?: string;
        TranslatedProperties?: Entities.ProductProperty[];
    }
    /**
     * NumberSequenceSeedData entity interface.
     */
    interface NumberSequenceSeedData {
        DataTypeValue?: number;
        DataValue?: number;
        LastTransactionDataValue?: number;
        LastTransactionCreatedDateTime?: Date;
        LastTransactionId?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ReceiptNumberResetInfo entity interface.
     */
    interface ReceiptNumberResetInfo {
        ValidFrom?: Date;
        ValidTo?: Date;
        ResetDate?: Date;
        TypeValue?: number;
        Enabled?: boolean;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * DeviceActivationResult entity interface.
     */
    interface DeviceActivationResult {
        Device?: Entities.Device;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * PurchaseHistory entity interface.
     */
    interface PurchaseHistory {
        DatePurchased?: Date;
        ImageUrl?: string;
        ItemId?: string;
        ProductId?: number;
        ProductName?: string;
        ReceiptId?: string;
        SalesId?: string;
        ChannelId?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * Node entity interface.
     */
    interface Node {
        ParentScopeId?: string;
        ParentSequence?: number;
        Id?: string;
        Sequence?: number;
        Description?: string;
        ScreenshotUri?: string;
    }
    /**
     * Line entity interface.
     */
    interface Line {
        ChildrenIds?: number[];
        Id?: number;
        Name?: string;
        Description?: string;
        IsLinked?: boolean;
        LineMetadataId?: number;
        Artifacts?: Entities.ArtifactSummary[];
        MetadataPropertyValues?: Entities.MetadataPropertyValue[];
    }
    /**
     * Scope entity interface.
     */
    interface Scope extends Node {
        Name?: string;
        ScopeTypeValue: number;
        Children?: Entities.Node[];
        ActiveCount: number;
        IsForm?: boolean;
    }
    /**
     * Framework entity interface.
     */
    interface Framework {
        Lines?: Entities.Line[];
        Id?: number;
        Name?: string;
        Access?: string;
        Hierarchy?: Entities.Line[];
        Publisher?: string;
    }
    /**
     * UserAction entity interface.
     */
    interface UserAction extends Node {
        SystemGenerated?: boolean;
        GlobalId?: string;
        Annotations?: Entities.Annotation[];
    }
    /**
     * TaskUserAction entity interface.
     */
    interface TaskUserAction extends UserAction {
        UserActionTypeValue: number;
        Name?: string;
        Comment?: string;
        TaskId?: string;
    }
    /**
     * FormUserAction entity interface.
     */
    interface FormUserAction extends UserAction {
        FormId?: string;
        ControlLabel?: string;
    }
    /**
     * CommandUserAction entity interface.
     */
    interface CommandUserAction extends FormUserAction {
        ReturnTypeValue: number;
        CommandName?: string;
        ControlName?: string;
        ControlType?: string;
        Arguments?: Entities.CommandArgument[];
        LabelId?: string;
        ReturnValue?: string;
    }
    /**
     * Annotation entity interface.
     */
    interface Annotation {
        Description?: string;
    }
    /**
     * Recording entity interface.
     */
    interface Recording {
        Scopes?: Entities.Scope[];
        FormContextEntries?: Entities.FormContextDictionaryEntry[];
        RootScope?: Entities.Scope;
        Name?: string;
        Description?: string;
    }
    /**
     * FormContextDictionaryEntry entity interface.
     */
    interface FormContextDictionaryEntry {
        FormId?: string;
        FormContext?: Entities.FormContext;
    }
    /**
     * ProductVariantResolutionContext entity interface.
     */
    interface ProductVariantResolutionContext {
    }
    /**
     * ProductVariantResolutionOnKitSelectionContext entity interface.
     */
    interface ProductVariantResolutionOnKitSelectionContext extends ProductVariantResolutionContext {
        SelectedComponents?: Entities.ComponentInSlotRelation[];
        SlotId?: number;
    }
    /**
     * WarehouseLocation entity interface.
     */
    interface WarehouseLocation {
        LocationId?: string;
        IsLicensePlateControlled: boolean;
        ProfileId?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * FiscalTransaction entity interface.
     */
    interface FiscalTransaction {
        CreatedDateTime?: Date;
        StoreId?: string;
        TerminalId?: string;
        TransactionId?: string;
        TransDateTime?: Date;
        LineNumber?: number;
        RegisterResponse?: string;
        ReceiptCopy?: boolean;
        RecordGUID?: string;
        RegisterStoreId?: string;
        RegisterTerminalId?: string;
        StaffId?: string;
        RegistrationStatusValue?: number;
        RegistrationProcessId?: string;
        ConnectorGroup?: string;
        ConnectorName?: string;
        ConnectorFunctionalityProfileId?: string;
        RegisterInfo?: string;
        DocumentNumber?: string;
        RegistrationTypeValue?: number;
        ServiceName?: string;
        CountryRegionIsoCode?: string;
        TenderLineAdjustments?: Entities.FiscalTransactionTenderLineAdjustment[];
        SalesLineAdjustments?: Entities.FiscalTransactionSalesLineAdjustment[];
        ReasonCodeLines?: Entities.ReasonCodeLine[];
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * FulfillmentLine entity interface.
     */
    interface FulfillmentLine {
        SalesId?: string;
        SalesPersonStoreId?: string;
        SalesPersonId?: string;
        SalesPersonFirstName?: string;
        SalesPersonLastName?: string;
        SalesLineNumber?: number;
        ReceiptId?: string;
        ChannelReferenceId?: string;
        CustomerId?: string;
        CustomerName?: string;
        EmailAddress?: string;
        DeliveryModeCode?: string;
        DocumentStatusValue?: number;
        FulfillmentDeliveryType?: Entities.FulfillmentLineDeliveryType;
        DeliveryTypeValue?: number;
        QuantityOrdered?: number;
        QuantityPicked?: number;
        QuantityPacked?: number;
        QuantityInvoiced?: number;
        StoreInventoryTotalQuantity?: number;
        StoreInventoryReservedQuantity?: number;
        StoreInventoryOrderedQuantity?: number;
        ItemId?: string;
        ProductId?: number;
        ProductVariant?: string;
        ItemName?: string;
        FulfillmentStatus?: Entities.FulfillmentLineStatus;
        FulfillmentStatusValue?: number;
        UnitOfMeasureSymbol?: string;
        RequestedShipDate?: Date;
        RequestedDeliveryDate?: Date;
        RequestedReceiptDate?: Date;
        CreatedDate?: Date;
        TotalAmount?: number;
        Balance?: number;
        ShippingAddress?: Entities.Address;
        DetailedOrderStatusValue?: number;
        DetailedLineStatusValue?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * FulfillmentLineSearchCriteria entity interface.
     */
    interface FulfillmentLineSearchCriteria {
        CustomerId?: string;
        CustomerName?: string;
        EmailAddress?: string;
        SalesId?: string;
        OrderCreatedStartDate?: Date;
        OrderCreatedEndDate?: Date;
        ReceiptId?: string;
        StoreId?: string;
        ChannelReferenceId?: string;
        RequestedReceiptStartDate?: Date;
        RequestedReceiptEndDate?: Date;
        RequestedDeliveryStartDate?: Date;
        RequestedDeliveryEndDate?: Date;
        FulfillmentStatusValues?: number[];
        DeliveryModeCode?: string;
        WarehouseId?: string;
        LoyaltyCardNumber?: string;
        CustomerPhoneNumber?: string;
        DeliveryTypeValue?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * Comment entity interface.
     */
    interface Comment {
        RecordId?: number;
        AuthorStaffId?: string;
        AuthorName?: string;
        Text?: string;
        CreatedDateTime?: Date;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * AddressPurpose entity interface.
     */
    interface AddressPurpose {
        RecordId: number;
        AddressType: number;
        Name?: string;
        Description?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * DeliveryChargeLine entity interface.
     */
    interface DeliveryChargeLine {
        ChargeCode?: string;
        CurrencyCode?: string;
        CalculatedAmount: number;
        Description?: string;
        IsRefundable: boolean;
        IsShipping: boolean;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ExtensionPackageDefinition entity interface.
     */
    interface ExtensionPackageDefinition {
        Name?: string;
        Publisher?: string;
        IsEnabled: boolean;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ReturnPolicy entity interface.
     */
    interface ReturnPolicy {
        RecordId: number;
        TenderTypePolicies?: Entities.TenderTypePolicy[];
        IsManagerOverrideEnabled: boolean;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * TenderTypeAmount entity interface.
     */
    interface TenderTypeAmount {
        TenderTypeId?: string;
        Amount: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * FeatureState entity interface.
     */
    interface FeatureState {
        Name?: string;
        IsEnabled?: boolean;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * Warranty entity interface.
     */
    interface Warranty extends SimpleProduct {
        DurationUnitValue?: number;
        Duration?: number;
        ApplicablePriceRangeBaseTypeValue?: number;
        ApplicablePriceRangeMin?: number;
        ApplicablePriceRangeMax?: number;
    }
    /**
     * WarrantyGroup entity interface.
     */
    interface WarrantyGroup {
        Warranties?: Entities.Warranty[];
        RecordId?: number;
        GroupName?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ProductWarrantiesMapping entity interface.
     */
    interface ProductWarrantiesMapping {
        WarrantyGroups?: Entities.WarrantyGroup[];
        WarrantableProductId?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * FulfillmentLineContextualOperationsMap entity interface.
     */
    interface FulfillmentLineContextualOperationsMap {
        FulfillmentLine?: Entities.FulfillmentLine;
        ApplicableOperationsValues?: number[];
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * BusinessPartnerProspect entity interface.
     */
    interface BusinessPartnerProspect {
        FirstName?: string;
        LastName?: string;
        CompanyName?: string;
        Address?: Entities.Address;
        JobTitle?: string;
        Department?: string;
        CompanySize?: number;
        Comments?: string;
        LastOperationId?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ChecklistTask entity interface.
     */
    interface ChecklistTask {
        Version?: string;
        AssignedToPersonnelNumbers?: string[];
        Id?: string;
        Name?: string;
        Description?: string;
        DueDateTime?: Date;
        DeepLinkTypeValue?: number;
        DeepLink?: string;
        DeepLinkPosOperationName?: string;
        ContactPersonPersonnelNumber?: string;
        Instructions?: string;
        StatusValue?: number;
        CompletionDateTime?: Date;
        ResolvedByPersonnelNumber?: string;
        ChecklistId?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * MediaLocation entity interface.
     */
    interface MediaLocation {
        Uri?: string;
        AltText?: string;
        IsDefault?: boolean;
        IsSelfHosted?: boolean;
        Priority?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * EmployeeActivity entity interface.
     */
    interface EmployeeActivity {
        StaffId?: string;
        StaffName?: string;
        Activity?: string;
        ActivityDateTimeOffset?: Date;
        StoreNumber?: string;
        EmployeeActivityTypeValue?: number;
        BreakCategory?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * TokenizedPaymentCard entity interface.
     */
    interface TokenizedPaymentCard {
        IsSwipe?: boolean;
        TenderType?: string;
        CardTokenInfo?: Entities.CardTokenInfo;
        Phone?: string;
        Country?: string;
        House?: string;
        Address1?: string;
        Address2?: string;
        City?: string;
        State?: string;
        Zip?: string;
        NameOnCard?: string;
        CardTypeId?: string;
        ExpirationMonth?: number;
        ExpirationYear?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * LineShippingAddress entity interface.
     */
    interface LineShippingAddress {
        LineId?: string;
        ShippingAddress?: Entities.Address;
    }
    /**
     * CartDeliveryPreferences entity interface.
     */
    interface CartDeliveryPreferences {
        HeaderDeliveryPreferenceTypeValues?: number[];
        CartLineDeliveryPreferences?: Entities.CartLineDeliveryPreference[];
    }
    /**
     * LineDeliverySpecification entity interface.
     */
    interface LineDeliverySpecification {
        LineId?: string;
        DeliverySpecification?: Entities.DeliverySpecification;
    }
    /**
     * DeliverySpecification entity interface.
     */
    interface DeliverySpecification {
        DeliveryModeId?: string;
        DeliveryPreferenceTypeValue?: number;
        DeliveryAddress?: Entities.Address;
        PickUpStoreId?: string;
        ElectronicDeliveryEmailAddress?: string;
        ElectronicDeliveryEmailContent?: string;
        ShipFromStoreId?: string;
    }
    /**
     * OrderSearchCriteria entity interface.
     */
    interface OrderSearchCriteria {
        CustomerAccountNumber?: string;
        CustomerName?: string;
        EmailAddress?: string;
        LoyaltyCardNumber?: string;
        CustomerPhoneNumber?: string;
        SalesId?: string;
        ReceiptId?: string;
        OrderStatusValues?: number[];
        StartDateTime?: Date;
        EndDateTime?: Date;
        ChannelReferenceId?: string;
        StoreId?: string;
        OrderType?: number;
        CustomFilters?: Entities.SearchFilter[];
    }
    /**
     * ChecklistSearchCriteria entity interface.
     */
    interface ChecklistSearchCriteria {
        ChannelId?: number;
        PersonnelNumber?: string;
        ChecklistIds?: string[];
        StatusValues?: number[];
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * TaskSearchCriteria entity interface.
     */
    interface TaskSearchCriteria {
        ChannelId?: number;
        PersonnelNumber?: string;
        TaskIds?: string[];
        StatusValues?: number[];
        FilterMyTasks: boolean;
        FilterOverdueTasks: boolean;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * TenderDiscountLine entity interface.
     */
    interface TenderDiscountLine {
        DiscountAmount?: number;
        PaymentAmount?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ReceiptRetrievalCriteria entity interface.
     */
    interface ReceiptRetrievalCriteria {
        IsCopy?: boolean;
        IsRemoteTransaction?: boolean;
        IsPreview?: boolean;
        QueryBySalesId?: boolean;
        ReceiptTypeValue?: number;
        ShiftId?: number;
        ShiftTerminalId?: string;
        HardwareProfileId?: string;
    }
    /**
     * CartSearchCriteria entity interface.
     */
    interface CartSearchCriteria {
        CartId?: string;
        ExpectedCartVersion?: number;
        CustomerAccountNumber?: string;
        IncludeAnonymous?: boolean;
        SuspendedOnly?: boolean;
        CartTypeValue?: number;
        LastModifiedDateTimeFrom?: Date;
        LastModifiedDateTimeTo?: Date;
    }
    /**
     * RetrievePaymentResultSettings entity interface.
     */
    interface RetrievePaymentResultSettings {
        ReturnUrl?: string;
    }
    /**
     * SearchReceiptCriteria entity interface.
     */
    interface SearchReceiptCriteria {
        TransactionId?: string;
        ReceiptTypeValue?: number;
    }
    /**
     * ElectronicAddress entity interface.
     */
    interface ElectronicAddress {
        AddressTypeValue?: number;
        Address?: string;
    }
    /**
     * FulfillmentLineParameter entity interface.
     */
    interface FulfillmentLineParameter {
        SalesId?: string;
        SalesLineNumber?: number;
        Quantity?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ShipFulfillmentLine entity interface.
     */
    interface ShipFulfillmentLine extends FulfillmentLineParameter {
        ProductId?: number;
    }
    /**
     * RejectFulfillmentLine entity interface.
     */
    interface RejectFulfillmentLine extends FulfillmentLineParameter {
        RejectedQuantity?: number;
        InfoCodeId?: string;
        SubInfoCodeId?: string;
    }
    /**
     * ReadChangedProductsSession entity interface.
     */
    interface ReadChangedProductsSession {
        Id?: string;
        TotalNumberOfProducts?: number;
        NumberOfProductsRead?: number;
        NumberOfProductsReadInCurrentPage?: number;
        NextSynchronizationToken?: string;
        IsInitialSync?: boolean;
    }
    /**
     * DeletedListingsResult entity interface.
     */
    interface DeletedListingsResult {
        HasMorePublishedListings?: boolean;
        DeletedListings?: Entities.ListingIdentity[];
    }
    /**
     * ProductRating entity interface.
     */
    interface ProductRating {
        ProductId?: number;
        AverageRating?: number;
        TotalRatings?: number;
        RatingDistribution?: Entities.ProductRatingCount[];
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ProductDeliveryOptions entity interface.
     */
    interface ProductDeliveryOptions {
        ProductId?: number;
        DeliveryOptions?: Entities.DeliveryOption[];
    }
    /**
     * ListingPublishStatus entity interface.
     */
    interface ListingPublishStatus {
        PublishStatusValue?: number;
        ListingModifiedDateTime?: Date;
        ChannelListingId?: string;
        ChannelId?: number;
        CatalogId?: number;
        ProductId?: number;
        LanguageId?: string;
        AppliedActionValue?: number;
        StatusMessage?: string;
        Tag?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * OrgUnitLocationSearchCriteria entity interface.
     */
    interface OrgUnitLocationSearchCriteria {
        OrgUnitNumber?: string;
        OrgUnitName?: string;
        InventoryLocationIds?: string[];
        DeliveryModeTypeFilterValue?: number;
    }
    /**
     * StoreHours entity interface.
     */
    interface StoreHours {
        RegularStoreHours?: Entities.RegularStoreHours;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * CartPromotions entity interface.
     */
    interface CartPromotions {
        HeaderPromotions?: string[];
        CartLinePromotions?: Entities.CartLinePromotion[];
    }
    /**
     * CartPromotionLine entity interface.
     */
    interface CartPromotionLine {
        LineId?: string;
        Promotion?: Entities.Promotion;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ItemUnit entity interface.
     */
    interface ItemUnit {
        ItemId?: string;
        VariantInventoryDimensionId?: string;
        Product?: number;
        DistinctProductVariant?: number;
        UnitOfMeasure?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ProductAvailableQuantity entity interface.
     */
    interface ProductAvailableQuantity {
        ProductId?: number;
        AvailableQuantity?: number;
        UnitOfMeasure?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * OrgUnitAvailabilitySearchCriteria entity interface.
     */
    interface OrgUnitAvailabilitySearchCriteria {
        OrgUnitName?: string;
        OrgUnitNumber?: string;
    }
    /**
     * InvoiceSearchCriteria entity interface.
     */
    interface InvoiceSearchCriteria {
        CustomerId?: string;
        InvoiceIds?: string[];
        InvoiceTypeValues?: number[];
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * PickAndPackSalesLineParameter entity interface.
     */
    interface PickAndPackSalesLineParameter {
        SalesLineNumber?: number;
        Quantity?: number;
    }
    /**
     * ProductListSearchCriteria entity interface.
     */
    interface ProductListSearchCriteria {
        CustomerId?: string;
        ProductListId?: string;
    }
    /**
     * ProjectionDomain entity interface.
     */
    interface ProjectionDomain {
        ChannelId?: number;
        CatalogId?: number;
    }
    /**
     * AffiliationLoyaltyTier entity interface.
     */
    interface AffiliationLoyaltyTier {
        AffiliationId?: number;
        LoyaltyTierId?: number;
        AffiliationTypeValue?: number;
        ReasonCodeLines?: Entities.ReasonCodeLine[];
        CustomerId?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ClientBookCustomerSearchCriteria entity interface.
     */
    interface ClientBookCustomerSearchCriteria {
        FilterByCurrentEmployee?: boolean;
        Refinement?: Entities.ClientBookRefinerValue[];
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ClientBookCustomer entity interface.
     */
    interface ClientBookCustomer {
        CustomerId?: string;
        Name?: string;
        Phone?: string;
        Email?: string;
        StaffId?: string;
        ImageUris?: Entities.MediaLocation[];
        Attributes?: Entities.CustomerAttribute[];
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ClientBookChanges entity interface.
     */
    interface ClientBookChanges {
        Changes?: Entities.ClientBookChange[];
    }
    /**
     * ChargeCode entity interface.
     */
    interface ChargeCode {
        Code?: string;
        ModuleTypeValue?: number;
        Description?: string;
        ItemTaxGroupId?: string;
        IsRefundable?: boolean;
        IsShipping?: boolean;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * PaymentMerchantInformation entity interface.
     */
    interface PaymentMerchantInformation {
        PaymentConnectorPropertiesXml?: string;
        MerchantPropertiesHashValue?: string;
        ServiceAccountId?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * StoreSafe entity interface.
     */
    interface StoreSafe {
        SafeNumber?: string;
        Name?: string;
        StoreNumber?: string;
        SafeBalance?: number;
        LastUpdatedTime?: Date;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * CreateHardwareStationTokenResult entity interface.
     */
    interface CreateHardwareStationTokenResult {
        HardwareStationToken?: string;
        PairingKey?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ValidateHardwareStationTokenResult entity interface.
     */
    interface ValidateHardwareStationTokenResult {
        PairingKey?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * TerminalDataDownloadRequestInfo entity interface.
     */
    interface TerminalDataDownloadRequestInfo {
        TerminalId?: string;
        RequiresDataInitialization?: boolean;
    }
    /**
     * DataDownloadParameters entity interface.
     */
    interface DataDownloadParameters {
        DownloadInterval?: number;
        DownloadSessions?: Entities.DownloadSession[];
        FeatureControlList?: Entities.RetailSharedConfigurationParameter[];
        DataStore?: Entities.CDXDataStore;
    }
    /**
     * TerminalDataUploadRequestInfo entity interface.
     */
    interface TerminalDataUploadRequestInfo {
        TerminalId?: string;
    }
    /**
     * DataUploadParameters entity interface.
     */
    interface DataUploadParameters {
        UploadInterval?: number;
        UploadJobPackageRequests?: Entities.UploadJobPackageRequest[];
        FeatureControlList?: Entities.RetailSharedConfigurationParameter[];
        DataStore?: Entities.CDXDataStore;
    }
    /**
     * DownloadSession entity interface.
     */
    interface DownloadSession {
        Id?: number;
        JobId?: string;
        JobDescription?: string;
        FileSize?: number;
        RowsAffected?: number;
        Checksum?: string;
        DateDownloaded?: string;
        DateRequested?: string;
        DataStoreName?: string;
        StatusValue?: number;
        Message?: string;
        DownloadLink?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * LoyaltyRewardPointActivity entity interface.
     */
    interface LoyaltyRewardPointActivity {
        ActivityDate?: Date;
        LoyaltyRewardPointTimelineEntryType?: string;
        ExtensibleLoyaltyRewardPointActivityEntryTypeValue?: number;
        LoyaltyPoints?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * CurrencyRequest entity interface.
     */
    interface CurrencyRequest {
        AmountToConvert?: number;
        CurrencyCode?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * HardwareStationProfile entity interface.
     */
    interface HardwareStationProfile {
        RecordId?: number;
        HardwareStationId?: string;
        HardwareStationTypeValue?: number;
        HardwareProfileId?: string;
        HardwareStationName?: string;
        HardwareStationDescription?: string;
        HardwareStationUrl?: string;
        HardwareStationHostName?: string;
        HardwareStationEftTerminalId?: string;
        HardwareConfigurations?: Entities.HardwareConfigurations;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * NameValuePair entity interface.
     */
    interface NameValuePair {
        Name?: string;
        Value?: string;
    }
    /**
     * LinkToExistingCustomerResult entity interface.
     */
    interface LinkToExistingCustomerResult {
        EmailAddress?: string;
        ExternalIdentityProvider?: string;
        ExternalIdentityLinkRecordId?: number;
    }
    /**
     * OfflineSyncStatsLine entity interface.
     */
    interface OfflineSyncStatsLine {
        IsUploadJob?: boolean;
        JobDescription?: string;
        LastSyncDateTime?: Date;
        Status?: string;
        FileSize?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * StorageAccessToken entity interface.
     */
    interface StorageAccessToken {
        Url?: string;
        SasKey?: string;
    }
    /**
     * TaskGuidesSearchResult entity interface.
     */
    interface TaskGuidesSearchResult {
        Lines?: Entities.Line[];
        FrameworkPublisherName?: string;
        FrameworkName?: string;
    }
    /**
     * AuditEvent entity interface.
     */
    interface AuditEvent {
        EventId?: number;
        EventIdString?: string;
        Channel?: number;
        Store?: string;
        Terminal?: string;
        UploadType?: string;
        EventType?: string;
        DurationInMilliseconds?: number;
        Source?: string;
        EventMessage?: string;
        LogLevel?: string;
        Staff?: string;
        ShiftId?: number;
        ReferenceId?: number;
        RefChannel?: number;
        RefStore?: string;
        RefTerminal?: string;
        RefTransactionId?: string;
        AuditEventTypeValue?: number;
        FiscalTransactions?: Entities.AuditEventFiscalTransaction[];
        FiscalRegistrationLines?: Entities.AuditEventFiscalRegistrationLine[];
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ItemAvailability entity interface.
     */
    interface ItemAvailability {
        ItemId?: string;
        VariantInventoryDimensionId?: string;
        InventoryLocationId?: string;
        ProductId?: number;
        AvailableQuantity?: number;
        OrderedSum?: number;
        PhysicalReserved?: number;
        UnitOfMeasure?: string;
        InventoryUnitOfMeasure?: string;
        InventoryUnitOfMeasureDescription?: string;
        ProductDimensions?: Entities.ProductDimension[];
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * InventoryAvailableToPromise entity interface.
     */
    interface InventoryAvailableToPromise extends ItemAvailability {
        Date?: string;
    }
    /**
     * NotificationItem entity interface.
     */
    interface NotificationItem {
        Action?: number;
        ActionName?: string;
        NotificationDetails?: Entities.NotificationDetail[];
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * FiscalIntegrationDocumentRetrievalCriteria entity interface.
     */
    interface FiscalIntegrationDocumentRetrievalCriteria {
        TransactionId?: string;
        IsRemoteTransaction?: boolean;
        QueryBySalesId?: boolean;
        FiscalRegistrationEventTypeValue?: number;
        ShiftId?: number;
        ShiftTerminalId?: string;
        DocumentContext?: Entities.FiscalIntegrationDocumentContext;
    }
    /**
     * FiscalIntegrationDocument entity interface.
     */
    interface FiscalIntegrationDocument {
        Document?: string;
        DocumentGenerationResultTypeValue?: number;
        FiscalConnectorTechnicalProfile?: Entities.FiscalIntegrationTechnicalProfile;
        DocumentAdjustment?: Entities.FiscalIntegrationDocumentAdjustment;
        SequentialSignatureDataContext?: Entities.FiscalIntegrationSignatureDataContext;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * FiscalIntegrationRegistrationResult entity interface.
     */
    interface FiscalIntegrationRegistrationResult {
        TransactionID?: string;
        AuditEventId?: string;
        Response?: string;
        SubmittedDocument?: string;
        RegisterInfo?: string;
        RegistrationStatusValue?: number;
        FiscalRegistrationEventTypeValue?: number;
        DocumentAdjustment?: Entities.FiscalIntegrationDocumentAdjustment;
        ReasonCodeLines?: Entities.ReasonCodeLine[];
        SequentialSignatureData?: Entities.FiscalIntegrationSequentialSignatureData;
    }
    /**
     * FiscalIntegrationRegistrationProcess entity interface.
     */
    interface FiscalIntegrationRegistrationProcess {
        RecordId?: number;
        RegistrationProcessId?: string;
        Description?: string;
        RegistrationProcessLines?: Entities.FiscalIntegrationRegistrationProcessLine[];
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * FiscalIntegrationSupportedEvents entity interface.
     */
    interface FiscalIntegrationSupportedEvents {
        FunctionalityProfileGroupId?: string;
        SupportedFiscalEventTypes?: number[];
        SupportedNonFiscalEventTypes?: number[];
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * FiscalIntegrationTechnicalProfile entity interface.
     */
    interface FiscalIntegrationTechnicalProfile {
        ProfileId?: string;
        Description?: string;
        ConnectorName?: string;
        ConnectorTypeValue?: number;
        TechnicalProfile?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * FiscalIntegrationTechnicalProfileSearchCriteria entity interface.
     */
    interface FiscalIntegrationTechnicalProfileSearchCriteria {
        ExcludeOptionalProcessLines?: boolean;
        FunctionalityProfileGroupIds?: string[];
    }
    /**
     * FiscalIntegrationServiceInfo entity interface.
     */
    interface FiscalIntegrationServiceInfo {
        ServiceName?: string;
        ServiceProperties?: string;
    }
    /**
     * FiscalIntegrationServiceStatus entity interface.
     */
    interface FiscalIntegrationServiceStatus {
        IsReady?: boolean;
    }
    /**
     * FiscalIntegrationServiceCommunicationResult entity interface.
     */
    interface FiscalIntegrationServiceCommunicationResult {
        Response?: string;
        CommunicationResultTypeValue?: number;
        FailureDetails?: Entities.FiscalIntegrationServiceFailureDetails;
        FiscalIntegrationServiceInfo?: string;
        UserNotificationMessage?: string;
    }
    /**
     * FiscalIntegrationSequentialSignatureData entity interface.
     */
    interface FiscalIntegrationSequentialSignatureData {
        LastRegisterResponse?: string;
        SequenceKey?: string;
        IsOffline?: boolean;
        SequentialNumber?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * DiscountsSearchCriteria entity interface.
     */
    interface DiscountsSearchCriteria {
        ChannelId?: number;
        Keyword?: string;
        IsDiscountCodeRequired?: boolean;
        StartDate?: Date;
        EndDate?: Date;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * Promotion entity interface.
     */
    interface Promotion {
        OfferId?: string;
        OfferName?: string;
        PeriodicDiscountTypeValue?: number;
        IsDiscountCodeRequired?: boolean;
        ValidationPeriodId?: string;
        AdditionalRestrictions?: string;
        Description?: string;
        ValidFromDate?: Date;
        ValidToDate?: Date;
        ValidationPeriod?: Entities.ValidationPeriod;
        CouponCodes?: string[];
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * CategoryPathLookup entity interface.
     */
    interface CategoryPathLookup {
        ProductId?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * CategoryPathResult entity interface.
     */
    interface CategoryPathResult {
        ProductId?: number;
        CategoryPath?: Entities.CategoryPath[];
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ExtensionProfile entity interface.
     */
    interface ExtensionProfile {
        ExtensionServiceUrl?: string;
        AttachedServices?: Entities.AttachedService[];
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ChannelInventoryConfiguration entity interface.
     */
    interface ChannelInventoryConfiguration {
        RecordId?: number;
        ChannelId?: string;
        AllowTransferOrderOverDelivery?: boolean;
        AllowTransferOrderUnderDelivery?: boolean;
        UserLocationProfileId?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ShiftRetrievalCriteria entity interface.
     */
    interface ShiftRetrievalCriteria {
        ShiftStatusValue?: number;
        FilterByUserRole?: boolean;
        IncludeAllShiftsForStore?: boolean;
    }
    /**
     * MediaBlob entity interface.
     */
    interface MediaBlob {
        MediaType?: string;
        Content?: string;
        IsDefault?: boolean;
        AltText?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * TerminalInfo entity interface.
     */
    interface TerminalInfo {
        TerminalId?: string;
        DeviceNumber?: string;
        Name?: string;
        DeviceType?: number;
        ActivationStatusValue?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * CustomerTimelineItemTypeMap entity interface.
     */
    interface CustomerTimelineItemTypeMap {
        EntityType?: string;
        Types?: Entities.CustomerTimelineItemType[];
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * CustomerTimelineRefiner entity interface.
     */
    interface CustomerTimelineRefiner {
        RefinedResultsCount?: number;
        EntityType?: string;
        TypeId?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * CustomerTitle entity interface.
     */
    interface CustomerTitle {
        Text?: string;
        RecordId?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ProductWarehouse entity interface.
     */
    interface ProductWarehouse {
        ProductId?: number;
        InventLocationId?: string;
        DataAreaId?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ProductWarehouseInventoryInformation entity interface.
     */
    interface ProductWarehouseInventoryInformation {
        ProductWarehouseInventoryAvailabilities?: Entities.ProductWarehouseInventoryAvailability[];
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * InventoryAvailabilitySearchCriteria entity interface.
     */
    interface InventoryAvailabilitySearchCriteria {
        ProductIds?: number[];
        DefaultWarehouseOnly?: boolean;
        SearchArea?: Entities.SearchArea;
        FilterByChannelFulfillmentGroup?: boolean;
        DataLevelValue?: number;
    }
    /**
     * ExtensibleEnumerationContainer entity interface.
     */
    interface ExtensibleEnumerationContainer {
        TypeName?: string;
        ExtensibleEnumerations?: Entities.ExtensibleEnumeration[];
    }
    /**
     * PackingSlipData entity interface.
     */
    interface PackingSlipData {
        PackingSlipId?: string;
        CreatedDateTime?: Date;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * OrgUnitAddress entity interface.
     */
    interface OrgUnitAddress extends Address {
    }
    /**
     * WarehouseDetails entity interface.
     */
    interface WarehouseDetails extends Address {
        InventoryLocationId?: string;
    }
    /**
     * AttributeBooleanValue entity interface.
     */
    interface AttributeBooleanValue extends AttributeValueBase {
        Value?: boolean;
    }
    /**
     * AttributeCurrencyValue entity interface.
     */
    interface AttributeCurrencyValue extends AttributeValueBase {
        CurrencyValue?: number;
        CurrencyCode?: string;
    }
    /**
     * AttributeDateTimeOffsetValue entity interface.
     */
    interface AttributeDateTimeOffsetValue extends AttributeValueBase {
        Value?: Date;
    }
    /**
     * AttributeFloatValue entity interface.
     */
    interface AttributeFloatValue extends AttributeValueBase {
        Value?: number;
        UnitSymbol?: string;
    }
    /**
     * AttributeIntValue entity interface.
     */
    interface AttributeIntValue extends AttributeValueBase {
        Value?: number;
        UnitSymbol?: string;
    }
    /**
     * AttributeMediaLocationValue entity interface.
     */
    interface AttributeMediaLocationValue extends AttributeValueBase {
        Value?: Entities.MediaLocation[];
    }
    /**
     * AttributeTextValue entity interface.
     */
    interface AttributeTextValue extends AttributeValueBase {
        TextValue?: string;
        TextValueTranslations?: Entities.TextValueTranslation[];
    }
    /**
     * ButtonGridButton entity interface.
     */
    interface ButtonGridButton {
        Action?: number;
        ActionProperty?: string;
        BackColorAsARGB?: Entities.ARGBColor;
        BorderColorAsARGB?: Entities.ARGBColor;
        Column?: number;
        ColumnSpan?: number;
        DisplayText?: string;
        FontColorAsARGB?: Entities.ARGBColor;
        ButtonId?: number;
        Row?: number;
        RowSpan?: number;
        UseCustomLookAndFeel?: boolean;
        PictureAsBase64?: string;
        FontStyle?: number;
        FontSize?: number;
        EnableCustomFontForPOS?: boolean;
        HideButtonText?: boolean;
        Tooltip?: string;
        EnableLiveContent?: boolean;
        NotificationContentAlignment?: number;
        ImageAlignment?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ARGBColor entity interface.
     */
    interface ARGBColor {
        A?: number;
        R?: number;
        G?: number;
        B?: number;
    }
    /**
     * ExtensiblePeriodicDiscountOfferType entity interface.
     */
    interface ExtensiblePeriodicDiscountOfferType extends ExtensibleEnumeration {
    }
    /**
     * ChargeLineOverride entity interface.
     */
    interface ChargeLineOverride {
        OriginalAmount?: number;
        OverrideAmount?: number;
        OverrideReasonDescription?: string;
        OverrideDateTime?: Date;
        UserId?: string;
    }
    /**
     * TaxLineGTE entity interface.
     */
    interface TaxLineGTE extends TaxLine {
        TaxComponent?: string;
    }
    /**
     * TaxMeasure entity interface.
     */
    interface TaxMeasure {
        Path?: string;
        Value?: number;
        DataAreaId?: string;
        SaleLineNumber?: number;
        StoreId?: string;
        TerminalId?: string;
        TransactionId?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * CardTokenInfo entity interface.
     */
    interface CardTokenInfo {
        CardToken?: string;
        UniqueCardId?: string;
        ServiceAccountId?: string;
        MaskedCardNumber?: string;
    }
    /**
     * ProductAttributeMetadataFlags entity interface.
     */
    interface ProductAttributeMetadataFlags {
        IsSearchable?: boolean;
        IsRetrievable?: boolean;
        IsQueryable?: boolean;
        IsRefinable?: boolean;
        IsSortable?: boolean;
        IsMultiValue?: boolean;
        IsTokenNormalization?: boolean;
        IsCompleteMatch?: boolean;
    }
    /**
     * UnitOfMeasureConversion entity interface.
     */
    interface UnitOfMeasureConversion {
        ItemId?: string;
        FromUnitOfMeasureId?: string;
        ToUnitOfMeasureId?: string;
        FromUnitOfMeasureSymbol?: string;
        ToUnitOfMeasureSymbol?: string;
        IsBackward?: boolean;
        RecordId?: number;
        ProductRecordId?: number;
        Factor?: number;
        Numerator?: number;
        Denominator?: number;
        InnerOffset?: number;
        OuterOffset?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * PriceLine entity interface.
     */
    interface PriceLine {
        RecordId?: number;
        Value?: number;
        PriceMethod?: string;
        OriginId?: string;
        PriceChangedByExtensions?: boolean;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * BasePriceLine entity interface.
     */
    interface BasePriceLine extends PriceLine {
    }
    /**
     * PriceAdjustmentPriceLine entity interface.
     */
    interface PriceAdjustmentPriceLine extends PriceLine {
        IsCompoundable?: boolean;
        Concurrency?: string;
    }
    /**
     * TradeAgreementPriceLine entity interface.
     */
    interface TradeAgreementPriceLine extends PriceLine {
    }
    /**
     * ReturnLabelContent entity interface.
     */
    interface ReturnLabelContent {
        ReturnLocationText?: string;
        ReturnWarehouseText?: string;
        ReturnReasonText?: string;
        ReturnPalleteText?: string;
        ItemId?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * LoyaltyRewardPointLine entity interface.
     */
    interface LoyaltyRewardPointLine {
        TransactionId?: string;
        SaleLineNumber?: number;
        LoyaltyGroupRecordId?: number;
        LoyaltyCardNumber?: string;
        CustomerAccount?: string;
        EntryDate?: Date;
        EntryTime?: number;
        EntryTypeValue?: number;
        ExpirationDate?: Date;
        LineNumber?: number;
        LoyaltyTierRecordId?: number;
        RewardPointRecordId?: number;
        RewardPointAmountQuantity?: number;
        RewardPointId?: string;
        RewardPointIsRedeemable?: boolean;
        RewardPointType?: string;
        RewardPointCurrency?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * TrackingInfo entity interface.
     */
    interface TrackingInfo {
        TrackingNumber?: string;
        ServiceType?: string;
        PackageWeight?: Entities.Weight;
        ShippedOnDate?: Date;
        Status?: string;
        DeliveredOnDate?: Date;
        EstimatedDeliveryDate?: Date;
        TrackingUrl?: string;
        PackagingType?: string;
        DestinationAddress?: Entities.Address;
        OriginAddress?: Entities.Address;
        ShipmentProgress?: Entities.ShipmentProgress[];
        ShippingCharge?: number;
    }
    /**
     * Weight entity interface.
     */
    interface Weight {
        Value?: number;
        Unit?: string;
    }
    /**
     * ShipmentProgress entity interface.
     */
    interface ShipmentProgress {
        Location?: Entities.Address;
        DateTime?: Date;
        Activity?: string;
    }
    /**
     * ShiftKey entity interface.
     */
    interface ShiftKey {
        ShiftTerminalId?: string;
        ShiftId?: number;
        Store?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * AddressFormattingInfo entity interface.
     */
    interface AddressFormattingInfo {
        AddressComponentNameValue?: number;
        LineNumber?: number;
        IsDataEntryOnly?: boolean;
        NewLine?: boolean;
        Expand?: boolean;
        Inactive?: boolean;
        Special?: boolean;
        NumberOfSpaces?: number;
        Separator?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ScaleUnitConfiguration entity interface.
     */
    interface ScaleUnitConfiguration {
        Id?: string;
        Name?: string;
        Region?: string;
    }
    /**
     * HardwareConfigurations entity interface.
     */
    interface HardwareConfigurations {
        CashDrawerConfigurations?: Entities.HardwareConfiguration[];
        PrinterConfigurations?: Entities.HardwareConfiguration[];
        PinPadConfiguration?: Entities.HardwareConfiguration;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * HardwareConfiguration entity interface.
     */
    interface HardwareConfiguration {
        RecordId?: number;
        HardwareStationRecordId?: number;
        TerminalId?: string;
        DeviceName?: string;
        IPAddress?: string;
        Port?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * PaymentError entity interface.
     */
    interface PaymentError {
        Code?: string;
        Message?: string;
        IsLocalized?: boolean;
    }
    /**
     * Printer entity interface.
     */
    interface Printer {
        Name?: string;
        PrinterType?: number;
        Terminal?: number;
        PrintBehaviorValue?: number;
        ReceiptLayoutId?: string;
        HardwareProfileId?: string;
        ReceiptType?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * TransferOrderJournalLine entity interface.
     */
    interface TransferOrderJournalLine {
        ItemId?: string;
        ItemName?: string;
        InventDimId?: string;
        TotalQuantityShipped?: number;
        QuantityShipped?: number;
        TransferQuantity?: number;
        UnitId?: string;
        ConfigId?: string;
        InventSizeId?: string;
        InventColorId?: string;
        InventStyleId?: string;
        DeliveryMethod?: string;
        Barcode?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * InventoryDocumentSourceSerialNumberLine entity interface.
     */
    interface InventoryDocumentSourceSerialNumberLine {
        SourceDocumentTypeValue?: number;
        SourceDocumentId?: string;
        DocumentLineRecordId?: number;
        InventTransRecordId?: number;
        LineId?: string;
        Quantity?: number;
        SerialNumber?: string;
        StatusValue?: number;
        ProductId?: number;
        DataAreaId?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * KitTransactionLine entity interface.
     */
    interface KitTransactionLine {
        ItemId?: string;
        Quantity?: number;
        InventoryDimensionId?: string;
        ProductId?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ExtensibleRetailChannelType entity interface.
     */
    interface ExtensibleRetailChannelType extends ExtensibleEnumeration {
    }
    /**
     * TenderDetail entity interface.
     */
    interface TenderDetail {
        LineNumber?: number;
        Amount?: number;
        AmountInForeignCurrency?: number;
        ForeignCurrencyExchangeRate?: number;
        ForeignCurrency?: string;
        BankBagNumber?: string;
        TenderTypeId?: string;
        TenderRecount?: number;
        DenominationDetails?: Entities.DenominationDetail[];
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * DenominationDetail entity interface.
     */
    interface DenominationDetail {
        Type?: number;
        Currency?: string;
        DenominationAmount?: number;
        QuantityDeclared?: number;
        AmountDeclared?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ButtonGridZone entity interface.
     */
    interface ButtonGridZone {
        ButtonGridId?: string;
        ZoneId?: string;
        ZoneName?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ImageZone entity interface.
     */
    interface ImageZone {
        PictureId?: number;
        PictureAsBase64?: string;
        ZoneId?: string;
        ZoneName?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ReportZone entity interface.
     */
    interface ReportZone {
        ReportRecordId?: number;
        ZoneId?: string;
        ZoneName?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * SalesInvoiceLine entity interface.
     */
    interface SalesInvoiceLine {
        RecordId?: number;
        ItemId?: string;
        ProductName?: string;
        InventDimensionId?: string;
        InventTransactionId?: string;
        Quantity?: number;
        Price?: number;
        DiscountPercent?: number;
        DiscountAmount?: number;
        BatchId?: string;
        NetAmount?: number;
        Site?: string;
        Warehouse?: string;
        SerialId?: string;
        ColorId?: string;
        SizeId?: string;
        StyleId?: string;
        ConfigId?: string;
        ColorName?: string;
        SizeName?: string;
        StyleName?: string;
        ConfigName?: string;
        SalesTaxGroup?: string;
        ItemTaxGroup?: string;
        SalesMarkup?: number;
        TotalDiscount?: number;
        TotalPercentageDiscount?: number;
        LineDiscount?: number;
        PeriodicDiscount?: number;
        PeriodicPercentageDiscount?: number;
        LineManualDiscountPercentage?: number;
        LineManualDiscountAmount?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ReportRow entity interface.
     */
    interface ReportRow {
        RowData?: Entities.CommerceProperty[];
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * FormAnnotation entity interface.
     */
    interface FormAnnotation extends Annotation {
        MenuItemLabel?: string;
        MenuItemName?: string;
        MenuItemType?: string;
    }
    /**
     * TaskGuideAnnotation entity interface.
     */
    interface TaskGuideAnnotation extends Annotation {
        RecordingValueType?: string;
        Title?: string;
        ExampleText?: string;
        Hidden?: boolean;
        GlobalId?: string;
    }
    /**
     * CommandArgument entity interface.
     */
    interface CommandArgument {
        Value?: string;
        IsReference?: boolean;
    }
    /**
     * PropertyUserAction entity interface.
     */
    interface PropertyUserAction extends FormUserAction {
        Value?: string;
        ValueLabel?: string;
        PropertyName?: string;
        ControlName?: string;
        ControlType?: string;
        UserActionType?: string;
        IsReference?: boolean;
        LabelId?: string;
    }
    /**
     * InfoUserAction entity interface.
     */
    interface InfoUserAction extends UserAction {
        FormId?: string;
        ControlLabel?: string;
        ControlLabelId?: string;
        ControlName?: string;
        Text?: string;
        Notes?: string;
    }
    /**
     * MenuItemUserAction entity interface.
     */
    interface MenuItemUserAction extends UserAction {
        MenuItemName?: string;
        MenuItemType?: string;
        NavigationPath?: string[];
    }
    /**
     * ValidationUserAction entity interface.
     */
    interface ValidationUserAction extends UserAction {
        Name?: string;
        Comment?: string;
    }
    /**
     * ArtifactSummary entity interface.
     */
    interface ArtifactSummary {
        ArtifactType?: string;
        LanguageTags?: string[];
    }
    /**
     * MetadataPropertyValue entity interface.
     */
    interface MetadataPropertyValue {
        PropertyId?: string;
        SingleValue?: string;
        MultiValue?: Entities.MetadataText[];
        Tags?: string[];
        ComboBox?: string;
        MultiSelect?: string[];
        Links?: Entities.MetadataHypertextLink[];
    }
    /**
     * MetadataText entity interface.
     */
    interface MetadataText {
        Id?: string;
        Text?: string;
    }
    /**
     * MetadataHypertextLink entity interface.
     */
    interface MetadataHypertextLink {
        Id?: string;
        DisplayName?: string;
        Url?: string;
    }
    /**
     * FormContext entity interface.
     */
    interface FormContext {
        FormID?: string;
        FormName?: string;
        RecordingName?: string;
        HasMetadata?: boolean;
        Sequence?: number;
        Annotations?: Entities.Annotation[];
    }
    /**
     * ExtensibleFiscalRegistrationType entity interface.
     */
    interface ExtensibleFiscalRegistrationType extends ExtensibleEnumeration {
    }
    /**
     * FiscalTransactionTenderLineAdjustment entity interface.
     */
    interface FiscalTransactionTenderLineAdjustment {
        TenderLineNumber?: number;
        AdjustmentAmount?: number;
        RecordGuid?: string;
        TransactionId?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * FiscalTransactionSalesLineAdjustment entity interface.
     */
    interface FiscalTransactionSalesLineAdjustment {
        SalesLineNumber?: number;
        Exclude?: boolean;
        RecordGuid?: string;
        TransactionId?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * DetailedOrderStatus entity interface.
     */
    interface DetailedOrderStatus extends ExtensibleEnumeration {
    }
    /**
     * DetailedLineStatus entity interface.
     */
    interface DetailedLineStatus extends ExtensibleEnumeration {
    }
    /**
     * SalesAffiliationLoyaltyTier entity interface.
     */
    interface SalesAffiliationLoyaltyTier extends AffiliationLoyaltyTier {
        TransactionId?: string;
        ChannelId?: number;
        TerminalId?: string;
        ReceiptId?: string;
        StaffId?: string;
    }
    /**
     * TaxViewLine entity interface.
     */
    interface TaxViewLine {
        TaxId?: string;
        TaxAmount?: number;
    }
    /**
     * Coupon entity interface.
     */
    interface Coupon {
        CodeId?: string;
        Code?: string;
        DiscountOfferId?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * CustomerAccountDepositLine entity interface.
     */
    interface CustomerAccountDepositLine {
        Amount?: number;
        CustomerAccount?: string;
        Comment?: string;
        StoreNumber?: string;
        Terminal?: string;
        Shift?: string;
        TransactionStatusValue?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * CustomerAttribute entity interface.
     */
    interface CustomerAttribute {
        AttributeValue?: Entities.CommercePropertyValue;
        Units?: string;
        RecordId?: number;
        Name?: string;
        KeyName?: string;
        DataTypeValue?: number;
        Attribute?: number;
        NameTranslations?: Entities.TextValueTranslation[];
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ContactInfo entity interface.
     */
    interface ContactInfo {
        AddressTypeValue?: number;
        RecordId?: number;
        PartyLocationRecordId?: number;
        PartyRecordId?: number;
        PartyNumber?: string;
        Description?: string;
        Value?: string;
        ValueExtension?: string;
        LogisticsLocationId?: string;
        LogisticsLocationRecordId?: number;
        ParentLocation?: number;
        IsPrimary?: boolean;
        IsMobilePhone?: boolean;
        IsPrivate?: boolean;
        IsOptedInMarketing?: boolean;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ShiftTaxLine entity interface.
     */
    interface ShiftTaxLine {
        TaxCode?: string;
        TaxAmount?: number;
        TaxRate?: number;
        NetAmount?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * TaxRegistration entity interface.
     */
    interface TaxRegistration {
        RecordId?: number;
        Name?: string;
        CountryRegionId?: string;
        IsRegistrationNumberUnique?: boolean;
        IsPrimaryAddressRestricted?: boolean;
        TypeApplicabilityRuleRecordId?: number;
        TypeValue?: number;
        Description?: string;
        DirPartyLocationRecordId?: number;
        RegistrationNumber?: string;
        ValidFrom?: Date;
        ValidTo?: Date;
        Issuer?: string;
        IssueDate?: Date;
        Section?: string;
        DirectoryPartyRecordId?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ChannelTaxRegistration entity interface.
     */
    interface ChannelTaxRegistration extends TaxRegistration {
        ChannelId?: number;
    }
    /**
     * LinkedProduct entity interface.
     */
    interface LinkedProduct {
        ProductRecordId?: number;
        LinkedProductRecordId?: number;
        Quantity?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * DisplayOrderInCategory entity interface.
     */
    interface DisplayOrderInCategory {
        CategoryRecordId?: number;
        DisplayOrder?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * RelatedProduct entity interface.
     */
    interface RelatedProduct {
        ProductRecordId?: number;
        RelatedProductRecordId?: number;
        CatalogId?: number;
        RelationName?: string;
        IsExcludedRelation?: boolean;
        IsDirectRelation?: boolean;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * KitComponent entity interface.
     */
    interface KitComponent {
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ListingIdentity entity interface.
     */
    interface ListingIdentity {
        ProductId?: number;
        LanguageId?: string;
        CatalogId?: number;
        Tag?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ProductRatingCount entity interface.
     */
    interface ProductRatingCount {
        Rating?: number;
        Count?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * RegularStoreHours entity interface.
     */
    interface RegularStoreHours {
        MondayOpenTime?: number;
        MondayCloseTime?: number;
        IsClosedOnMonday?: boolean;
        TuesdayOpenTime?: number;
        TuesdayCloseTime?: number;
        IsClosedOnTuesday?: boolean;
        WednesdayOpenTime?: number;
        WednesdayCloseTime?: number;
        IsClosedOnWednesday?: boolean;
        ThursdayOpenTime?: number;
        ThursdayCloseTime?: number;
        IsClosedOnThursday?: boolean;
        FridayOpenTime?: number;
        FridayCloseTime?: number;
        IsClosedOnFriday?: boolean;
        SaturdayOpenTime?: number;
        SaturdayCloseTime?: number;
        IsClosedOnSaturday?: boolean;
        SundayOpenTime?: number;
        SundayCloseTime?: number;
        IsClosedOnSunday?: boolean;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ValidationPeriod entity interface.
     */
    interface ValidationPeriod {
        RecordId?: number;
        PeriodId?: string;
        Description?: string;
        ValidFrom?: Date;
        ValidTo?: Date;
        StartingTime?: number;
        EndingTime?: number;
        IsTimeBounded?: number;
        MondayStartingTime?: number;
        MondayEndingTime?: number;
        IsMondayTimeBounded?: number;
        TuesdayStartingTime?: number;
        TuesdayEndingTime?: number;
        IsTuesdayTimeBounded?: number;
        WednesdayStartingTime?: number;
        WednesdayEndingTime?: number;
        IsWednesdayTimeBounded?: number;
        ThursdayStartingTime?: number;
        ThursdayEndingTime?: number;
        IsThursdayTimeBounded?: number;
        FridayStartingTime?: number;
        FridayEndingTime?: number;
        IsFridayTimeBounded?: number;
        SaturdayStartingTime?: number;
        SaturdayEndingTime?: number;
        IsSaturdayTimeBounded?: number;
        SundayStartingTime?: number;
        SundayEndingTime?: number;
        IsSundayTimeBounded?: number;
        IsEndTimeAfterMidnight?: number;
        IsMondayEndTimeAfterMidnight?: number;
        IsTuesdayEndTimeAfterMidnight?: number;
        IsWednesdayEndTimeAfterMidnight?: number;
        IsThursdayEndTimeAfterMidnight?: number;
        IsFridayEndTimeAfterMidnight?: number;
        IsSaturdayEndTimeAfterMidnight?: number;
        IsSundayEndTimeAfterMidnight?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ClientBookChange entity interface.
     */
    interface ClientBookChange {
        FromStaffId?: string;
        ToStaffId?: string;
        CustomerId?: string;
    }
    /**
     * RetailSharedConfigurationParameter entity interface.
     */
    interface RetailSharedConfigurationParameter {
        RecordId?: number;
        Name?: string;
        Value?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * CDXDataStore entity interface.
     */
    interface CDXDataStore {
        Name?: string;
        RecId?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * UploadJobPackageRequest entity interface.
     */
    interface UploadJobPackageRequest {
        JobId?: string;
        RerunUploadSessionId?: number;
        TargetStorage?: string;
        UploadJobDefintion?: string;
        UploadUrl?: string;
    }
    /**
     * ExtensibleAuditEventType entity interface.
     */
    interface ExtensibleAuditEventType extends ExtensibleEnumeration {
    }
    /**
     * AuditEventFiscalTransaction entity interface.
     */
    interface AuditEventFiscalTransaction {
        EventId?: number;
        LineNumber?: number;
        RegisterResponse?: string;
        Store?: string;
        TransDateTime?: Date;
        Terminal?: string;
        UploadType?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * AuditEventFiscalRegistrationLine entity interface.
     */
    interface AuditEventFiscalRegistrationLine {
        EventId?: number;
        RegisterResponse?: string;
        StoreId?: string;
        TransactionDateTime?: Date;
        TerminalId?: string;
        UploadType?: string;
        UploadTypeValue?: number;
        StaffId?: string;
        RecordGuid?: string;
        RegistrationStatusValue?: number;
        RegistrationProcessId?: string;
        ConnectorGroup?: string;
        ConnectorName?: string;
        ConnectorFunctionalityProfileId?: string;
        RegisterInfo?: string;
        CreatedDateTime?: Date;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * NotificationDetail entity interface.
     */
    interface NotificationDetail {
        ActionProperty?: string;
        ItemCount?: number;
        DisplayText?: string;
        IsNew?: boolean;
        LastUpdatedDateTimeStr?: string;
        IsSuccess?: boolean;
        IsLiveContentOnly?: boolean;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * FiscalIntegrationDocumentContext entity interface.
     */
    interface FiscalIntegrationDocumentContext {
        AuditEvent?: Entities.AuditEvent;
        SignatureData?: Entities.FiscalIntegrationSequentialSignatureData[];
    }
    /**
     * FiscalIntegrationDocumentAdjustment entity interface.
     */
    interface FiscalIntegrationDocumentAdjustment {
        TenderLineAdjustments?: Entities.FiscalTransactionTenderLineAdjustment[];
        SalesLineAdjustments?: Entities.FiscalTransactionSalesLineAdjustment[];
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * FiscalIntegrationSignatureDataContext entity interface.
     */
    interface FiscalIntegrationSignatureDataContext {
        SequentialSignatureKey?: string;
        SequentialNumber?: number;
    }
    /**
     * FiscalIntegrationRegistrationProcessLine entity interface.
     */
    interface FiscalIntegrationRegistrationProcessLine {
        RegistrationProcessId?: string;
        SequenceNumber?: number;
        Priority?: number;
        ConnectorTypeValue?: number;
        FunctionalityProfileGroupId?: string;
        AllowSkip?: boolean;
        AllowMarkAsRegistered?: boolean;
        Optional?: boolean;
        RegistrationSettings?: Entities.FiscalIntegrationRegistrationSettings;
        SupportedFiscalEventTypes?: number[];
        SupportedNonFiscalEventTypes?: number[];
        SequentialKeys?: string[];
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * FiscalIntegrationRegistrationSettings entity interface.
     */
    interface FiscalIntegrationRegistrationSettings {
        SkipReasonCode?: string;
        MarkAsRegisteredReasonCode?: string;
    }
    /**
     * FiscalIntegrationServiceFailureDetails entity interface.
     */
    interface FiscalIntegrationServiceFailureDetails {
        FailureTypeValue?: number;
        IsRetryAllowed?: boolean;
        ErrorCode?: string;
        ErrorMessage?: string;
    }
    /**
     * CategoryPath entity interface.
     */
    interface CategoryPath {
        Segments?: Entities.CategoryPathSegment[];
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * CategoryPathSegment entity interface.
     */
    interface CategoryPathSegment {
        CategoryName?: string;
        CategoryId?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * AttachedService entity interface.
     */
    interface AttachedService {
        BaseUrl?: string;
        ServiceId?: string;
        StatusValue?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * CustomerTimelineItemType entity interface.
     */
    interface CustomerTimelineItemType {
        Description?: string;
        TypeId?: string;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ProductWarehouseInventoryAvailability entity interface.
     */
    interface ProductWarehouseInventoryAvailability {
        ProductId?: number;
        InventLocationId?: string;
        DataAreaId?: string;
        PhysicalInventory?: number;
        PhysicalReserved?: number;
        TotalAvailable?: number;
        TotalAvailableInventoryLevelLabel?: string;
        TotalAvailableInventoryLevelCode?: string;
        OrderedInTotal?: number;
        PhysicalAvailable?: number;
        PhysicalAvailableInventoryLevelLabel?: string;
        PhysicalAvailableInventoryLevelCode?: string;
        LastInventoryTransactionId?: number;
        UnpostedOnlineOrderedQuantity?: number;
        IsInventoryAvailabilityQuantityReturned?: boolean;
        SumUncountedTransactions?: number;
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * ParameterSet entity interface.
     */
    interface ParameterSet {
    }
    /**
     * CartLineValidationResults entity interface.
     */
    interface CartLineValidationResults {
        ValidationFailuresByCartLines?: Entities.LineDataValidationFailure[];
    }
    /**
     * CommerceException entity interface.
     */
    interface CommerceException {
        LocalizedMessage?: string;
        ErrorResourceId?: string;
    }
    /**
     * DataValidationException entity interface.
     */
    interface DataValidationException extends CommerceException {
        ValidationResults?: Entities.DataValidationFailure[];
    }
    /**
     * MissingRequiredReasonCodeException entity interface.
     */
    interface MissingRequiredReasonCodeException extends DataValidationException {
        RequiredReasonCodes?: Entities.ReasonCode[];
        TransactionRequiredReasonCodeIds?: string[];
        ReasonCodeRequirements?: Entities.ReasonCodeRequirement[];
    }
    /**
     * SecurityException entity interface.
     */
    interface SecurityException extends CommerceException {
    }
    /**
     * DeviceAuthenticationException entity interface.
     */
    interface DeviceAuthenticationException extends SecurityException {
    }
    /**
     * HeadquarterTransactionServiceException entity interface.
     */
    interface HeadquarterTransactionServiceException extends CommerceException {
    }
    /**
     * UserAuthenticationException entity interface.
     */
    interface UserAuthenticationException extends SecurityException {
    }
    /**
     * UserAuthorizationException entity interface.
     */
    interface UserAuthorizationException extends SecurityException {
    }
    /**
     * FeatureNotSupportedException entity interface.
     */
    interface FeatureNotSupportedException extends CommerceException {
    }
    /**
     * CartValidationException entity interface.
     */
    interface CartValidationException extends DataValidationException {
    }
    /**
     * TenderValidationException entity interface.
     */
    interface TenderValidationException extends DataValidationException {
        TenderTypeId?: string;
    }
    /**
     * PaymentException entity interface.
     */
    interface PaymentException extends CommerceException {
        PaymentSdkErrors?: Entities.PaymentError[];
    }
    /**
     * CommerceDataExchangeException entity interface.
     */
    interface CommerceDataExchangeException extends CommerceException {
    }
    /**
     * ExtensibleEnumerationException entity interface.
     */
    interface ExtensibleEnumerationException extends CommerceException {
    }
    /**
     * DataValidationFailure entity interface.
     */
    interface DataValidationFailure {
        ErrorContext?: string;
        ErrorResourceId?: string;
        MemberNames?: string[];
        LocalizedMessage?: string;
    }
    /**
     * ItemDiscontinuedException entity interface.
     */
    interface ItemDiscontinuedException extends CommerceException {
        RemovedUnavailableItemIds?: string;
    }
    /**
     * InventoryDocumentLockedByOtherTerminalException entity interface.
     */
    interface InventoryDocumentLockedByOtherTerminalException extends DataValidationException {
        WorkingTerminalId?: string;
        CurrentTerminalId?: string;
    }
    /**
     * InventoryDocumentExceedMaximumQuantityException entity interface.
     */
    interface InventoryDocumentExceedMaximumQuantityException extends DataValidationException {
        MaximumQuantity: number;
        AllowOverDelivery: boolean;
    }
    /**
     * CommerceRuntimeCompositionException entity interface.
     */
    interface CommerceRuntimeCompositionException extends CommerceException {
    }
    /**
     * ChecklistTaskValidationException entity interface.
     */
    interface ChecklistTaskValidationException extends DataValidationException {
    }
    /**
     * InsufficientCredentialLengthException entity interface.
     */
    interface InsufficientCredentialLengthException extends DataValidationException {
        ActualLength?: number;
        MinLength?: number;
    }
    /**
     * ExtensibleEnumerationCacheException entity interface.
     */
    interface ExtensibleEnumerationCacheException extends CommerceException {
    }
    /**
     * StaffPasswordExpiredException entity interface.
     */
    interface StaffPasswordExpiredException extends UserAuthenticationException {
        StaffId?: string;
    }
    /**
     * TenderTypePolicy entity interface.
     */
    interface TenderTypePolicy {
        OriginalTenderType?: string;
        AllowedReturnTenderTypes?: string[];
        ExtensionProperties?: Entities.CommerceProperty[];
    }
    /**
     * LineDataValidationFailure entity interface.
     */
    interface LineDataValidationFailure {
        DataValidationFailure?: Entities.DataValidationFailure;
        LineIndex?: number;
    }
    /**
     * WrongEndpointException entity interface.
     */
    interface WrongEndpointException extends CommerceException {
        RedirectUri?: string;
    }
    /**
     * BadRequestException entity interface.
     */
    interface BadRequestException extends CommerceException {
    }
    /**
     * Category entity class.
     */
    class CategoryClass implements Category {
        RecordId: number;
        OfflineImage: string;
        Name: string;
        ParentCategory: number;
        DisplayOrder: number;
        Images: Entities.MediaLocation[];
        NameTranslations: Entities.TextValueTranslation[];
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * Cart entity class.
     */
    class CartClass implements Cart {
        AffiliationLines: Entities.AffiliationLoyaltyTier[];
        IsRequiredAmountPaid: boolean;
        IsDiscountFullyCalculated: boolean;
        IgnoreDiscountCalculation: boolean;
        AmountDue: number;
        AmountPaid: number;
        AttributeValues: Entities.AttributeValueBase[];
        BeginDateTime: Date;
        BusinessDate: Date;
        CancellationChargeAmount: number;
        EstimatedShippingAmount: number;
        CartLines: Entities.CartLine[];
        CartTypeValue: number;
        ChannelId: number;
        ChargeAmount: number;
        CustomerOrderRemainingBalance: number;
        ChargeLines: Entities.ChargeLine[];
        TaxViewLines: Entities.TaxViewLine[];
        Comment: string;
        InvoiceComment: string;
        Coupons: Entities.Coupon[];
        CustomerId: string;
        CustomerOrderModeValue: number;
        DeliveryMode: string;
        DeliveryModeChargeAmount: number;
        DiscountAmount: number;
        DiscountAmountWithoutTax: number;
        DiscountCodes: string[];
        Id: string;
        SuspendedCartId: string;
        TransactionTypeValue: number;
        CustomerAccountDepositLines: Entities.CustomerAccountDepositLine[];
        IncomeExpenseLines: Entities.IncomeExpenseLine[];
        IncomeExpenseTotalAmount: number;
        IsReturnByReceipt: boolean;
        ReturnTransactionHasLoyaltyPayment: boolean;
        IsFavorite: boolean;
        IsRecurring: boolean;
        IsSuspended: boolean;
        LoyaltyCardId: string;
        ModifiedDateTime: Date;
        Name: string;
        OrderNumber: string;
        AvailableDepositAmount: number;
        OverriddenDepositAmount: number;
        OverriddenDepositWithoutCarryoutAmount: number;
        PrepaymentAmountPaid: number;
        PrepaymentAppliedOnPickup: number;
        PromotionLines: string[];
        QuotationExpiryDate: Date;
        ReasonCodeLines: Entities.ReasonCodeLine[];
        ReceiptEmail: string;
        RequestedDeliveryDate: Date;
        RequiredDepositAmount: number;
        RequiredDepositWithoutCarryoutAmount: number;
        SalesId: string;
        ShippingAddress: Entities.Address;
        StaffId: string;
        SubtotalAmount: number;
        SubtotalAmountWithoutTax: number;
        NetPrice: number;
        SubtotalSalesAmount: number;
        TaxAmount: number;
        TaxOnCancellationCharge: number;
        TaxOverrideCode: string;
        TenderLines: Entities.TenderLine[];
        RefundableTenderLines: Entities.TenderLine[];
        TerminalId: string;
        TotalAmount: number;
        TotalSalesAmount: number;
        TotalReturnAmount: number;
        TotalCarryoutSalesAmount: number;
        TotalCustomerOrderSalesAmount: number;
        TotalManualDiscountAmount: number;
        TotalManualDiscountPercentage: number;
        WarehouseId: string;
        IsCreatedOffline: boolean;
        CartStatusValue: number;
        ReceiptTransactionTypeValue: number;
        CommissionSalesGroup: string;
        Version: number;
        TotalItems: number;
        HasTaxCalculationTriggered: boolean;
        MerchantProperties: Entities.PaymentMerchantInformation[];
        HasChargeCalculationTriggered: boolean;
        FiscalTransactions: Entities.FiscalTransaction[];
        ShippingChargeAmount: number;
        OtherChargeAmount: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * Customer entity class.
     */
    class CustomerClass implements Customer {
        AccountNumber: string;
        RecordId: number;
        CreatedDateTime: Date;
        ChargeGroup: string;
        PriceGroup: string;
        IsCustomerTaxInclusive: boolean;
        Phone: string;
        PhoneRecordId: number;
        PhoneExt: string;
        Cellphone: string;
        Email: string;
        EmailRecordId: number;
        Url: string;
        UrlRecordId: number;
        Name: string;
        PersonNameId: number;
        FirstName: string;
        MiddleName: string;
        LastName: string;
        DirectoryPartyRecordId: number;
        PartyNumber: string;
        CustomerTypeValue: number;
        Language: string;
        CustomerGroup: string;
        CurrencyCode: string;
        CNPJCPFNumber: string;
        IdentificationNumber: string;
        InvoiceAccount: string;
        MandatoryCreditLimit: boolean;
        CreditRating: string;
        CreditLimit: number;
        Balance: number;
        Blocked: boolean;
        BlockedType: number;
        UseOrderNumberReference: boolean;
        OrganizationId: string;
        UsePurchaseRequest: boolean;
        MultilineDiscountGroup: string;
        TotalDiscountGroup: string;
        LineDiscountGroup: string;
        TaxGroup: string;
        SalesTaxGroup: string;
        CommissionSalesGroupId: string;
        TaxExemptNumber: string;
        VatNumber: string;
        TaxOffice: string;
        NonChargeableAccount: boolean;
        Tag: string;
        ReceiptSettings: number;
        ReceiptEmail: string;
        OptOutPersonalization: boolean;
        OptOutWebActivityTracking: boolean;
        RetailCustomerTableRecordId: number;
        OfflineImage: string;
        IsAsyncCustomer: boolean;
        NewCustomerPartyNumber: string;
        CustomerAffiliations: Entities.CustomerAffiliation[];
        Addresses: Entities.Address[];
        Attributes: Entities.CustomerAttribute[];
        Images: Entities.MediaLocation[];
        TitleRecordId: number;
        IsFloorLimitBlocked: boolean;
        IsB2b: boolean;
        IsB2bAdmin: boolean;
        Contacts: Entities.ContactInfo[];
        AllowOnAccountPayment: boolean;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * Employee entity class.
     */
    class EmployeeClass implements Employee {
        StaffId: string;
        NameOnReceipt: string;
        Name: string;
        CultureName: string;
        NumberOfDaysToPasswordExpiry: number;
        Permissions: Entities.EmployeePermissions;
        Images: Entities.MediaLocation[];
        DefaultImage: string;
        DefaultCommissionSalesGroup: string;
        RecordId: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * Checklist entity class.
     */
    class ChecklistClass implements Checklist {
        RecordId: number;
        Tasks: Entities.ChecklistTask[];
        Version: string;
        ProcessId: string;
        Name: string;
        Description: string;
        AssignedToChannelId: number;
        AssignedToWorkerPersonnelNumber: string;
        StatusValue: number;
        StartDateTime: Date;
        EndDateTime: Date;
        TargetDateTime: Date;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * SalesOrder entity class.
     */
    class SalesOrderClass implements SalesOrder {
        DocumentStatusValue: number;
        RecordId: number;
        StatusValue: number;
        McrOrderStopped: boolean;
        Shipments: Entities.Shipment[];
        DetailedOrderStatusValue: number;
        AffiliationLoyaltyTierLines: Entities.SalesAffiliationLoyaltyTier[];
        IsRequiredAmountPaid: boolean;
        IsDiscountFullyCalculated: boolean;
        IgnoreDiscountCalculation: boolean;
        AmountDue: number;
        EstimatedShippingAmount: number;
        AmountPaid: number;
        CustomerOrderRemainingBalance: number;
        AttributeValues: Entities.AttributeValueBase[];
        AvailableDepositAmount: number;
        BeginDateTime: Date;
        CreatedDateTime: Date;
        BusinessDate: Date;
        CalculatedDepositAmount: number;
        CancellationCharge: number;
        ChannelId: number;
        ChannelReferenceId: string;
        ChargeAmount: number;
        ChargeLines: Entities.ChargeLine[];
        Comment: string;
        Coupons: Entities.Coupon[];
        InvoiceComment: string;
        ContactInformationCollection: Entities.ContactInformation[];
        CurrencyCode: string;
        CustomerAccountDepositLines: Entities.CustomerAccountDepositLine[];
        CustomerId: string;
        CustomerOrderModeValue: number;
        CustomerOrderTypeValue: number;
        DeliveryMode: string;
        DeliveryModeChargeAmount: number;
        DiscountAmount: number;
        DiscountAmountWithoutTax: number;
        NetPrice: number;
        DiscountCodes: string[];
        EntryStatusValue: number;
        GrossAmount: number;
        HasLoyaltyPayment: boolean;
        Id: string;
        SuspendedTransactionId: string;
        IncomeExpenseLines: Entities.IncomeExpenseLine[];
        IncomeExpenseTotalAmount: number;
        InventoryLocationId: string;
        IsCreatedOffline: boolean;
        IsReturnByReceipt: boolean;
        IsSuspended: boolean;
        IsTaxIncludedInPrice: boolean;
        IsTaxExemptedForPriceInclusive: boolean;
        LineDiscount: number;
        LineDiscountCalculationTypeValue: number;
        LoyaltyCardId: string;
        LoyaltyDiscountAmount: number;
        LoyaltyManualDiscountAmount: number;
        LoyaltyRewardPointLines: Entities.LoyaltyRewardPointLine[];
        ModifiedDateTime: Date;
        Name: string;
        NetAmount: number;
        NetAmountWithoutTax: number;
        NetAmountWithNoTax: number;
        NetAmountWithTax: number;
        NumberOfItems: number;
        OverriddenDepositAmount: number;
        OverriddenDepositWithoutCarryoutAmount: number;
        PeriodicDiscountAmount: number;
        TenderDiscountAmount: number;
        PrepaymentAmountAppliedOnPickup: number;
        PrepaymentAmountInvoiced: number;
        PrepaymentAmountPaid: number;
        QuotationExpiryDate: Date;
        ReasonCodeLines: Entities.ReasonCodeLine[];
        ReceiptEmail: string;
        ReceiptId: string;
        RequestedDeliveryDate: Date;
        RequiredDepositAmount: number;
        RequiredDepositWithoutCarryoutAmount: number;
        ReturnTransactionHasLoyaltyPayment: boolean;
        SalesId: string;
        SalesPaymentDifference: number;
        SalesLines: Entities.SalesLine[];
        ShiftId: number;
        ShiftTerminalId: string;
        ShippingAddress: Entities.Address;
        StaffId: string;
        StatementCode: string;
        StoreId: string;
        SubtotalAmount: number;
        SubtotalAmountWithoutTax: number;
        SubtotalSalesAmount: number;
        TaxAmount: number;
        TaxAmountExclusive: number;
        TaxAmountInclusive: number;
        TaxLines: Entities.TaxLine[];
        TaxOnCancellationCharge: number;
        TaxOverrideCode: string;
        TenderLines: Entities.TenderLine[];
        RefundableTenderLines: Entities.TenderLine[];
        TerminalId: string;
        TotalAmount: number;
        TotalSalesAmount: number;
        TotalReturnAmount: number;
        TotalCarryoutSalesAmount: number;
        TotalCustomerOrderSalesAmount: number;
        TotalDiscount: number;
        TotalManualDiscountAmount: number;
        TotalManualDiscountPercentage: number;
        TransactionTypeValue: number;
        TaxCalculationTypeValue: number;
        SalesInvoiceAmount: number;
        GiftCardActiveFrom: Date;
        GiftCardBalance: number;
        GiftCardExpireDate: Date;
        GiftCardHistoryDetails: string;
        GiftCardIssueAmount: number;
        GiftCardIdMasked: string;
        CommissionSalesGroup: string;
        IsCommissionSalesGroupOverriddenByCustomer: boolean;
        CommissionSalesGroupSetByCashier: string;
        HasTaxCalculationTriggered: boolean;
        HasChargeCalculationTriggered: boolean;
        ShippingChargeAmount: number;
        OtherChargeAmount: number;
        FiscalTransactions: Entities.FiscalTransaction[];
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * Shift entity class.
     */
    class ShiftClass implements Shift {
        ShiftId: number;
        TerminalId: string;
        StartingAmountTotal: number;
        FloatingEntryAmountTotal: number;
        AddToTenderAmountTotal: number;
        SafeDropTotal: number;
        BankDropTotal: number;
        RemoveTenderAmountTotal: number;
        DeclareTenderAmountTotal: number;
        OverShortTotal: number;
        TenderedTotal: number;
        ChangeTotal: number;
        IncomeAccountTotal: number;
        ExpenseAccountTotal: number;
        CashDrawer: string;
        StoreRecordId: number;
        StoreId: string;
        StaffId: string;
        CurrentStaffId: string;
        StatusValue: number;
        StartDateTime: Date;
        CloseDateTime: Date;
        ClosedAtTerminalId: string;
        CurrentTerminalId: string;
        SalesTotal: number;
        StatusDateTime: Date;
        ReturnsTotal: number;
        PaidToAccountTotal: number;
        TaxTotal: number;
        ChargeTotal: number;
        DiscountTotal: number;
        RoundedAmountTotal: number;
        CustomerCount: number;
        SaleTransactionCount: number;
        NoSaleTransactionCount: number;
        VoidTransactionCount: number;
        LogOnTransactionCount: number;
        SuspendedTransactionCount: number;
        TransactionCount: number;
        ReceiptsCount: number;
        ReturnsCount: number;
        GoodsSoldQty: number;
        ServicesSoldQty: number;
        ReceiptCopiesCount: number;
        ReceiptCopiesTotal: number;
        PriceOverrideTotal: number;
        SuspendedTotal: number;
        SalesTotalIncludingTax: number;
        SalesTotalExcludingTax: number;
        SalesGrandTotal: number;
        ReturnsGrandTotal: number;
        TaxLines: Entities.ShiftTaxLine[];
        TenderLines: Entities.ShiftTenderLine[];
        AccountLines: Entities.ShiftAccountLine[];
        IsShared: boolean;
        StartingAmountRunningTotal: number;
        GiftCardsTotal: number;
        GiftCardCashOutTotal: number;
        VoidedSalesTotal: number;
        ShiftSalesTotal: number;
        ShiftReturnsTotal: number;
        HasPendingOfflineTransactions: number;
        NumberOfUnreconciledLines: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * StockCountJournal entity class.
     */
    class StockCountJournalClass implements StockCountJournal {
        JournalId: string;
        RecordId: string;
        Description: string;
        InventLocationId: string;
        DataAreaId: string;
        StockCountTransactionLines: Entities.StockCountJournalTransaction[];
        Worker: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * OrgUnit entity class.
     */
    class OrgUnitClass implements OrgUnit {
        OrgUnitNumber: string;
        RecordId: number;
        InventoryLocationId: string;
        OMOperatingUnitNumber: string;
        TaxGroup: string;
        FunctionalityProfileId: string;
        UseCustomerBasedTax: boolean;
        UseCustomerBasedTaxExemption: boolean;
        UseDestinationBasedTax: boolean;
        Currency: string;
        OrgUnitAddress: Entities.Address;
        OrgUnitFullAddress: string;
        OrgUnitName: string;
        Latitude: number;
        Longitude: number;
        EmailReceiptProfileId: string;
        ShippingWarehouseAddress: Entities.Address;
        TaxRegistrations: Entities.TaxRegistration[];
        EventNotificationProfileId: string;
        Name: string;
        DefaultCustomerAccount: string;
        CategoryHierarchyId: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * Product entity class.
     */
    class ProductClass implements Product {
        RecordId: number;
        ProductName: string;
        ProductNumber: string;
        Description: string;
        IsMasterProduct: boolean;
        IsKit: boolean;
        ItemId: string;
        HasLinkedProducts: boolean;
        Rules: Entities.ProductRules;
        DefaultUnitOfMeasure: string;
        Name: string;
        Locale: string;
        OfflineImage: string;
        IsRemote: boolean;
        ChangeTrackingInformation: Entities.ProductChangeTrackingInformation;
        Image: Entities.RichMediaLocations;
        UnitsOfMeasureSymbol: string[];
        LinkedProducts: Entities.LinkedProduct[];
        BasePrice: number;
        Price: number;
        AdjustedPrice: number;
        RetailContext: Entities.ProjectionDomain;
        PrimaryCategoryId: number;
        CategoryIds: number[];
        DisplayOrderInCategories: Entities.DisplayOrderInCategory[];
        RelatedProducts: Entities.RelatedProduct[];
        ProductsRelatedToThis: Entities.RelatedProduct[];
        ProductSchema: string[];
        ProductProperties: Entities.ProductPropertyTranslation[];
        CompositionInformation: Entities.ProductCompositionInformation;
        ParentKits: Entities.KitComponent[];
        SearchName: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ProductCatalog entity class.
     */
    class ProductCatalogClass implements ProductCatalog {
        RecordId: number;
        Name: string;
        Description: string;
        Language: string;
        IsSnapshotEnabled: boolean;
        ValidFrom: Date;
        ValidTo: Date;
        CreatedOn: Date;
        ModifiedOn: Date;
        PublishedOn: Date;
        Images: Entities.MediaLocation[];
        ChannelId: number;
        DefaultImage: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * CommerceList entity class.
     */
    class CommerceListClass implements CommerceList {
        Id: number;
        Name: string;
        CustomerId: string;
        CustomerName: string;
        IsFavorite: boolean;
        IsRecurring: boolean;
        IsPrivate: boolean;
        IsCollaborative: boolean;
        CreatedDateTime: Date;
        DueDateTime: Date;
        CommerceListTypeValue: number;
        CommerceListLines: Entities.CommerceListLine[];
        CommerceListContributors: Entities.CommerceListContributor[];
        CommerceListInvitations: Entities.CommerceListInvitation[];
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ProductList entity class.
     */
    class ProductListClass implements ProductList {
        Id: string;
        Name: string;
        CustomerId: string;
        CreatedDateTime: Date;
        LastUpdated: Date;
        DeletedDateTime: Date;
        ProductListTypeValue: number;
        DataAreaId: string;
        ProductListLines: Entities.ProductListLine[];
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * Recommendation entity class.
     */
    class RecommendationClass implements Recommendation {
        Id: string;
        RecommendationTypeValue: number;
        Title: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * TransferOrder entity class.
     */
    class TransferOrderClass implements TransferOrder {
        OrderId: string;
        RecordId: string;
        Status: string;
        Lines: number;
        TotalItems: number;
        OrderTypeValue: number;
        InventLocationIdFrom: string;
        InventLocationIdTo: string;
        QuantityShipped: number;
        QuantityReceived: number;
        QuantityShipNow: number;
        QuantityReceiveNow: number;
        QuantityShipRemaining: number;
        QuantityReceiveRemaining: number;
        ShipDate: Date;
        ReceiveDate: Date;
        DeliveryModeId: string;
        OrderLines: Entities.TransferOrderLine[];
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * PurchaseOrder entity class.
     */
    class PurchaseOrderClass implements PurchaseOrder {
        OrderId: string;
        RecordId: string;
        Status: string;
        Lines: number;
        TotalItems: number;
        OrderTypeValue: number;
        TotalReceived: number;
        OrderLines: Entities.PurchaseOrderLine[];
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * PickingList entity class.
     */
    class PickingListClass implements PickingList {
        OrderId: string;
        RecordId: string;
        Status: string;
        Lines: number;
        TotalItems: number;
        OrderTypeValue: number;
        InventLocationId: string;
        DeliveryDate: Date;
        DeliveryMode: string;
        TotalReceived: number;
        OrderLines: Entities.PickingListLine[];
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * Warehouse entity class.
     */
    class WarehouseClass implements Warehouse {
        InventLocation: string;
        Name: string;
        IsWMSEnabled: boolean;
        DefaultInventoryStatus: string;
        DefaultReceiptLocation: string;
        DefaultLocationId: string;
        DefaultIssueLocation: string;
        Address: Entities.Address;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ScanResult entity class.
     */
    class ScanResultClass implements ScanResult {
        ScannedText: string;
        MaskTypeValue: number;
        Barcode: Entities.Barcode;
        Product: Entities.SimpleProduct;
        LoyaltyCard: Entities.LoyaltyCard;
        GiftCard: Entities.GiftCard;
        ExtensionProperties: Entities.CommerceProperty[];
        Customer: Entities.Customer;
        static customerPropertyName: string;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * SalesOrderContextualOperationsMap entity class.
     */
    class SalesOrderContextualOperationsMapClass implements SalesOrderContextualOperationsMap {
        Id: string;
        ApplicableOperationsValues: number[];
        ExtensionProperties: Entities.CommerceProperty[];
        SalesOrder: Entities.SalesOrder;
        static salesOrderPropertyName: string;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * InventoryInboundOutboundDocument entity class.
     */
    class InventoryInboundOutboundDocumentClass implements InventoryInboundOutboundDocument {
        WorkDocumentId: string;
        TerminalId: string;
        CommitRequestId: string;
        ReceiveDate: Date;
        ShipDate: Date;
        Sender: string;
        Receiver: string;
        SenderDetails: string;
        ReceiverDetails: string;
        DeliveryMode: string;
        OperationTypeValue: number;
        StatusValue: number;
        ReceiptId: string;
        Note: string;
        OperationResultMessage: string;
        DocumentId: string;
        LongVersion: number;
        SourceDocument: Entities.InventoryInboundOutboundSourceDocument;
        SourceDocumentTypeValue: number;
        CreatedDateTime: Date;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * BusinessPartner entity class.
     */
    class BusinessPartnerClass implements BusinessPartner {
        BusinessPartnerId: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * BusinessPartnerUser entity class.
     */
    class BusinessPartnerUserClass implements BusinessPartnerUser {
        Email: string;
        BusinessPartnerId: string;
        FirstName: string;
        LastName: string;
        SpendingLimit: number;
        LastOperationId: string;
        StatusValue: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * SuspendedCart entity class.
     */
    class SuspendedCartClass implements SuspendedCart {
        Id: string;
        ReceiptId: string;
        ShiftId: number;
        ShiftTerminalId: string;
        ExtensionProperties: Entities.CommerceProperty[];
        Cart: Entities.Cart;
        static cartPropertyName: string;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ExtensibleEnumeration entity class.
     */
    class ExtensibleEnumerationClass implements ExtensibleEnumeration {
        Name: string;
        Value: number;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ExtensibleEnumeration_1OfT entity class.
     */
    class ExtensibleEnumeration_1OfTClass extends ExtensibleEnumerationClass implements ExtensibleEnumeration_1OfT {
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ExtensibleTransactionType entity class.
     */
    class ExtensibleTransactionTypeClass extends ExtensibleEnumerationClass implements ExtensibleTransactionType {
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ExtensibleSalesTransactionType entity class.
     */
    class ExtensibleSalesTransactionTypeClass extends ExtensibleEnumerationClass implements ExtensibleSalesTransactionType {
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * FulfillmentLineStatus entity class.
     */
    class FulfillmentLineStatusClass extends ExtensibleEnumerationClass implements FulfillmentLineStatus {
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * FulfillmentLineDeliveryType entity class.
     */
    class FulfillmentLineDeliveryTypeClass extends ExtensibleEnumerationClass implements FulfillmentLineDeliveryType {
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ExtensibleAddressType entity class.
     */
    class ExtensibleAddressTypeClass extends ExtensibleEnumerationClass implements ExtensibleAddressType {
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ExtensibleLoyaltyRewardPointActivityEntryType entity class.
     */
    class ExtensibleLoyaltyRewardPointActivityEntryTypeClass extends ExtensibleEnumerationClass implements ExtensibleLoyaltyRewardPointActivityEntryType {
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ExtensibleAttributeDataType entity class.
     */
    class ExtensibleAttributeDataTypeClass extends ExtensibleEnumerationClass implements ExtensibleAttributeDataType {
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ReleasedProductServiceType entity class.
     */
    class ReleasedProductServiceTypeClass extends ExtensibleEnumerationClass implements ReleasedProductServiceType {
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * Address entity class.
     */
    class AddressClass implements Address {
        Name: string;
        FullAddress: string;
        RecordId: number;
        Street: string;
        StreetNumber: string;
        County: string;
        CountyName: string;
        City: string;
        DistrictName: string;
        State: string;
        StateName: string;
        ZipCode: string;
        ThreeLetterISORegionName: string;
        Phone: string;
        PhoneRecordId: number;
        PhoneExt: string;
        Email: string;
        EmailContent: string;
        EmailRecordId: number;
        Url: string;
        UrlRecordId: number;
        TwoLetterISORegionName: string;
        Deactivate: boolean;
        AttentionTo: string;
        BuildingCompliment: string;
        Postbox: string;
        TaxGroup: string;
        AddressTypeValue: number;
        IsPrimary: boolean;
        IsPrivate: boolean;
        PartyNumber: string;
        IsAsyncAddress: boolean;
        DirectoryPartyTableRecordId: number;
        DirectoryPartyLocationRecordId: number;
        DirectoryPartyLocationRoleRecordId: number;
        LogisticsLocationId: string;
        LogisticsLocationRecordId: number;
        LogisticsLocationExtRecordId: number;
        LogisticsLocationRoleRecordId: number;
        PhoneLogisticsLocationRecordId: number;
        PhoneLogisticsLocationId: string;
        EmailLogisticsLocationRecordId: number;
        EmailLogisticsLocationId: string;
        UrlLogisticsLocationRecordId: number;
        UrlLogisticsLocationId: string;
        ExpireRecordId: number;
        SortOrder: number;
        RoleCount: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * CustomerAffiliation entity class.
     */
    class CustomerAffiliationClass implements CustomerAffiliation {
        RecordId: number;
        RetailAffiliationId: number;
        Name: string;
        Description: string;
        HideInChannels: boolean;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * CustomerBalances entity class.
     */
    class CustomerBalancesClass implements CustomerBalances {
        Balance: number;
        PendingBalance: number;
        CreditLimit: number;
        InvoiceAccountBalance: number;
        InvoiceAccountPendingBalance: number;
        InvoiceAccountCreditLimit: number;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * GlobalCustomer entity class.
     */
    class GlobalCustomerClass implements GlobalCustomer {
        PartyNumber: string;
        RecordId: number;
        IsAsyncCustomer: boolean;
        AccountNumber: string;
        FullName: string;
        FullAddress: string;
        Phone: string;
        Email: string;
        CustomerTypeValue: number;
        Images: Entities.MediaLocation[];
        OfflineImage: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * AttributeValue entity class.
     */
    class AttributeValueClass implements AttributeValue {
        Name: string;
        KeyName: string;
        UnitOfMeasureSymbol: string;
        DataTypeValue: number;
        BooleanValue: boolean;
        DateTimeOffsetValue: Date;
        FloatValue: number;
        IntegerValue: number;
        TextValue: string;
        CurrencyValue: number;
        CurrencyCode: string;
        AttributeValueId: number;
        RecordId: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * AttributeValueBase entity class.
     */
    class AttributeValueBaseClass implements AttributeValueBase {
        Name: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * Barcode entity class.
     */
    class BarcodeClass implements Barcode {
        BarcodeId: string;
        BarcodePrice: number;
        Quantity: number;
        CustomerId: string;
        EmployeeId: string;
        SalespersonId: string;
        EANLicenseId: string;
        DataEntry: string;
        DiscountCode: string;
        GiftCardNumber: string;
        LoyaltyCardNumber: string;
        ItemBarcode: Entities.ItemBarcode;
        EntryMethodTypeValue: number;
        ItemType: number;
        EnterDimensions: boolean;
        ItemGroupId: string;
        ItemDepartmentId: string;
        ScaleItem: boolean;
        ZeroPriceValid: boolean;
        NegativeQuantity: boolean;
        DiscountNotAllowed: boolean;
        DateToBeBlocked: Date;
        DateToBeActivated: Date;
        CheckDigitValidated: boolean;
        CouponId: string;
        Message: string;
        LineDiscountGroup: string;
        MultilineDiscountGroup: string;
        IncludedInTotalDiscount: boolean;
        CostPrice: number;
        BatchId: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ItemBarcode entity class.
     */
    class ItemBarcodeClass implements ItemBarcode {
        RecordId: number;
        ItemId: string;
        Description: string;
        BarcodeSetupId: string;
        ItemBarcodeValue: string;
        InventoryDimensionId: string;
        IsBlocked: boolean;
        Display: boolean;
        VariantId: string;
        UnitId: string;
        UseForInput: boolean;
        UseForPrinting: boolean;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ButtonGrid entity class.
     */
    class ButtonGridClass implements ButtonGrid {
        Id: string;
        Name: string;
        DefaultColor: number;
        SpaceBetweenButtonsInPixels: number;
        Buttons: Entities.ButtonGridButton[];
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * GetButtonGridsByIdsCriteria entity class.
     */
    class GetButtonGridsByIdsCriteriaClass implements GetButtonGridsByIdsCriteria {
        ButtonGridIds: string[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * CartLine entity class.
     */
    class CartLineClass implements CartLine {
        LineId: string;
        TaxOverrideCode: string;
        ItemId: string;
        Barcode: string;
        EntryMethodTypeValue: number;
        Description: string;
        InventoryDimensionId: string;
        Comment: string;
        ProductId: number;
        WarehouseId: string;
        Quantity: number;
        Price: number;
        ExtendedPrice: number;
        TaxAmount: number;
        ItemTaxGroupId: string;
        TotalAmount: number;
        NetAmountWithoutTax: number;
        NetPrice: number;
        DiscountAmountWithoutTax: number;
        DiscountAmount: number;
        LineDiscount: number;
        LinePercentageDiscount: number;
        LineManualDiscountPercentage: number;
        LineManualDiscountAmount: number;
        UnitOfMeasureSymbol: string;
        ShippingAddress: Entities.Address;
        DeliveryMode: string;
        DeliveryModeChargeAmount: number;
        RequestedDeliveryDate: Date;
        IsWarrantyLine: boolean;
        WarrantableTransactionId: string;
        WarrantableSalesId: string;
        WarrantableLineNumber: number;
        WarrantableSerialNumber: string;
        WarrantiedId: string;
        ReturnTransactionId: string;
        ReturnLineNumber: number;
        ReturnInventTransId: string;
        IsVoided: boolean;
        IsTaxOverideCodeTaxExempt: boolean;
        IsGiftCardLine: boolean;
        IsPriceKeyedIn: boolean;
        GiftCardId: string;
        GiftCardCurrencyCode: string;
        GiftCardOperationValue: number;
        GiftCardTypeValue: number;
        SalesStatusValue: number;
        QuantityOrdered: number;
        QuantityInvoiced: number;
        QuantityCanceled: number;
        FulfillmentStoreId: string;
        SerialNumber: string;
        ElectronicDeliveryEmail: string;
        ElectronicDeliveryEmailContent: string;
        IsPriceOverridden: boolean;
        OriginalPrice: number;
        IsInvoiceLine: boolean;
        InvoiceId: string;
        InvoiceAmount: number;
        GiftCardBalance: number;
        LineVersion: number;
        PromotionLines: string[];
        DiscountLines: Entities.DiscountLine[];
        RelatedDiscountedLineIds: string[];
        ReasonCodeLines: Entities.ReasonCodeLine[];
        ChargeLines: Entities.ChargeLine[];
        TaxRatePercent: number;
        IsCustomerAccountDeposit: boolean;
        LinkedParentLineId: string;
        QuantityReturnable: number;
        ExtensionProperties: Entities.CommerceProperty[];
        LineNumber: number;
        CommissionSalesGroup: string;
        TrackingId: string;
        StaffId: string;
        QuantityRemained: number;
        QuantityShipped: number;
        CatalogId: number;
        AttributeValues: Entities.AttributeValueBase[];
        ThirdPartyGiftCardInfo: Entities.ThirdPartyGiftCardInfo;
        BarcodeEmbeddedPrice: number;
        PriceInBarcode: boolean;
        InvoiceTypeValue: number;
        InvoicedSalesId: string;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ThirdPartyGiftCardInfo entity class.
     */
    class ThirdPartyGiftCardInfoClass implements ThirdPartyGiftCardInfo {
        Amount: number;
        Authorization: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * CardTypeInfo entity class.
     */
    class CardTypeInfoClass implements CardTypeInfo {
        RecordId: number;
        TypeId: string;
        Name: string;
        PaymentMethodId: string;
        CardTypeValue: number;
        Issuer: string;
        NumberFrom: string;
        NumberTo: string;
        CashBackLimit: number;
        AllowManualInput: boolean;
        CheckModulus: boolean;
        HasTenderDiscount: boolean;
        IsPinRequired: boolean;
        IsExpirationDateRequired: boolean;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * CashDeclaration entity class.
     */
    class CashDeclarationClass implements CashDeclaration {
        RecordId: number;
        Currency: string;
        Amount: number;
        CashTypeValue: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * IncomeExpenseAccount entity class.
     */
    class IncomeExpenseAccountClass implements IncomeExpenseAccount {
        Amount: number;
        AccountNumber: string;
        AccountName: string;
        AccountNameAlias: string;
        AccountTypeValue: number;
        Quantity: number;
        Message1Line: string;
        Message2Line: string;
        SlipText1Line: string;
        SlipText2Line: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * IncomeExpenseLine entity class.
     */
    class IncomeExpenseLineClass implements IncomeExpenseLine {
        Amount: number;
        IncomeExpenseAccount: string;
        StoreNumber: string;
        AccountTypeValue: number;
        Terminal: string;
        Shift: string;
        TransactionStatusValue: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * CartTenderLine entity class.
     */
    class CartTenderLineClass implements CartTenderLine {
        PaymentCard: Entities.PaymentCard;
        TokenizedPaymentCard: Entities.TokenizedPaymentCard;
        IsLinkedRefund: boolean;
        LinkedPaymentStore: string;
        LinkedPaymentTerminalId: string;
        LinkedPaymentTransactionId: string;
        LinkedPaymentLineNumber: number;
        LinkedPaymentCurrency: string;
        TenderLineId: string;
        Amount: number;
        CashBackAmount: number;
        AmountInTenderedCurrency: number;
        AmountInCompanyCurrency: number;
        Currency: string;
        ExchangeRate: number;
        CompanyCurrencyExchangeRate: number;
        TenderTypeId: string;
        SignatureData: string;
        ReasonCodeLines: Entities.ReasonCodeLine[];
        LineNumber: number;
        GiftCardId: string;
        GiftCardPin: string;
        GiftCardExpirationYear: number;
        GiftCardExpirationMonth: number;
        CreditMemoId: string;
        CustomerId: string;
        LoyaltyCardId: string;
        CardTypeId: string;
        IsChangeLine: boolean;
        IsHistorical: boolean;
        IsVoidable: boolean;
        StatusValue: number;
        VoidStatusValue: number;
        AuthorizedAmount: number;
        PaymentRefRecId: number;
        CardPaymentAccountId: string;
        ProcessingTypeValue: number;
        CardProcessorStatusValue: number;
        LinkedPaymentRefRecId: number;
        IsPolicyBypassed: boolean;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ChargeLine entity class.
     */
    class ChargeLineClass implements ChargeLine {
        ChargeLineId: string;
        ChargeCode: string;
        CurrencyCode: string;
        ModuleTypeValue: number;
        IsHeaderChargeProrated: boolean;
        ChargeTypeValue: number;
        ChargeMethodValue: number;
        CalculatedAmount: number;
        Value: number;
        Description: string;
        TransactionId: string;
        MarkupAutoLineRecordId: number;
        MarkupAutoTableRecId: number;
        SaleLineNumber: number;
        FromAmount: number;
        ToAmount: number;
        Keep: number;
        AmountRefunded: number;
        ChargeLineOverrides: Entities.ChargeLineOverride[];
        ReasonCodeLines: Entities.ReasonCodeLine[];
        IsRefundable: boolean;
        IsShipping: boolean;
        IsOverridden: boolean;
        ItemId: string;
        Quantity: number;
        Price: number;
        ItemTaxGroupId: string;
        SalesTaxGroupId: string;
        OriginalSalesTaxGroupId: string;
        OriginalItemTaxGroupId: string;
        TaxAmount: number;
        SalesOrderUnitOfMeasure: string;
        NetAmount: number;
        NetAmountPerUnit: number;
        GrossAmount: number;
        TaxLines: Entities.TaxLine[];
        TaxMeasures: Entities.TaxMeasure[];
        TaxAmountExemptInclusive: number;
        TaxAmountInclusive: number;
        TaxAmountExclusive: number;
        NetAmountWithAllInclusiveTax: number;
        BeginDateTime: Date;
        EndDateTime: Date;
        TaxRatePercent: number;
        IsReturnByReceipt: boolean;
        ReturnLineTaxAmount: number;
        ReturnTaxLines: Entities.TaxLine[];
        TaxExemptPriceInclusiveReductionAmount: number;
        TaxExemptPriceInclusiveOriginalPrice: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * CityInfo entity class.
     */
    class CityInfoClass implements CityInfo {
        Name: string;
        Description: string;
        CountryRegionId: string;
        StateId: string;
        CountyId: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * CommissionSalesGroup entity class.
     */
    class CommissionSalesGroupClass implements CommissionSalesGroup {
        GroupId: string;
        Name: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ContactInformation entity class.
     */
    class ContactInformationClass implements ContactInformation {
        Value: string;
        ContactInformationTypeValue: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * AttributeCategory entity class.
     */
    class AttributeCategoryClass implements AttributeCategory {
        Value: Entities.CommercePropertyValue;
        RecordId: number;
        Name: string;
        KeyName: string;
        DataTypeValue: number;
        Attribute: number;
        NameTranslations: Entities.TextValueTranslation[];
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * AttributeProduct entity class.
     */
    class AttributeProductClass implements AttributeProduct {
        MetadataFlags: Entities.ProductAttributeMetadataFlags;
        IsDimension: boolean;
        RecordId: number;
        Name: string;
        KeyName: string;
        DataTypeValue: number;
        Attribute: number;
        NameTranslations: Entities.TextValueTranslation[];
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ProductComparisonEntry entity class.
     */
    class ProductComparisonEntryClass implements ProductComparisonEntry {
        ProductId: number;
        AttributeValue: Entities.AttributeValue;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ProductComparisonLine entity class.
     */
    class ProductComparisonLineClass implements ProductComparisonLine {
        AttributeRecordId: number;
        AttributeName: string;
        ProductAttributeComparisonEntries: Entities.ProductComparisonEntry[];
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * CustomerSearchField entity class.
     */
    class CustomerSearchFieldClass implements CustomerSearchField {
        IsShortcut: boolean;
        DisplayName: string;
        CanBeRefined: boolean;
        SearchField: Entities.CustomerSearchFieldType;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * CustomerSearchByFieldCriteria entity class.
     */
    class CustomerSearchByFieldCriteriaClass implements CustomerSearchByFieldCriteria {
        Criteria: Entities.CustomerSearchByFieldCriterion[];
        DataLevelValue: number;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * CustomerSearchByFieldCriterion entity class.
     */
    class CustomerSearchByFieldCriterionClass implements CustomerSearchByFieldCriterion {
        SearchTerm: string;
        SearchField: Entities.CustomerSearchFieldType;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * CustomerSearchFieldType entity class.
     */
    class CustomerSearchFieldTypeClass extends ExtensibleEnumerationClass implements CustomerSearchFieldType {
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * OrderShipments entity class.
     */
    class OrderShipmentsClass implements OrderShipments {
        SalesId: string;
        ChannelId: number;
        ChannelReferenceId: string;
        TransactionId: string;
        CreatedDateTime: Date;
        StatusValue: number;
        CurrencyCode: string;
        CustomerId: string;
        DeliveryMode: string;
        GrossAmount: number;
        InventoryLocationId: string;
        ReceiptId: string;
        RequestedDeliveryDate: Date;
        TotalAmount: number;
        TaxAmount: number;
        SalesLines: Entities.SalesLine[];
        Shipments: Entities.Shipment[];
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * Shipment entity class.
     */
    class ShipmentClass implements Shipment {
        SalesId: string;
        ShipmentId: string;
        DeliveryAddress: Entities.Address;
        ShipDate: Date;
        DeliveryMode: string;
        TermsOfDelivery: string;
        WeightUnit: string;
        TrackingNumber: string;
        TrackingUrl: string;
        LatestCarrierTrackingInfo: Entities.TrackingInfo;
        CarrierId: string;
        CarrierName: string;
        ShippingWeight: number;
        ShipmentLines: Entities.ShipmentLine[];
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ShipmentLine entity class.
     */
    class ShipmentLineClass implements ShipmentLine {
        ShipmentLineId: string;
        ItemId: string;
        Description: string;
        InventDimId: string;
        OrderedQuantity: number;
        DeliveredQuantity: number;
        RemainingQuantity: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * Transaction entity class.
     */
    class TransactionClass implements Transaction {
        Id: string;
        StoreId: string;
        TerminalId: string;
        IsCreatedOffline: boolean;
        StaffId: string;
        ShiftId: string;
        ShiftTerminalId: string;
        Description: string;
        ReceiptId: string;
        GrossAmount: number;
        TotalAmount: number;
        CreatedDateTime: Date;
        TransactionTypeValue: number;
        TransactionStatusValue: number;
        BeginDateTime: Date;
        GiftCardActiveFrom: Date;
        GiftCardBalance: number;
        GiftCardExpireDate: Date;
        GiftCardHistoryDetails: string;
        GiftCardIssueAmount: number;
        GiftCardIdMasked: string;
        FromSafe: string;
        ToSafe: string;
        FromShiftTerminalId: string;
        ToShiftTerminalId: string;
        FromShiftId: string;
        TransactionSourceContextTypeValue: number;
        TransactionDestinationContextTypeValue: number;
        ToShiftId: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ShiftReconciliationLine entity class.
     */
    class ShiftReconciliationLineClass extends TransactionClass implements ShiftReconciliationLine {
        GroupId: number;
        GroupDescription: string;
        ShiftGroupLinesCount: number;
        ShiftGroupLinesClosedCount: number;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ShiftReconciliationLineRetrievalCriteria entity class.
     */
    class ShiftReconciliationLineRetrievalCriteriaClass implements ShiftReconciliationLineRetrievalCriteria {
        TransactionTypeValues: number[];
        ShiftReconciliationLineStatusValue: number;
        Shifts: Entities.ShiftKey[];
        DestinationShift: Entities.ShiftKey;
        SourceShift: Entities.ShiftKey;
        SourceSafe: string;
        DestinationSafe: string;
        TransactionSourceContextTypeValue: number;
        TransactionDestinationContextTypeValue: number;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * SearchConfiguration entity class.
     */
    class SearchConfigurationClass implements SearchConfiguration {
        ProductSortColumns: Entities.SortColumn[];
        ProductSearchServiceTypeValue: number;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * CustomerTimelineItem entity class.
     */
    class CustomerTimelineItemClass implements CustomerTimelineItem {
        CustomerId: string;
        Description: string;
        Id: string;
        EntityType: string;
        TypeId: string;
        StaffId: string;
        StartDateTime: Date;
        Title: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * AttributeDefinition entity class.
     */
    class AttributeDefinitionClass implements AttributeDefinition {
        RecordId: number;
        Name: string;
        AttributeTypeName: string;
        ExtDataType: Entities.ExtensibleAttributeDataType;
        DataTypeValue: number;
        IsHidden: boolean;
        IsMandatory: boolean;
        IsMultiValue: boolean;
        IsEnumeration: boolean;
        TranslationDetails: Entities.AttributeTranslationDetails[];
        EnumerationDetails: Entities.AttributeEnumeration[];
        DefaultValue: Entities.CommercePropertyValue;
        UpperBound: Entities.CommercePropertyValue;
        LowerBound: Entities.CommercePropertyValue;
        DisplayOrder: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * AttributeTranslationDetails entity class.
     */
    class AttributeTranslationDetailsClass implements AttributeTranslationDetails {
        AttributeRecordId: number;
        LanguageId: string;
        FriendlyName: string;
        Description: string;
        HelpText: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * AttributeEnumeration entity class.
     */
    class AttributeEnumerationClass implements AttributeEnumeration {
        OrdinalNumber: number;
        EnumerationValue: string;
        AttributeEnumerationTranslations: Entities.AttributeEnumerationTranslation[];
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * AttributeEnumerationTranslation entity class.
     */
    class AttributeEnumerationTranslationClass implements AttributeEnumerationTranslation {
        LanguageId: string;
        EnumerationTranslationValue: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * AttributeDefinitionCriteria entity class.
     */
    class AttributeDefinitionCriteriaClass implements AttributeDefinitionCriteria {
        AttributeGroupIdentifier: number;
        Languages: string[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * AttributeGroupDefinition entity class.
     */
    class AttributeGroupDefinitionClass implements AttributeGroupDefinition {
        RecordId: number;
        Name: string;
        TranslationDetails: Entities.AttributeGroupTranslationDetails[];
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * AttributeGroupTranslationDetails entity class.
     */
    class AttributeGroupTranslationDetailsClass implements AttributeGroupTranslationDetails {
        AttributeGroupRecordId: number;
        LanguageId: string;
        FriendlyName: string;
        Description: string;
        HelpText: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * AttributeGroupDefinitionCriteria entity class.
     */
    class AttributeGroupDefinitionCriteriaClass implements AttributeGroupDefinitionCriteria {
        AttributeGroupIdentifiers: number[];
        Languages: string[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * CountyInfo entity class.
     */
    class CountyInfoClass implements CountyInfo {
        Name: string;
        CountyId: string;
        CountryRegionId: string;
        StateId: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * CustomerGroup entity class.
     */
    class CustomerGroupClass implements CustomerGroup {
        CustomerGroupNumber: string;
        CustomerGroupName: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * DiscountLine entity class.
     */
    class DiscountLineClass implements DiscountLine {
        SaleLineNumber: number;
        OfferId: string;
        OfferName: string;
        Amount: number;
        DiscountCost: number;
        EffectiveAmount: number;
        SavedEffectiveAmount: number;
        Percentage: number;
        DealPrice: number;
        DiscountLineTypeValue: number;
        ManualDiscountTypeValue: number;
        CustomerDiscountTypeValue: number;
        PeriodicDiscountTypeValue: number;
        DiscountApplicationGroup: string;
        ConcurrencyModeValue: number;
        IsCompoundable: boolean;
        DiscountCode: string;
        PricingPriorityNumber: number;
        IsDiscountCodeRequired: boolean;
        ThresholdAmountRequired: number;
        BundleId: number;
        ValidFrom: Date;
        ValidTo: Date;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * EmployeePermissions entity class.
     */
    class EmployeePermissionsClass implements EmployeePermissions {
        PriceOverrideRestrictionValue: number;
        AllowPriceOverride: number;
        MaximumDiscountPercentage: number;
        MaximumLineDiscountAmount: number;
        MaximumLineReturnAmount: number;
        MaximumTotalDiscountAmount: number;
        MaximumTotalDiscountPercentage: number;
        MaxTotalReturnAmount: number;
        StaffId: string;
        Roles: string[];
        AllowUseSharedShift: boolean;
        AllowManageSharedShift: boolean;
        AllowTaskGuides: boolean;
        AllowSaleOutsideAssortment: boolean;
        AllowPrintingReceiptCopy: string;
        AllowSkipFiscalRegistration: boolean;
        AllowSkipRegistrationOrMarkAsRegistered: boolean;
        AllowCreateTransferOrder: boolean;
        AllowAcceptOrder: boolean;
        AllowTaskManagement: boolean;
        AllowRejectOrder: boolean;
        AllowMassActivation: boolean;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * CommerceProperty entity class.
     */
    class CommercePropertyClass implements CommerceProperty {
        Key: string;
        Value: Entities.CommercePropertyValue;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * CommercePropertyValue entity class.
     */
    class CommercePropertyValueClass implements CommercePropertyValue {
        BooleanValue: boolean;
        ByteValue: number;
        DateTimeOffsetValue: Date;
        DecimalValue: number;
        IntegerValue: number;
        LongValue: number;
        StringValue: string;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * CountryRegionInfo entity class.
     */
    class CountryRegionInfoClass implements CountryRegionInfo {
        CountryRegionId: string;
        ShortName: string;
        LongName: string;
        ISOCode: string;
        TimeZone: number;
        LanguageId: string;
        AddressFormatLines: Entities.AddressFormattingInfo[];
        AddressFormatId: string;
        AddressFormatName: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * CreditMemo entity class.
     */
    class CreditMemoClass implements CreditMemo {
        Id: string;
        Balance: number;
        CurrencyCode: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * Currency entity class.
     */
    class CurrencyClass implements Currency {
        CurrencyCode: string;
        CurrencySymbol: string;
        RoundOffPrice: number;
        RoundOffSales: number;
        RoundOffTypePrice: number;
        RoundOffTypeSales: number;
        NumberOfDecimals: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * CurrencyAmount entity class.
     */
    class CurrencyAmountClass implements CurrencyAmount {
        CurrencyCode: string;
        CurrencySymbol: string;
        ConvertedAmount: number;
        RoundedConvertedAmount: number;
        ExchangeRate: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * EnvironmentConfiguration entity class.
     */
    class EnvironmentConfigurationClass implements EnvironmentConfiguration {
        EnvironmentId: string;
        EnvironmentName: string;
        TenantId: string;
        ClientAppInsightsInstrumentationKey: string;
        HardwareStationAppInsightsInstrumentationKey: string;
        WindowsPhonePosAppInsightsInstrumentationKey: string;
        BaseVersion: string;
        ScaleUnit: Entities.ScaleUnitConfiguration;
        AADAuthority: string;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * DeviceConfiguration entity class.
     */
    class DeviceConfigurationClass implements DeviceConfiguration {
        UseInMemoryDeviceDataStorage: boolean;
        AllowItemsAggregation: boolean;
        AggregateItemsForPrinting: boolean;
        AggregatePayments: boolean;
        AlwaysExpandTransactionScreenLineDetails: boolean;
        AuditEnabled: boolean;
        DiscountAtTotal: string;
        ProductDiscount: string;
        ManuallyCalculateComplexDiscounts: boolean;
        DisplaySecondaryTotalCurrency: boolean;
        EndOfTransaction: string;
        ItemNotOnFile: string;
        LimitStaffListToStore: boolean;
        LineItemTaxChange: string;
        MarkUp: string;
        MaximumPrice: number;
        MaximumQuantity: number;
        MinimumPasswordLength: number;
        MustKeyInPriceIfZero: boolean;
        NfcEContingencyModeEnabled: string;
        NfcEVoided: string;
        FunctionalityProfileDescription: string;
        OverridePrice: string;
        PrintVoidTransactionReceipts: boolean;
        PrintReceiptsOnCardDecline: boolean;
        PrintXZReportsOnTerminal: boolean;
        PrintTenderDetailsOnXReport: boolean;
        ProfileId: string;
        RefundSale: string;
        ReturnProduct: string;
        SalesPerson: string;
        SecondaryTotalCurrency: string;
        SelectHardwareStationOnTendering: boolean;
        SerialNumber: string;
        ShowStaffListAtLogOn: boolean;
        StaffBarcodeLogOn: boolean;
        StaffBarcodeLogOnRequiresPassword: boolean;
        StaffCardLogOn: boolean;
        StaffCardLogOnRequiresPassword: boolean;
        StartOfTransaction: string;
        EnableTimeRegistration: boolean;
        TenderDeclaration: string;
        TransactionTaxChange: string;
        VoidItem: string;
        VoidPayment: string;
        SalesModeDefaultsAsCustomerOrder: boolean;
        CreateOfflineCustomerOrders: boolean;
        CreateAsyncCustomers: boolean;
        EnableAxCustomerSearch: boolean;
        VoidTransaction: string;
        CultureName: string;
        SystemLegalTermsUrl: string;
        SystemPrivacyStatementUrl: string;
        HideTrainingMode: boolean;
        StorePhone: string;
        StatementMethod: string;
        StoreNumber: string;
        ChannelId: number;
        StoreTaxGroup: string;
        TaxIdNumber: string;
        TaxOverrideGroup: number;
        TenderDeclarationCalculation: number;
        UseCustomerBasedTax: boolean;
        UseDestinationBasedTax: boolean;
        AutoLogOffTimeoutInMinutes: number;
        AutoExitMethodValue: number;
        CustomerDisplayText1: string;
        CustomerDisplayText2: string;
        EFTStoreId: number;
        EFTTerminalId: string;
        ExitAfterEachTransaction: boolean;
        HardwareProfile: string;
        Placement: string;
        TerminalDescription: string;
        OpenDrawer: string;
        OpenDrawerAtLogOnLogOff: boolean;
        PrintTaxRefundChecks: boolean;
        StandAlone: boolean;
        TerminalId: string;
        TerminalStatement: boolean;
        VisualProfile: string;
        Currency: string;
        InventLocationId: string;
        IncludeKitComponents: boolean;
        AccentColor: number;
        HeaderColor: number;
        Theme: string;
        FontScheme: number;
        ShowAppBarLabel: boolean;
        LogOnBackgroundPictureAsBase64: string;
        LogOnBackgroundPicturePortraitAsBase64: string;
        BackgroundPictureAsBase64: string;
        LogonBackgroundPictureId: number;
        LogonBackgroundPictureIdCompact: number;
        LogonBackgroundPictureIdPortrait: number;
        LogonBackgroundPictureIdCompactPortrait: number;
        BackgroundPictureId: number;
        RequireAmountDeclaration: boolean;
        DecimalNotRequiredForMinorCurrencyUnit: boolean;
        MaxTransactionSearchResults: number;
        OfflineProfileId: number;
        NewOfflineDatabaseCheckInterval: number;
        OfflineTransactionUploadInterval: number;
        ReconnectToOnlineInterval: number;
        SwitchToOfflineTimeout: number;
        RetentionDays: number;
        HardwareConfigurations: Entities.HardwareConfigurations;
        CreateRecording: boolean;
        PlaybackRecording: boolean;
        ShouldUseDefaultCommisionSalesGroup: boolean;
        AskForSalesRepresentative: number;
        IsSalesRepRequired: boolean;
        ProhibitMixingSalesAndReturns: boolean;
        ApplyDiscountsToPriceKeyedIn: boolean;
        ApplyDiscountsToPriceOverrides: boolean;
        IsProductSuggestionsEnabled: boolean;
        ProductSearchType: string;
        TerminalRecId: number;
        DeviceRecId: number;
        DenominationsToDisplayValue: number;
        PromptOnSeamlessOffline: boolean;
        RetryCountToOffline: number;
        EnableAdvancedOfflineSwitching: boolean;
        SystemHealthCheckInterval: number;
        RejectOrderFulfillment: string;
        ManuallyCalculateTaxes: boolean;
        EmployeeLogonTypeValue: number;
        StartAmountCalculation: number;
        BankDropCalculation: number;
        GenerateLoyaltyCardNumber: boolean;
        FiscalRegistrationProcessId: string;
        IncludeSalesOrderInvoices: boolean;
        IncludeFreeTextInvoices: boolean;
        IncludeProjectInvoices: boolean;
        IncludeCreditNoteInvoices: boolean;
        DisplayTaxExemptInLineDetails: boolean;
        TaxExemptReceiptIndicator: string;
        ManuallyCalculateCharges: boolean;
        ChargeOverrideReasonCode: string;
        ShiftReconcilation: string;
        CustomerAccountFloorLimit: number;
        VoidSuspendedTransactionsOnCloseShift: boolean;
        ShowDateTime: boolean;
        UseAdvancedCashManagement: boolean;
        DefaultCustomerSearchModeValue: number;
        AllowManualOfflineBeforeSignIn: boolean;
        UseFinancialReconciliationInStore: boolean;
        RequirePaymentForFulfillmentValue: number;
        CardNotPresentProcessingConfigurationValue: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * VisualProfile entity class.
     */
    class VisualProfileClass implements VisualProfile {
        ChannelId: number;
        TerminalId: string;
        AccentColor: number;
        HeaderColor: number;
        Theme: string;
        FontSchemeTypeValue: number;
        IsAppBarLabelVisible: boolean;
        IsDateTimeVisible: boolean;
        LogOnLayoutTypeValue: number;
        LogOnKeyboardTypeValue: number;
        LogonBackgroundPictureId: number;
        CompactLogonBackgroundPictureId: number;
        PortraitLogonBackgroundPictureId: number;
        CompactPortraitLogonBackgroundPictureId: number;
        BackgroundPictureId: number;
        LogOnLogoPictureId: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * Device entity class.
     */
    class DeviceClass implements Device {
        ChannelId: number;
        RecordId: number;
        DeviceNumber: string;
        DeviceId: string;
        Description: string;
        DeviceType: number;
        TerminalRecordId: number;
        TerminalId: string;
        ChannelName: string;
        UseInMemoryDeviceDataStorage: boolean;
        AllowMassActivation: boolean;
        TokenIssueTime: Date;
        ActivationStatusValue: number;
        Token: string;
        CountryRegionIsoCode: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * DiscountCode entity class.
     */
    class DiscountCodeClass implements DiscountCode {
        RecordId: number;
        Barcode: string;
        Code: string;
        ConcurrencyMode: number;
        Description: string;
        Disclaimer: string;
        IsDiscountCodeRequired: boolean;
        Name: string;
        OfferId: string;
        IsEnabled: boolean;
        ValidFrom: Date;
        ValidTo: Date;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * DistrictInfo entity class.
     */
    class DistrictInfoClass implements DistrictInfo {
        Name: string;
        Description: string;
        CountryRegionId: string;
        StateId: string;
        CountyId: string;
        CityName: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * HardwareProfile entity class.
     */
    class HardwareProfileClass implements HardwareProfile {
        RecordId: number;
        LineDisplayDelayForLinkedItems: number;
        LineDisplayBalanceText: string;
        LineDisplayBinaryConversion: boolean;
        LineDisplayCharacterSet: number;
        LineDisplayClosedLine1: string;
        LineDisplayClosedLine2: string;
        LineDisplayDeviceDescription: string;
        LineDisplayDeviceTypeValue: number;
        LineDisplayDeviceName: string;
        LineDisplayDisplayLinkedItem: boolean;
        LineDisplayDisplayTerminalClosed: boolean;
        LineDisplayTotalText: string;
        DualDisplayActive: boolean;
        DualDisplayWebBrowserUrl: string;
        DualDisplayImageRotatorInterval: number;
        DualDisplayImageRotatorPath: string;
        DualDisplayReceiptWidthPercentage: number;
        DualDisplayDisplayType: string;
        EftTypeId: number;
        EftCompanyId: string;
        EftConfiguration: number;
        EftPaymentConnectorName: string;
        EftData: string;
        EftDescription: string;
        EftMerchantId: string;
        EftPassword: string;
        EftServerName: string;
        EftServerPort: string;
        EftUserId: string;
        EftTestMode: boolean;
        MsrEndTrack1: string;
        MsrEndTrack2: string;
        FiscalPrinterManagementReportPAFIdentification: string;
        FiscalPrinterManagementReportConfigParameter: string;
        FiscalPrinterManagementReportTenderType: string;
        FiscalPrinterManagementReportGiftCard: string;
        FiscalRegisterDeviceTypeValue: number;
        FiscalRegisterConfiguration: string;
        FiscalRegisterDeviceDescription: string;
        FiscalRegisterDeviceName: string;
        KeyboardMappingId: string;
        KeyLockDeviceTypeValue: number;
        KeyLockDeviceDescription: string;
        KeyLockDeviceName: string;
        MsrDeviceTypeValue: number;
        MsrDeviceDescription: string;
        MsrDeviceName: string;
        MsrMake: string;
        MsrModel: string;
        MsrSeparator: string;
        MsrStartTrack: string;
        PinPadDeviceTypeValue: number;
        PinPadDeviceName: string;
        PinPadMake: string;
        PinPadModel: string;
        PinPadDeviceDescription: string;
        ProfileDescription: string;
        ProfileId: string;
        RFIDDeviceTypeValue: number;
        RFIDDeviceName: string;
        RFIDDeviceDescription: string;
        ScaleDeviceTypeValue: number;
        ScaleDeviceName: string;
        ScaleDeviceDescription: string;
        ScaleManualInputAllowed: boolean;
        ScaleTimeoutInSeconds: number;
        SignatureCaptureDeviceTypeValue: number;
        SignatureCaptureDeviceName: string;
        SignatureCaptureMake: string;
        SignatureCaptureModel: string;
        SignatureCaptureDeviceDescription: string;
        SignatureCaptureFormName: string;
        Printers: Entities.HardwareProfilePrinter[];
        Scanners: Entities.HardwareProfileScanner[];
        FiscalIntegrationTechnicalProfiles: Entities.FiscalIntegrationTechnicalProfile[];
        CashDrawers: Entities.HardwareProfileCashDrawer[];
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * SupportedLanguage entity class.
     */
    class SupportedLanguageClass implements SupportedLanguage {
        LanguageId: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * PaymentCard entity class.
     */
    class PaymentCardClass implements PaymentCard {
        UseShippingAddress: boolean;
        CardNumber: string;
        CCID: string;
        Track1: string;
        Track2: string;
        Track3: string;
        VoiceAuthorizationCode: string;
        EncryptedPin: string;
        AdditionalSecurityData: string;
        IsSwipe: boolean;
        Phone: string;
        Country: string;
        House: string;
        Address1: string;
        Address2: string;
        City: string;
        State: string;
        Zip: string;
        NameOnCard: string;
        CardTypeId: string;
        ExpirationMonth: number;
        ExpirationYear: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * CardPaymentAcceptSettings entity class.
     */
    class CardPaymentAcceptSettingsClass implements CardPaymentAcceptSettings {
        HostPageOrigin: string;
        AdaptorPath: string;
        CardTokenizationEnabled: boolean;
        CardPaymentEnabled: boolean;
        PaymentAmount: number;
        HideBillingAddress: boolean;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * CardPaymentAcceptPoint entity class.
     */
    class CardPaymentAcceptPointClass implements CardPaymentAcceptPoint {
        AcceptPageUrl: string;
        AcceptPageSubmitUrl: string;
        MessageOrigin: string;
        AcceptPageContent: string;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * CardPaymentAcceptResult entity class.
     */
    class CardPaymentAcceptResultClass implements CardPaymentAcceptResult {
        TenderLine: Entities.TenderLine;
        TokenizedPaymentCard: Entities.TokenizedPaymentCard;
        PaymentSdkErrors: Entities.PaymentError[];
        AdditionalContext: string;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ReasonCodeLine entity class.
     */
    class ReasonCodeLineClass implements ReasonCodeLine {
        LineId: string;
        Amount: number;
        Information: string;
        InformationAmount: number;
        InputTypeValue: number;
        ItemTender: string;
        LineNumber: number;
        LineTypeValue: number;
        ParentLineId: string;
        ReasonCodeId: string;
        StatementCode: string;
        SubReasonCodeId: string;
        SourceCode: string;
        SourceCode2: string;
        SourceCode3: string;
        TransactionId: string;
        CreatedDateTime: Date;
        FiscalTransactionParentGuid: string;
        IsChanged: boolean;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ReasonSubCode entity class.
     */
    class ReasonSubCodeClass implements ReasonSubCode {
        TriggerCode: string;
        AmountPercent: number;
        ReasonCodeId: string;
        SubCodeId: string;
        Description: string;
        TriggerFunctionTypeValue: number;
        ProductId: number;
        PriceTypeValue: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * Receipt entity class.
     */
    class ReceiptClass implements Receipt {
        TransactionId: string;
        Header: string;
        Body: string;
        Footer: string;
        Width: number;
        ReceiptId: string;
        LayoutId: string;
        ReceiptTitle: string;
        ReceiptTypeValue: number;
        ReceiptTypeStrValue: string;
        Printers: Entities.Printer[];
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ReceiptMask entity class.
     */
    class ReceiptMaskClass implements ReceiptMask {
        FunctionalityProfileId: string;
        IsIndependent: boolean;
        ReceiptTransactionTypeValue: number;
        RecordId: number;
        Mask: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * SalesLine entity class.
     */
    class SalesLineClass implements SalesLine {
        StaffId: string;
        LineId: string;
        Description: string;
        OriginLineId: string;
        TaxOverrideCode: string;
        IsPriceKeyedIn: boolean;
        IsTaxOverideCodeTaxExempt: boolean;
        ProductId: number;
        Barcode: string;
        BarcodeEmbeddedPrice: number;
        PriceInBarcode: boolean;
        EntryMethodTypeValue: number;
        MasterProductId: number;
        ListingId: number;
        IsPriceOverridden: boolean;
        OriginalPrice: number;
        TotalAmount: number;
        NetAmountWithoutTax: number;
        DiscountAmount: number;
        DiscountAmountWithoutTax: number;
        NetPrice: number;
        TotalDiscount: number;
        TotalPercentageDiscount: number;
        LineDiscount: number;
        PeriodicDiscount: number;
        LineManualDiscountPercentage: number;
        LineManualDiscountAmount: number;
        ShippingAddress: Entities.Address;
        DeliveryMode: string;
        Comment: string;
        RequestedDeliveryDate: Date;
        InventoryLocationId: string;
        WarehouseLocation: string;
        InventoryStatusId: string;
        LicensePlate: string;
        InventoryDimensionId: string;
        ItemType: number;
        ReservationId: string;
        LineNumber: number;
        ReturnQuantity: number;
        QuantityRemained: number;
        QuantityShipped: number;
        LineVersion: number;
        StatusValue: number;
        SalesStatusValue: number;
        ProductSourceValue: number;
        IsGiftCardLine: boolean;
        GiftCardId: string;
        GiftCardCurrencyCode: string;
        GiftCardOperationValue: number;
        GiftCardTypeValue: number;
        IsInvoiceLine: boolean;
        InvoiceId: string;
        InvoiceAmount: number;
        IsInvoiceSettled: boolean;
        InvoiceTypeValue: number;
        InvoicedSalesId: string;
        IsVoided: boolean;
        IsPriceLocked: boolean;
        ChargeLines: Entities.ChargeLine[];
        BasePrice: number;
        AgreementPrice: number;
        AdjustedPrice: number;
        IsWarrantyLine: boolean;
        WarrantableTransactionId: string;
        WarrantableSalesId: string;
        WarrantableLineNumber: number;
        WarrantableSerialNumber: string;
        ReturnTransactionId: string;
        ReturnLineNumber: number;
        ReturnInventTransId: string;
        ReturnStore: string;
        ReturnTerminalId: string;
        ReturnChannelId: number;
        FulfillmentStoreId: string;
        SalesDate: Date;
        QuantityInvoiced: number;
        QuantityOrdered: number;
        QuantityCanceled: number;
        SavedQuantity: number;
        IsSavedDiscount: boolean;
        RecordId: number;
        SerialNumber: string;
        BatchId: string;
        DeliveryModeChargeAmount: number;
        UnitOfMeasureSymbol: string;
        CatalogId: number;
        ElectronicDeliveryEmailAddress: string;
        ElectronicDeliveryEmailContent: string;
        LoyaltyDiscountAmount: number;
        LoyaltyPercentageDiscount: number;
        TenderDiscountAmount: number;
        TenderDiscountPercentage: number;
        GiftCardBalance: number;
        IsCustomerAccountDeposit: boolean;
        Blocked: boolean;
        Found: boolean;
        DateToActivateItem: Date;
        LinePercentageDiscount: number;
        PeriodicPercentageDiscount: number;
        QuantityDiscounted: number;
        UnitQuantity: number;
        UnitOfMeasureConversion: Entities.UnitOfMeasureConversion;
        DiscountLines: Entities.DiscountLine[];
        PriceLines: Entities.PriceLine[];
        PeriodicDiscountPossibilities: Entities.DiscountLine[];
        ReasonCodeLines: Entities.ReasonCodeLine[];
        ReturnLabelProperties: Entities.ReturnLabelContent;
        LineMultilineDiscOnItem: string;
        RelatedDiscountedLineIds: string[];
        LinkedParentLineId: string;
        LineMultilineDiscOnItemValue: number;
        WasChanged: boolean;
        OriginalSalesOrderUnitOfMeasure: string;
        InventOrderUnitOfMeasure: string;
        TrackingId: string;
        IsLoyaltyDiscountApplied: boolean;
        CommissionSalesGroup: string;
        IsCommissionSalesGroupOverriddenByCustomer: boolean;
        CommissionSalesGroupSetByCashier: string;
        AttributeValues: Entities.AttributeValueBase[];
        ThirdPartyGiftCardInfo: Entities.ThirdPartyGiftCardInfo;
        QuantityReturnable: number;
        LoyaltyRewardPointLines: Entities.LoyaltyRewardPointLine[];
        ReturnLoyaltyRewardPointLines: Entities.LoyaltyRewardPointLine[];
        ItemId: string;
        Quantity: number;
        Price: number;
        ItemTaxGroupId: string;
        SalesTaxGroupId: string;
        OriginalSalesTaxGroupId: string;
        OriginalItemTaxGroupId: string;
        TaxAmount: number;
        SalesOrderUnitOfMeasure: string;
        NetAmount: number;
        NetAmountPerUnit: number;
        GrossAmount: number;
        TaxLines: Entities.TaxLine[];
        TaxMeasures: Entities.TaxMeasure[];
        TaxAmountExemptInclusive: number;
        TaxAmountInclusive: number;
        TaxAmountExclusive: number;
        NetAmountWithAllInclusiveTax: number;
        BeginDateTime: Date;
        EndDateTime: Date;
        TaxRatePercent: number;
        IsReturnByReceipt: boolean;
        ReturnLineTaxAmount: number;
        ReturnTaxLines: Entities.TaxLine[];
        TaxExemptPriceInclusiveReductionAmount: number;
        TaxExemptPriceInclusiveOriginalPrice: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * SearchArea entity class.
     */
    class SearchAreaClass implements SearchArea {
        Longitude: number;
        Latitude: number;
        Radius: number;
        DistanceUnitValue: number;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ShiftAccountLine entity class.
     */
    class ShiftAccountLineClass implements ShiftAccountLine {
        AccountTypeValue: number;
        AccountNumber: string;
        Amount: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ShiftTenderLine entity class.
     */
    class ShiftTenderLineClass implements ShiftTenderLine {
        TenderTypeId: string;
        TenderTypeName: string;
        CardTypeId: string;
        TenderCurrency: string;
        CountingRequired: boolean;
        StartingAmountOfStoreCurrency: number;
        StartingAmountOfTenderCurrency: number;
        FloatingEntryAmountOfStoreCurrency: number;
        FloatingEntryAmountOfTenderCurrency: number;
        SafeDropAmountOfStoreCurrency: number;
        SafeDropAmountOfTenderCurrency: number;
        BankDropAmountOfStoreCurrency: number;
        BankDropAmountOfTenderCurrency: number;
        RemoveTenderAmountOfStoreCurrency: number;
        RemoveTenderAmountOfTenderCurrency: number;
        DeclareTenderAmountOfStoreCurrency: number;
        DeclareTenderAmountOfTenderCurrency: number;
        TenderedAmountOfStoreCurrency: number;
        TenderedAmountOfTenderCurrency: number;
        ChangeAmountOfStoreCurrency: number;
        ChangeAmountOfTenderCurrency: number;
        Count: number;
        Notes: string;
        OverriddenFloatEntryAmountInTenderedCurrency: number;
        OverriddenBankDropAmountInTenderedCurrency: number;
        OverriddenChangeAmountInTenderedCurrency: number;
        OverriddenDeclaredTenderAmountInTenderedCurrency: number;
        OverriddenRemovedTenderAmountInTenderedCurrency: number;
        OverriddenSafeDropAmountInTenderedCurrency: number;
        OverriddenStartingAmountInTenderedCurrency: number;
        OverriddenTenderedAmountInTenderedCurrency: number;
        OverShortAmountOfTenderCurrency: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * StockCountJournalTransaction entity class.
     */
    class StockCountJournalTransactionClass implements StockCountJournalTransaction {
        JournalId: string;
        RecordId: number;
        OperationType: number;
        ItemId: string;
        DataAreaId: string;
        ProductRecordId: number;
        ItemName: string;
        InventDimId: string;
        Counted: number;
        Quantity: number;
        EstimatedOnHandQuantity: number;
        OnHandCalculationDateTime: Date;
        Unit: string;
        UserId: string;
        TerminalId: string;
        CountedDate: Date;
        Status: number;
        InventBatchId: string;
        WarehouseLocationId: string;
        InventoryStatus: string;
        LicensePlate: string;
        WarehousePalletId: string;
        InventSiteId: string;
        InventLocationId: string;
        ConfigId: string;
        InventSizeId: string;
        InventColorId: string;
        InventStyleId: string;
        InventSerialId: string;
        TrackingGuid: string;
        UpdatedInAx: boolean;
        Message: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * TaxLine entity class.
     */
    class TaxLineClass implements TaxLine {
        TaxGroup: string;
        Percentage: number;
        IsExempt: boolean;
        TaxBasis: number;
        IsIncludedInPrice: boolean;
        SaleLineNumber: number;
        StoreId: string;
        TerminalId: string;
        TransactionId: string;
        TaxCode: string;
        Amount: number;
        AmountRefunded: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * TenderLine entity class.
     */
    class TenderLineClass implements TenderLine {
        StoreId: string;
        TerminalId: string;
        TransactionId: string;
        RefundableAmount: number;
        CaptureToken: string;
        CardToken: string;
        Authorization: string;
        TransactionStatusValue: number;
        IncomeExpenseAccountTypeValue: number;
        MaskedCardNumber: string;
        TenderDate: Date;
        IsPreProcessed: boolean;
        IsDeposit: boolean;
        IsCustomerAccountFloorLimitUsed: boolean;
        ChannelId: number;
        IsLinkedRefund: boolean;
        LinkedPaymentStore: string;
        LinkedPaymentTerminalId: string;
        LinkedPaymentTransactionId: string;
        LinkedPaymentLineNumber: number;
        LinkedPaymentCurrency: string;
        TenderLineId: string;
        Amount: number;
        CashBackAmount: number;
        AmountInTenderedCurrency: number;
        AmountInCompanyCurrency: number;
        Currency: string;
        ExchangeRate: number;
        CompanyCurrencyExchangeRate: number;
        TenderTypeId: string;
        SignatureData: string;
        ReasonCodeLines: Entities.ReasonCodeLine[];
        LineNumber: number;
        GiftCardId: string;
        GiftCardPin: string;
        GiftCardExpirationYear: number;
        GiftCardExpirationMonth: number;
        CreditMemoId: string;
        CustomerId: string;
        LoyaltyCardId: string;
        CardTypeId: string;
        IsChangeLine: boolean;
        IsHistorical: boolean;
        IsVoidable: boolean;
        StatusValue: number;
        VoidStatusValue: number;
        AuthorizedAmount: number;
        PaymentRefRecId: number;
        CardPaymentAccountId: string;
        ProcessingTypeValue: number;
        CardProcessorStatusValue: number;
        LinkedPaymentRefRecId: number;
        IsPolicyBypassed: boolean;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * TextValueTranslation entity class.
     */
    class TextValueTranslationClass implements TextValueTranslation {
        Language: string;
        Text: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * UnitOfMeasure entity class.
     */
    class UnitOfMeasureClass implements UnitOfMeasure {
        DecimalPrecision: number;
        Symbol: string;
        Description: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * RecommendedElement entity class.
     */
    class RecommendedElementClass implements RecommendedElement {
        ElementId: string;
        ElementTypeValue: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * RecommendationCriteria entity class.
     */
    class RecommendationCriteriaClass implements RecommendationCriteria {
        CustomerAccountNumber: string;
        CatalogId: number;
        ProductIds: number[];
        CategoryIds: number[];
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ProductListLine entity class.
     */
    class ProductListLineClass implements ProductListLine {
        ProductListId: string;
        LineId: string;
        ProductId: number;
        Quantity: number;
        UnitOfMeasure: string;
        CreatedDateTime: Date;
        LastUpdated: Date;
        DeletedDateTime: Date;
        DataAreaId: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * CommerceListLine entity class.
     */
    class CommerceListLineClass implements CommerceListLine {
        CommerceListId: number;
        LineId: number;
        CustomerId: string;
        CustomerName: string;
        ProductId: number;
        Quantity: number;
        UnitOfMeasure: string;
        IsFavorite: boolean;
        IsRecurring: boolean;
        IsPrivate: boolean;
        CreatedDateTime: Date;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * CommerceListContributor entity class.
     */
    class CommerceListContributorClass implements CommerceListContributor {
        RecordId: number;
        CustomerId: string;
        CustomerName: string;
        InvitationId: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * CommerceListInvitation entity class.
     */
    class CommerceListInvitationClass implements CommerceListInvitation {
        RecordId: number;
        Invitee: string;
        IsSent: boolean;
        LastRequestDateTime: Date;
        LastSentDateTime: Date;
        StatusValue: number;
        Token: string;
        InvitationTypeValue: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * SearchFilter entity class.
     */
    class SearchFilterClass implements SearchFilter {
        Key: string;
        FilterTypeValue: number;
        SearchValues: Entities.SearchFilterValue[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * SearchFilterValue entity class.
     */
    class SearchFilterValueClass implements SearchFilterValue {
        Value: Entities.CommercePropertyValue;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * TransactionSearchCriteria entity class.
     */
    class TransactionSearchCriteriaClass implements TransactionSearchCriteria {
        TransactionIds: string[];
        SalesId: string;
        ReceiptId: string;
        ChannelReferenceId: string;
        CustomerAccountNumber: string;
        CustomerFirstName: string;
        CustomerLastName: string;
        StoreId: string;
        TerminalId: string;
        ItemId: string;
        Barcode: string;
        SerialNumber: string;
        StaffId: string;
        StartDateTime: Date;
        EndDateTime: Date;
        ReceiptEmailAddress: string;
        SearchIdentifiers: string;
        SearchLocationTypeValue: number;
        CustomFilters: Entities.SearchFilter[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * SalesOrderSearchCriteria entity class.
     */
    class SalesOrderSearchCriteriaClass implements SalesOrderSearchCriteria {
        TransactionIds: string[];
        SalesId: string;
        ReceiptId: string;
        ChannelReferenceId: string;
        CustomerAccountNumber: string;
        CustomerFirstName: string;
        CustomerLastName: string;
        StoreId: string;
        TerminalId: string;
        ItemId: string;
        Barcode: string;
        SerialNumber: string;
        StaffId: string;
        SearchTypeValue: number;
        StartDateTime: Date;
        EndDateTime: Date;
        IncludeDetails: boolean;
        ReceiptEmailAddress: string;
        SearchIdentifiers: string;
        SalesTransactionTypeValues: number[];
        SearchLocationTypeValue: number;
        TransactionStatusTypeValues: number[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * SearchStoreCriteria entity class.
     */
    class SearchStoreCriteriaClass implements SearchStoreCriteria {
        ChannelId: number;
        StoreNumber: string;
        InventoryLocationId: string;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * CustomerSearchCriteria entity class.
     */
    class CustomerSearchCriteriaClass implements CustomerSearchCriteria {
        Keyword: string;
        SearchOnlyCurrentCompany: boolean;
        SearchLocationValue: number;
        DataLevelValue: number;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ProductPrice entity class.
     */
    class ProductPriceClass implements ProductPrice {
        ProductId: number;
        ListingId: number;
        BasePrice: number;
        TradeAgreementPrice: number;
        AdjustedPrice: number;
        CustomerContextualPrice: number;
        DiscountAmount: number;
        CurrencyCode: string;
        ItemId: string;
        InventoryDimensionId: string;
        UnitOfMeasure: string;
        ValidFrom: Date;
        ProductLookupId: number;
        ChannelId: number;
        CatalogId: number;
        DiscountLines: Entities.DiscountLine[];
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * OrgUnitAvailability entity class.
     */
    class OrgUnitAvailabilityClass implements OrgUnitAvailability {
        OrgUnitLocation: Entities.OrgUnitLocation;
        ItemAvailabilities: Entities.ItemAvailability[];
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ProductVariantPropertySet entity class.
     */
    class ProductVariantPropertySetClass implements ProductVariantPropertySet {
        VariantId: number;
        ProductVariantPropertiesAsList: Entities.ProductPropertyTranslation[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * PurchaseOrderLine entity class.
     */
    class PurchaseOrderLineClass implements PurchaseOrderLine {
        RecordId: number;
        OrderId: string;
        ProductRecordId: number;
        ItemId: string;
        ItemName: string;
        InventDimId: string;
        QuantityOrdered: number;
        PurchaseQuantity: number;
        PurchaseUnit: string;
        PurchaseReceived: number;
        PurchaseReceivedNow: number;
        InventBatchId: string;
        WMSLocationId: string;
        WMSPalletId: string;
        InventoryStatus: string;
        LicensePlate: string;
        InventSiteId: string;
        InventLocationId: string;
        ConfigId: string;
        InventSerialId: string;
        InventSizeId: string;
        InventColorId: string;
        InventStyleId: string;
        IsCommitted: boolean;
        Message: string;
        UniqueIdentifier: string;
        DeliveryMethod: string;
        DataAreaId: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * TransferOrderLine entity class.
     */
    class TransferOrderLineClass implements TransferOrderLine {
        RecordId: number;
        OrderId: string;
        ProductRecordId: number;
        ItemId: string;
        ItemName: string;
        InventDimId: string;
        QuantityTransferred: number;
        QuantityShipped: number;
        QuantityReceived: number;
        QuantityShipNow: number;
        QuantityReceiveNow: number;
        QuantityRemainShip: number;
        QuantityRemainReceive: number;
        PurchaseUnit: string;
        InventBatchId: string;
        WMSLocationId: string;
        WMSPalletId: string;
        InventoryStatus: string;
        LicensePlate: string;
        InventSiteId: string;
        InventLocationId: string;
        ConfigId: string;
        InventSerialId: string;
        InventSizeId: string;
        InventColorId: string;
        InventStyleId: string;
        IsCommitted: boolean;
        Message: string;
        Guid: string;
        DeliveryMethod: string;
        DataAreaId: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * TransferOrderJournal entity class.
     */
    class TransferOrderJournalClass implements TransferOrderJournal {
        OrderId: string;
        VoucherId: string;
        UpdatedByWorker: string;
        InventLocationIdFrom: string;
        InventLocationIdTo: string;
        QuantityShipped: number;
        PostingDate: Date;
        DeliveryMode: string;
        Comments: string;
        JournalLines: Entities.TransferOrderJournalLine[];
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * PickingListLine entity class.
     */
    class PickingListLineClass implements PickingListLine {
        RecordId: number;
        OrderId: string;
        ProductRecordId: number;
        ItemId: string;
        ItemName: string;
        InventDimId: string;
        QuantityOrdered: number;
        PurchaseReceivedNow: number;
        InventBatchId: string;
        WMSLocationId: string;
        WMSPalletId: string;
        InventoryStatus: string;
        LicensePlate: string;
        InventSiteId: string;
        InventLocationId: string;
        ConfigId: string;
        InventSerialId: string;
        InventSizeId: string;
        InventColorId: string;
        InventStyleId: string;
        IsCommitted: boolean;
        Message: string;
        Guid: string;
        DeliveryMethod: string;
        DataAreaId: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * Affiliation entity class.
     */
    class AffiliationClass implements Affiliation {
        RecordId: number;
        AffiliationTypeValue: number;
        Description: string;
        Name: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * InventoryInboundOutboundDocumentLinesSummary entity class.
     */
    class InventoryInboundOutboundDocumentLinesSummaryClass implements InventoryInboundOutboundDocumentLinesSummary {
        InProgressQuantity: number;
        TotalLineNumber: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * InventoryDocumentSerialNumberLinesSummary entity class.
     */
    class InventoryDocumentSerialNumberLinesSummaryClass implements InventoryDocumentSerialNumberLinesSummary {
        RegisteringQuantity: number;
        RegisteredQuantity: number;
        TotalLineNumber: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * InventoryInboundOutboundDocumentLine entity class.
     */
    class InventoryInboundOutboundDocumentLineClass implements InventoryInboundOutboundDocumentLine {
        WorkDocumentId: string;
        LineId: string;
        SourceDocumentRecordId: number;
        SourceDocumentLineRecordId: number;
        SourceDocumentTypeValue: number;
        QuantityOrdered: number;
        QuantityShipped: number;
        QuantityReceived: number;
        QuantityCancelled: number;
        QuantityToUpdate: number;
        LocationId: string;
        ItemId: string;
        ProductId: number;
        ItemName: string;
        ItemPrimaryImageUrl: string;
        IsLocationActive: boolean;
        IsLocationAllowBlankReceiptEnabled: boolean;
        IsLocationBlankIssueAllowed: boolean;
        ProductDimensions: Entities.ProductDimension[];
        Note: string;
        OperationResultMessage: string;
        IsCloseLine: boolean;
        SourceDocumentLine: Entities.InventoryInboundOutboundSourceDocumentLine;
        SerialNumberLines: Entities.InventoryDocumentSerialNumberLine[];
        LongVersion: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * InventoryInboundOutboundSourceDocument entity class.
     */
    class InventoryInboundOutboundSourceDocumentClass implements InventoryInboundOutboundSourceDocument {
        RecordId: number;
        DocumentTypeValue: number;
        DocumentId: string;
        StatusValue: number;
        ReceiveDate: Date;
        ShipDate: Date;
        Sender: string;
        Receiver: string;
        SenderDetails: string;
        ReceiverDetails: string;
        DeliveryMode: string;
        TotalQuantityOrdered: number;
        TotalQuantityShipped: number;
        TotalQuantityReceived: number;
        TotalQuantityCancelled: number;
        DataAreaId: string;
        Note: string;
        TotalLines: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * InventoryInboundOutboundSourceDocumentLine entity class.
     */
    class InventoryInboundOutboundSourceDocumentLineClass implements InventoryInboundOutboundSourceDocumentLine {
        DocumentRecordId: number;
        DocumentTypeValue: number;
        RecordId: number;
        LineNumber: number;
        ItemId: string;
        ProductId: number;
        QuantityOrdered: number;
        QuantityShipped: number;
        QuantityReceived: number;
        QuantityCancelled: number;
        LocationId: string;
        OverDeliveryPercentage: number;
        UnderDeliveryPercentage: number;
        UnitId: string;
        Receiver: string;
        DataAreaId: string;
        Note: string;
        DocumentId: string;
        ItemName: string;
        ItemPrimaryImageUrl: string;
        IsLocationActive: boolean;
        IsLocationAllowBlankReceiptEnabled: boolean;
        IsLocationBlankIssueAllowed: boolean;
        HasSerialNumber: boolean;
        IsSerialNumberBlankReceiptAllowed: boolean;
        IsSerialNumberDuplicateCheckEnabled: boolean;
        ProductDimensions: Entities.ProductDimension[];
        SerialNumberLines: Entities.InventoryDocumentSourceSerialNumberLine[];
        StatusValue: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * InventoryDocumentLineFilterCriteria entity class.
     */
    class InventoryDocumentLineFilterCriteriaClass implements InventoryDocumentLineFilterCriteria {
        ProductId: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * InventoryDocumentUpdateLinesAction entity class.
     */
    class InventoryDocumentUpdateLinesActionClass implements InventoryDocumentUpdateLinesAction {
        Quantity: number;
        ActionTypeValue: number;
        LocationId: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * InventoryDocumentLineOperationResultSettings entity class.
     */
    class InventoryDocumentLineOperationResultSettingsClass implements InventoryDocumentLineOperationResultSettings {
        ModeValue: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * InventoryDocumentLineSearchCriteria entity class.
     */
    class InventoryDocumentLineSearchCriteriaClass implements InventoryDocumentLineSearchCriteria {
        SourceDocumentId: string;
        SourceDocumentTypeValue: number;
        WorkDocumentId: string;
        AvailableSerializedLineOnly: boolean;
        DocumentLineIds: string[];
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * InventoryDocumentSearchCriteria entity class.
     */
    class InventoryDocumentSearchCriteriaClass implements InventoryDocumentSearchCriteria {
        DocumentId: string;
        DocumentStateValue: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * InventoryDocumentSerialNumberLineSearchCriteria entity class.
     */
    class InventoryDocumentSerialNumberLineSearchCriteriaClass implements InventoryDocumentSerialNumberLineSearchCriteria {
        DocumentLineId: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * InventoryDocumentSerialNumberLineUpdateAction entity class.
     */
    class InventoryDocumentSerialNumberLineUpdateActionClass implements InventoryDocumentSerialNumberLineUpdateAction {
        DocumentLineId: string;
        LineId: string;
        SerialNumber: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * InventoryDocumentSerialNumberLineResetAction entity class.
     */
    class InventoryDocumentSerialNumberLineResetActionClass implements InventoryDocumentSerialNumberLineResetAction {
        DocumentLineId: string;
        LineId: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * InventoryInboundOutboundDocumentUpdateLinesByCriteriaResult entity class.
     */
    class InventoryInboundOutboundDocumentUpdateLinesByCriteriaResultClass implements InventoryInboundOutboundDocumentUpdateLinesByCriteriaResult {
        UpdatedLines: Entities.InventoryInboundOutboundDocumentLine[];
        TotalLinesUpdated: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * WarehouseLocationSearchCriteria entity class.
     */
    class WarehouseLocationSearchCriteriaClass implements WarehouseLocationSearchCriteria {
        WarehouseIds: string[];
        IsLocationProfileRequired: boolean;
        SearchText: string;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * InventoryDocumentSerialNumberLine entity class.
     */
    class InventoryDocumentSerialNumberLineClass implements InventoryDocumentSerialNumberLine {
        WorkDocumentId: string;
        WorkDocumentLineId: string;
        SourceLineId: string;
        LineId: string;
        Quantity: number;
        SerialNumber: string;
        StatusValue: number;
        ProductId: number;
        ModifiedDateTime: Date;
        SourceLine: Entities.InventoryDocumentSourceSerialNumberLine;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * InventoryDocumentValidationCategoryResultsSummary entity class.
     */
    class InventoryDocumentValidationCategoryResultsSummaryClass implements InventoryDocumentValidationCategoryResultsSummary {
        CategoryName: string;
        SeverityValue: number;
        TotalValidationResultCount: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * InventoryDocumentValidationResultSummary entity class.
     */
    class InventoryDocumentValidationResultSummaryClass implements InventoryDocumentValidationResultSummary {
        DocumentId: string;
        DocumentVersion: number;
        CategorySummaries: Entities.InventoryDocumentValidationCategoryResultsSummary[];
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * InventoryDocumentValidationResultLine entity class.
     */
    class InventoryDocumentValidationResultLineClass implements InventoryDocumentValidationResultLine {
        DocumentValidationResultLineId: string;
        CategoryName: string;
        SeverityValue: number;
        ErrorCode: number;
        ErrorMessage: string;
        DocumentId: string;
        DocumentLongVersion: number;
        DocumentLineId: string;
        CreatedDateTime: Date;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * InventoryDocumentValidationResultSearchCriteria entity class.
     */
    class InventoryDocumentValidationResultSearchCriteriaClass implements InventoryDocumentValidationResultSearchCriteria {
        DocumentId: string;
        DocumentVersion: number;
        SeverityValue: number;
        Categories: string[];
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ProductDimension entity class.
     */
    class ProductDimensionClass implements ProductDimension {
        DimensionTypeValue: number;
        DimensionValue: Entities.ProductDimensionValue;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ProductDimensionValue entity class.
     */
    class ProductDimensionValueClass implements ProductDimensionValue {
        RecordId: number;
        Value: string;
        DimensionId: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ProductDimensionCombination entity class.
     */
    class ProductDimensionCombinationClass implements ProductDimensionCombination {
        ProductDimensions: Entities.ProductDimension[];
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * SearchRefiner entity class.
     */
    class SearchRefinerClass implements SearchRefiner {
        RecordId: number;
        KeyName: string;
        DataTypeValue: number;
        RefinerTypeValue: number;
        DisplayTemplateValue: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * SearchRefinerValue entity class.
     */
    class SearchRefinerValueClass implements SearchRefinerValue {
        RefinerRecordId: number;
        DataTypeValue: number;
        LeftValueBoundString: string;
        RightValueBoundString: string;
        UnitText: string;
        RowNumber: number;
        Count: number;
        LeftValueBoundLocalizedString: string;
        RightValueBoundLocalizedString: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ProductRefiner entity class.
     */
    class ProductRefinerClass extends SearchRefinerClass implements ProductRefiner {
        SourceValue: number;
        Values: Entities.ProductRefinerValue[];
        IsDimension: boolean;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ProductRefinerValue entity class.
     */
    class ProductRefinerValueClass extends SearchRefinerValueClass implements ProductRefinerValue {
        RefinerSourceValue: number;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ClientBookRefiner entity class.
     */
    class ClientBookRefinerClass extends SearchRefinerClass implements ClientBookRefiner {
        SourceValue: number;
        Values: Entities.ClientBookRefinerValue[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ClientBookRefinerValue entity class.
     */
    class ClientBookRefinerValueClass extends SearchRefinerValueClass implements ClientBookRefinerValue {
        RefinerSourceValue: number;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ProductRelationType entity class.
     */
    class ProductRelationTypeClass implements ProductRelationType {
        Name: string;
        RecordId: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ComponentInSlotRelation entity class.
     */
    class ComponentInSlotRelationClass implements ComponentInSlotRelation {
        ComponentId: number;
        SlotId: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ProductRules entity class.
     */
    class ProductRulesClass implements ProductRules {
        HasLinkedProducts: boolean;
        IsSerialized: boolean;
        IsActiveInSalesProcess: boolean;
        IsBlocked: boolean;
        DateOfBlocking: Date;
        DateToActivate: Date;
        DateToBlock: Date;
        DefaultUnitOfMeasure: string;
        PriceKeyingRequirementValue: number;
        QuantityKeyingRequirementValue: number;
        MustKeyInComment: boolean;
        CanQuantityBecomeNegative: boolean;
        MustScaleItem: boolean;
        CanPriceBeZero: boolean;
        ProductId: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * LocalizedString entity class.
     */
    class LocalizedStringClass implements LocalizedString {
        RecordId: number;
        LanguageId: string;
        TextId: number;
        Text: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * LoyaltyCard entity class.
     */
    class LoyaltyCardClass implements LoyaltyCard {
        CardNumber: string;
        CardTenderTypeValue: number;
        CustomerAccount: string;
        LoyaltyGroups: Entities.LoyaltyGroup[];
        RewardPoints: Entities.LoyaltyRewardPoint[];
        LoyaltyEnrollmentDate: Date;
        LoyaltyEnrollmentDateLocal: Date;
        LoyaltyEnrollmentTime: number;
        LoyaltyEnrollmentTimeLocal: number;
        OmOperatingUnitId: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ProductComponent entity class.
     */
    class ProductComponentClass implements ProductComponent {
        ProductId: number;
        SlotId: number;
        Product: Entities.SimpleProduct;
        AdditionalChargeForComponent: number;
        Behavior: Entities.ProductBehavior;
        Description: string;
        Dimensions: Entities.ProductDimension[];
        ItemId: string;
        Name: string;
        ProductTypeValue: number;
        Quantity: number;
        UnitOfMeasure: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * SimpleProduct entity class.
     */
    class SimpleProductClass implements SimpleProduct {
        RecordId: number;
        ItemId: string;
        Name: string;
        Description: string;
        ProductTypeValue: number;
        DefaultUnitOfMeasure: string;
        BasePrice: number;
        Price: number;
        AdjustedPrice: number;
        MasterProductId: number;
        Components: Entities.ProductComponent[];
        Dimensions: Entities.ProductDimension[];
        Behavior: Entities.ProductBehavior;
        LinkedProducts: Entities.SimpleLinkedProduct[];
        PrimaryImageUrl: string;
        ItemTypeValue: number;
        ItemServiceTypeValue: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ProductBehavior entity class.
     */
    class ProductBehaviorClass implements ProductBehavior {
        HasSerialNumber: boolean;
        IsDiscountAllowed: boolean;
        IsManualDiscountAllowed: boolean;
        IsKitDisassemblyAllowed: boolean;
        IsNegativeQuantityAllowed: boolean;
        IsReturnAllowed: boolean;
        IsSaleAtPhysicalStoresAllowed: boolean;
        IsZeroSalePriceAllowed: boolean;
        KeyInPriceValue: number;
        KeyInQuantityValue: number;
        MustKeyInComment: boolean;
        MustPrintIndividualShelfLabelsForVariants: boolean;
        MustPromptForSerialNumberOnlyAtSale: boolean;
        MustWeighProductAtSale: boolean;
        ValidFromDateForSaleAtPhysicalStores: Date;
        ValidToDateForSaleAtPhysicalStores: Date;
        IsStorageDimensionGroupLocationActive: boolean;
        IsStorageDimensionGroupLocationAllowBlankReceiptEnabled: boolean;
        AllowNegativePhysicalInventory: boolean;
        IsBlankSerialNumberAllowed: boolean;
        IsBlankSerialNumberReceiptAllowed: boolean;
        IsSerialNumberControlEnabled: boolean;
        IsStorageDimensionGroupLocationBlankIssueAllowed: boolean;
        IsSerialNumberRequired: boolean;
        DefaultQuantity: number;
        MaximumQuantity: number;
        MinimumQuantity: number;
        MultipleOfQuantity: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * SimpleLinkedProduct entity class.
     */
    class SimpleLinkedProductClass implements SimpleLinkedProduct {
        RecordId: number;
        ItemId: string;
        Name: string;
        Description: string;
        ProductTypeValue: number;
        DefaultUnitOfMeasure: string;
        BasePrice: number;
        Price: number;
        AdjustedPrice: number;
        Quantity: number;
        Behavior: Entities.ProductBehavior;
        Dimensions: Entities.ProductDimension[];
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ProductSearchResult entity class.
     */
    class ProductSearchResultClass implements ProductSearchResult {
        ItemId: string;
        Name: string;
        Price: number;
        PrimaryImageUrl: string;
        RecordId: number;
        TrackingId: string;
        AverageRating: number;
        TotalRatings: number;
        Description: string;
        BasePrice: number;
        DisplayOrder: number;
        AttributeValues: Entities.AttributeValue[];
        IsMasterProduct: boolean;
        MasterProductId: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * SearchSuggestion entity class.
     */
    class SearchSuggestionClass implements SearchSuggestion {
        Value: string;
        Value2: Entities.CommerceProperty;
        Value3: Entities.CommerceProperty;
        Value4: Entities.CommerceProperty;
        SuggestionType: string;
        Id: string;
        ImageUrl: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * LoyaltyPointRedemptionEstimate entity class.
     */
    class LoyaltyPointRedemptionEstimateClass implements LoyaltyPointRedemptionEstimate {
        MaxCurrencyValueOfLoyaltyPoints: number;
        RewardPointToRedeemList: Entities.LoyaltyRewardPointLine[];
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * LoyaltyGroup entity class.
     */
    class LoyaltyGroupClass implements LoyaltyGroup {
        Description: string;
        Name: string;
        RecordId: number;
        LoyaltyTiers: Entities.LoyaltyTier[];
        LoyaltyCardTiers: Entities.LoyaltyCardTier[];
        HighestActiveLoyaltyCardTier: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * LoyaltyTier entity class.
     */
    class LoyaltyTierClass implements LoyaltyTier {
        Description: string;
        RecordId: number;
        TierId: string;
        TierLevel: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * LoyaltyCardTier entity class.
     */
    class LoyaltyCardTierClass implements LoyaltyCardTier {
        RecordId: number;
        TierId: string;
        LoyaltyTierRecordId: number;
        ValidFrom: Date;
        ValidTo: Date;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * LoyaltyRewardPoint entity class.
     */
    class LoyaltyRewardPointClass implements LoyaltyRewardPoint {
        IsRedeemable: boolean;
        RewardPointCurrency: string;
        RewardPointTypeValue: number;
        Description: string;
        RewardPointId: string;
        IssuedPoints: number;
        UsedPoints: number;
        ExpiredPoints: number;
        ActivePoints: number;
        PointsExpiringSoon: number;
        UnvestedPoints: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * LoyaltyCardTransaction entity class.
     */
    class LoyaltyCardTransactionClass implements LoyaltyCardTransaction {
        ChannelName: string;
        EntryDateTime: Date;
        EntryTypeValue: number;
        ExpirationDate: Date;
        RewardPointAmountQuantity: number;
        TransactionId: string;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * GiftCard entity class.
     */
    class GiftCardClass implements GiftCard {
        Id: string;
        Balance: number;
        BalanceCurrencyCode: string;
        BalanceInCardCurrency: number;
        CardCurrencyCode: string;
        GiftCardIssueAmount: number;
        GiftCardActiveFrom: Date;
        GiftCardExpireDate: Date;
        GiftCardHistoryDetails: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * OperationPermission entity class.
     */
    class OperationPermissionClass implements OperationPermission {
        OperationName: string;
        OperationId: number;
        CheckUserAccess: boolean;
        AllowAnonymousAccess: boolean;
        AllowCustomerAccess: boolean;
        AllowApplicationAccess: boolean;
        IsEnabledForTaskManagement: boolean;
        Permissions: string[];
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * StateProvinceInfo entity class.
     */
    class StateProvinceInfoClass implements StateProvinceInfo {
        CountryRegionId: string;
        StateId: string;
        StateName: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * TransactionLog entity class.
     */
    class TransactionLogClass extends TransactionClass implements TransactionLog {
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * KitTransaction entity class.
     */
    class KitTransactionClass extends TransactionLogClass implements KitTransaction {
        KitTransactionLines: Entities.KitTransactionLine[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * SalesTaxGroup entity class.
     */
    class SalesTaxGroupClass implements SalesTaxGroup {
        RecordId: number;
        TaxGroup: string;
        TaxGroupName: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ProductProperty entity class.
     */
    class ProductPropertyClass implements ProductProperty {
        ValueString: string;
        UnitText: string;
        PropertyTypeValue: number;
        KeyName: string;
        FriendlyName: string;
        RecordId: number;
        IsDimensionProperty: boolean;
        AttributeValueId: number;
        GroupId: number;
        GroupTypeValue: number;
        GroupName: string;
        ExtensionProperties: Entities.CommerceProperty[];
        ProductId: number;
        CatalogId: number;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ProductCompositionInformation entity class.
     */
    class ProductCompositionInformationClass implements ProductCompositionInformation {
        VariantInformation: Entities.ProductVariantInformation;
        KitDefinition: Entities.KitDefinition;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ProductVariantInformation entity class.
     */
    class ProductVariantInformationClass implements ProductVariantInformation {
        ActiveVariantProductId: number;
        Variants: Entities.ProductVariant[];
        Dimensions: Entities.ProductDimensionSet[];
        ItemId: string;
        MasterProductId: number;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ProductChangeTrackingInformation entity class.
     */
    class ProductChangeTrackingInformationClass implements ProductChangeTrackingInformation {
        ModifiedDateTime: Date;
        ChangeActionValue: number;
        RequestedActionValue: number;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ProductDimensionSet entity class.
     */
    class ProductDimensionSetClass implements ProductDimensionSet {
        DimensionKey: string;
        DimensionValues: Entities.ProductDimensionValueSet[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ProductDimensionValueSet entity class.
     */
    class ProductDimensionValueSetClass implements ProductDimensionValueSet {
        DimensionId: string;
        DimensionValue: string;
        VariantSet: number[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * RichMediaLocations entity class.
     */
    class RichMediaLocationsClass implements RichMediaLocations {
        Items: Entities.RichMediaLocationsRichMediaLocation[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * RichMediaLocationsRichMediaLocation entity class.
     */
    class RichMediaLocationsRichMediaLocationClass implements RichMediaLocationsRichMediaLocation {
        Url: string;
        AltText: string;
        IsSelfHosted: boolean;
        IsDefault: boolean;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * KitDefinition entity class.
     */
    class KitDefinitionClass implements KitDefinition {
        DisassembleAtRegister: boolean;
        KitLineDefinitions: Entities.KitLineDefinition[];
        KitLineProductToVariantMap: Entities.ComponentKitVariantSet[];
        KitVariantToComponentMap: Entities.KitVariantContent[];
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ComponentKitVariantSet entity class.
     */
    class ComponentKitVariantSetClass implements ComponentKitVariantSet {
        KitLineProductId: number;
        KitVariantIdList: number[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * KitLineDefinition entity class.
     */
    class KitLineDefinitionClass implements KitLineDefinition {
        ComponentProductId: number;
        KitLineIdentifier: number;
        SubstituteProductIds: number[];
        ComponentProperties: Entities.KitLineProductProperty[];
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * KitLineProductProperty entity class.
     */
    class KitLineProductPropertyClass implements KitLineProductProperty {
        KitLineIdentifier: number;
        ProductId: number;
        Unit: string;
        Quantity: number;
        Charge: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * KitComponentKey entity class.
     */
    class KitComponentKeyClass implements KitComponentKey {
        KitLineIdentifier: number;
        DistinctProductId: number;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * KitVariantContent entity class.
     */
    class KitVariantContentClass implements KitVariantContent {
        KitVariantId: number;
        KitComponentKeyList: Entities.KitComponentKey[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ProductLookupClause entity class.
     */
    class ProductLookupClauseClass implements ProductLookupClause {
        ItemId: string;
        InventDimensionId: string;
        Barcode: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ProductAssortmentInterval entity class.
     */
    class ProductAssortmentIntervalClass implements ProductAssortmentInterval {
        ProductId: number;
        ValidFrom: Date;
        ValidTo: Date;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * OrgUnitLocation entity class.
     */
    class OrgUnitLocationClass implements OrgUnitLocation {
        Contacts: Entities.OrgUnitContact[];
        ChannelId: number;
        Latitude: number;
        Longitude: number;
        OrgUnitName: string;
        OrgUnitNumber: string;
        Address: string;
        Street: string;
        StreetNumber: string;
        City: string;
        DistrictName: string;
        BuildingCompliment: string;
        Postbox: string;
        Zip: string;
        County: string;
        CountyName: string;
        State: string;
        StateName: string;
        Country: string;
        Distance: number;
        InventoryLocationId: string;
        InventorySiteId: string;
        PostalAddressId: number;
        OpenFrom: number;
        OpenTo: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * OrgUnitContact entity class.
     */
    class OrgUnitContactClass implements OrgUnitContact {
        ChannelId: number;
        Locator: string;
        LocatorExtension: string;
        ContactTypeValue: number;
        IsPrimary: boolean;
        IsPrivate: boolean;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * SalesLineDeliveryOption entity class.
     */
    class SalesLineDeliveryOptionClass implements SalesLineDeliveryOption {
        SalesLineId: string;
        DeliveryOptions: Entities.DeliveryOption[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * DeliveryOption entity class.
     */
    class DeliveryOptionClass implements DeliveryOption {
        ChargeGroup: string;
        Code: string;
        Description: string;
        RecordId: number;
        DeliveryChargeLines: Entities.DeliveryChargeLine[];
        TotalChargeAmount: number;
        ShippingChargeAmount: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ChannelIdentity entity class.
     */
    class ChannelIdentityClass implements ChannelIdentity {
        Name: string;
        OperatingUnitNumber: string;
        DataAreaId: string;
        RecordId: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ChannelProfileProperty entity class.
     */
    class ChannelProfilePropertyClass implements ChannelProfileProperty {
        Key: number;
        Value: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ChannelConfiguration entity class.
     */
    class ChannelConfigurationClass implements ChannelConfiguration {
        RecordId: number;
        ChannelNaturalId: string;
        MinimumDepositPercentage: number;
        QuoteExpirationDays: number;
        PickupDeliveryModeCode: string;
        CarryoutDeliveryModeCode: string;
        CancellationChargePercentage: number;
        InventLocation: string;
        InventLocationDataAreaId: string;
        BingMapsApiKey: string;
        BingMapsEnabled: boolean;
        Currency: string;
        CatalogDefaultImageTemplate: string;
        CompanyCurrency: string;
        PriceIncludesSalesTax: boolean;
        CountryRegionId: string;
        ChannelCountryRegionISOCode: string;
        DefaultLanguageId: string;
        TimeZoneInfoId: string;
        EmailDeliveryModeCode: string;
        GiftCardItemId: string;
        EnableProductRecommendations: boolean;
        RefundableShippingAmountWithoutApproval: number;
        RefundShippingCharges: boolean;
        ReceiptSettingsValue: number;
        CustomerAttributeGroupId: number;
        ClientBookAttributeGroupId: number;
        NotificationRefreshInterval: number;
        AllowExchangeOnReturnOrders: boolean;
        FiscalRegistrationProcessId: string;
        IsInventoryAutomaticValidationEnabled: boolean;
        ProfileProperties: Entities.ChannelProfileProperty[];
        Properties: Entities.ChannelProperty[];
        Languages: Entities.ChannelLanguage[];
        UseAdvancedAutoCharges: boolean;
        UseRTSForOnlineOrderCreation: boolean;
        IsWarrantyAutoPromptEnabled: boolean;
        EnableProductRatingsForRetailStores: boolean;
        EnableFetchingPickingListsForPickingAndReceiving: boolean;
        EnableReturnsForMultipleOrderInvoices: boolean;
        VoidSuspendedTransactionsOnCloseShift: number;
        EnableOmniChannelPayments: boolean;
        UseAdvancedCashManagement: boolean;
        EnableFiscalRegistrationStorageBackup: boolean;
        UseSalesReceiptAsDefaultReceiptTypeInJournal: boolean;
        SalesOrderHeaderAttributeGroups: number[];
        SalesOrderLinesAttributeGroups: number[];
        EnableReturnPolicies: boolean;
        InventAvailabilityCalculationMode: string;
        IsPriceInclusiveTaxExemptCalculationEnabled: boolean;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ChannelProperty entity class.
     */
    class ChannelPropertyClass implements ChannelProperty {
        Name: string;
        Value: string;
        Channel: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ChannelLanguage entity class.
     */
    class ChannelLanguageClass implements ChannelLanguage {
        LanguageId: string;
        IsDefault: boolean;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * NonSalesTransaction entity class.
     */
    class NonSalesTransactionClass extends TransactionClass implements NonSalesTransaction {
        ReasonCodeLines: Entities.ReasonCodeLine[];
        Amount: number;
        ForeignCurrency: string;
        OpenDrawer: boolean;
        DenominationDetails: Entities.DenominationDetail[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * DropAndDeclareTransaction entity class.
     */
    class DropAndDeclareTransactionClass extends TransactionClass implements DropAndDeclareTransaction {
        TenderDetails: Entities.TenderDetail[];
        ReasonCodeLines: Entities.ReasonCodeLine[];
        OpenDrawer: boolean;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ProductSearchCriteria entity class.
     */
    class ProductSearchCriteriaClass implements ProductSearchCriteria {
        Ids: number[];
        CategoryIds: number[];
        IncludeProductsFromDescendantCategories: boolean;
        SearchCondition: string;
        SkipVariantExpansion: boolean;
        IncludeAttributes: boolean;
        Barcodes: string[];
        ItemIds: Entities.ProductLookupClause[];
        Refinement: Entities.ProductRefinerValue[];
        CustomerAccountNumber: string;
        RecommendationListId: string;
        DownloadProductData: boolean;
        Context: Entities.ProjectionDomain;
        Language: string;
        IsOnline: boolean;
        DataLevelValue: number;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ChangedProductsSearchCriteria entity class.
     */
    class ChangedProductsSearchCriteriaClass implements ChangedProductsSearchCriteria {
        SynchronizationToken: string;
        Context: Entities.ProjectionDomain;
        AsListings: boolean;
        Session: Entities.ReadChangedProductsSession;
        DataLevelValue: number;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * EmployeeActivitySearchCriteria entity class.
     */
    class EmployeeActivitySearchCriteriaClass implements EmployeeActivitySearchCriteria {
        FromDateTimeOffset: Date;
        ToDateTimeOffset: Date;
        StoreNumber: string;
        EmployeeActivityTypeValues: number[];
        DataLevelValue: number;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * SearchSuggestionCriteria entity class.
     */
    class SearchSuggestionCriteriaClass implements SearchSuggestionCriteria {
        ProductSearchCriteria: Entities.ProductSearchCriteria;
        SuggestionType: string;
        HitPrefix: string;
        HitSuffix: string;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * CartLineDeliveryPreference entity class.
     */
    class CartLineDeliveryPreferenceClass implements CartLineDeliveryPreference {
        LineId: string;
        DeliveryPreferenceTypeValues: number[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * CartLinePromotion entity class.
     */
    class CartLinePromotionClass implements CartLinePromotion {
        LineId: string;
        Promotions: string[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ProductVariant entity class.
     */
    class ProductVariantClass implements ProductVariant {
        ItemId: string;
        MasterProductId: number;
        InventoryDimensionId: string;
        AdjustedPrice: number;
        BasePrice: number;
        Price: number;
        Color: string;
        Style: string;
        Size: string;
        Configuration: string;
        ColorId: string;
        StyleId: string;
        SizeId: string;
        ConfigId: string;
        VariantId: string;
        Images: Entities.RichMediaLocations[];
        DistinctProductVariantId: number;
        ProductNumber: string;
        PropertiesAsList: Entities.ProductPropertyTranslation[];
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * HardwareProfilePrinter entity class.
     */
    class HardwareProfilePrinterClass implements HardwareProfilePrinter {
        ProfileId: string;
        DeviceTypeValue: number;
        DeviceName: string;
        DeviceMake: string;
        DeviceModel: string;
        DeviceDescription: string;
        CharacterSet: number;
        ReceiptProfileId: string;
        BinaryConversion: boolean;
        DocInsertRemovalTimeout: number;
        Logo: string;
        LogoAlignment: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * HardwareProfileScanner entity class.
     */
    class HardwareProfileScannerClass implements HardwareProfileScanner {
        ProfileId: string;
        DeviceTypeValue: number;
        DeviceName: string;
        DeviceDescription: string;
        DecodeData: boolean;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * HardwareProfileCashDrawer entity class.
     */
    class HardwareProfileCashDrawerClass implements HardwareProfileCashDrawer {
        ProfileId: string;
        DeviceTypeValue: number;
        DeviceName: string;
        DeviceDescription: string;
        DeviceMake: string;
        DeviceModel: string;
        IsSharedShiftDrawer: boolean;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * TillLayout entity class.
     */
    class TillLayoutClass implements TillLayout {
        CashChangerLayoutXml: string;
        CustomerLayoutId: string;
        CustomerLayoutXml: string;
        Height: number;
        LayoutId: string;
        LayoutTypeValue: number;
        LayoutXml: string;
        LayoutXmlPortrait: string;
        Name: string;
        ReceiptId: string;
        ReceiptItemsLayoutXml: string;
        ReceiptPaymentLayoutXml: string;
        TotalId: string;
        TotalsLayoutXml: string;
        Width: number;
        RecordId: number;
        StartScreen: number;
        ButtonGridZones: Entities.ButtonGridZone[];
        ImageZones: Entities.ImageZone[];
        ReportZones: Entities.ReportZone[];
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * SalesInvoice entity class.
     */
    class SalesInvoiceClass implements SalesInvoice {
        RecordId: number;
        Id: string;
        SalesId: string;
        SalesType: string;
        InvoiceDate: Date;
        CurrencyCode: string;
        Amount: number;
        AmountPaid: number;
        Account: string;
        Name: string;
        TotalManualDiscountPercentage: number;
        TotalManualDiscountAmount: number;
        SalesInvoiceLine: Entities.SalesInvoiceLine[];
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * OrderInvoice entity class.
     */
    class OrderInvoiceClass implements OrderInvoice {
        Id: string;
        CustomerAccountNumber: string;
        CustomerName: string;
        InvoiceDate: Date;
        TotalAmount: number;
        AmountPaid: number;
        AmountBalance: number;
        InvoiceTypeValue: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * TaxOverride entity class.
     */
    class TaxOverrideClass implements TaxOverride {
        Code: string;
        SourceTaxGroup: string;
        DestinationTaxGroup: string;
        SourceItemTaxGroup: string;
        DestinationItemTaxGroup: string;
        ChannelId: number;
        AdditionalDescription: string;
        Status: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * TenderType entity class.
     */
    class TenderTypeClass implements TenderType {
        Function: number;
        TenderTypeId: string;
        Name: string;
        OperationId: number;
        OperationName: string;
        ChangeTenderTypeId: string;
        AboveMinimumChangeAmount: number;
        AboveMinimumChangeTenderTypeId: string;
        OpenDrawer: boolean;
        UseSignatureCaptureDevice: boolean;
        MinimumSignatureCaptureAmount: number;
        IsOvertenderAllowed: boolean;
        IsUndertenderAllowed: boolean;
        MaximumOvertenderAmount: number;
        MaximumUndertenderAmount: number;
        MaximumAmountPerTransaction: number;
        MaximumAmountPerLine: number;
        MinimumAmountPerTransaction: number;
        MinimumAmountPerLine: number;
        RoundOff: number;
        CountingRequired: number;
        TakenToBank: number;
        TakenToSafe: number;
        ConnectorId: string;
        GiftCardItem: string;
        GiftCardCashoutOutThreshold: number;
        ChangeLineOnReceipt: string;
        HideCardInputDetails: boolean;
        CashDrawerLimitEnabled: boolean;
        CashDrawerLimit: number;
        RestrictReturnsWithoutReceipt: boolean;
        HasTenderDiscount: boolean;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ReasonCode entity class.
     */
    class ReasonCodeClass implements ReasonCode {
        InputRequired: boolean;
        LinkedReasonCodeId: string;
        MaximumLength: number;
        MaximumValue: number;
        MinimumLength: number;
        MinimumValue: number;
        OncePerTransaction: boolean;
        PrintInputNameOnReceipt: boolean;
        PrintInputToReceipt: boolean;
        PrintPromptToReceipt: boolean;
        Prompt: string;
        RandomFactor: number;
        RetailUseReasonCode: boolean;
        ReasonCodeId: string;
        Description: string;
        InputTypeValue: number;
        ActivityValue: number;
        IsMultiLineText: boolean;
        ReasonSubCodes: Entities.ReasonSubCode[];
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ReportDataSet entity class.
     */
    class ReportDataSetClass implements ReportDataSet {
        ReportId: string;
        Parameters: Entities.CommerceProperty[];
        Locale: string;
        Output: Entities.ReportRow[];
        HasTotalRow: boolean;
        HasDisclaimer: boolean;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ZipCodeInfo entity class.
     */
    class ZipCodeInfoClass implements ZipCodeInfo {
        ZipPostalCode: string;
        StreetName: string;
        TimeZone: number;
        CountryRegionId: string;
        StateId: string;
        CountyId: string;
        CityName: string;
        CityAlias: string;
        District: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ReasonCodeRequirement entity class.
     */
    class ReasonCodeRequirementClass implements ReasonCodeRequirement {
        ReasonCodeId: string;
        SourceId: string;
        TableRefTypeValue: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * QueryResultSettings entity class.
     */
    class QueryResultSettingsClass implements QueryResultSettings {
        Paging: Entities.PagingInfo;
        Sorting: Entities.SortingInfo;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * SortingInfo entity class.
     */
    class SortingInfoClass implements SortingInfo {
        Columns: Entities.SortColumn[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * SortColumn entity class.
     */
    class SortColumnClass implements SortColumn {
        ColumnName: string;
        IsDescending: boolean;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * PagingInfo entity class.
     */
    class PagingInfoClass implements PagingInfo {
        Top: number;
        Skip: number;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ProductPropertyTranslation entity class.
     */
    class ProductPropertyTranslationClass implements ProductPropertyTranslation {
        TranslationLanguage: string;
        TranslatedProperties: Entities.ProductProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * NumberSequenceSeedData entity class.
     */
    class NumberSequenceSeedDataClass implements NumberSequenceSeedData {
        DataTypeValue: number;
        DataValue: number;
        LastTransactionDataValue: number;
        LastTransactionCreatedDateTime: Date;
        LastTransactionId: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ReceiptNumberResetInfo entity class.
     */
    class ReceiptNumberResetInfoClass implements ReceiptNumberResetInfo {
        ValidFrom: Date;
        ValidTo: Date;
        ResetDate: Date;
        TypeValue: number;
        Enabled: boolean;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * DeviceActivationResult entity class.
     */
    class DeviceActivationResultClass implements DeviceActivationResult {
        Device: Entities.Device;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * PurchaseHistory entity class.
     */
    class PurchaseHistoryClass implements PurchaseHistory {
        DatePurchased: Date;
        ImageUrl: string;
        ItemId: string;
        ProductId: number;
        ProductName: string;
        ReceiptId: string;
        SalesId: string;
        ChannelId: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * Node entity class.
     */
    class NodeClass implements Node {
        ParentScopeId: string;
        ParentSequence: number;
        Id: string;
        Sequence: number;
        Description: string;
        ScreenshotUri: string;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * Line entity class.
     */
    class LineClass implements Line {
        ChildrenIds: number[];
        Id: number;
        Name: string;
        Description: string;
        IsLinked: boolean;
        LineMetadataId: number;
        Artifacts: Entities.ArtifactSummary[];
        MetadataPropertyValues: Entities.MetadataPropertyValue[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * Scope entity class.
     */
    class ScopeClass extends NodeClass implements Scope {
        Name: string;
        ScopeTypeValue: number;
        Children: Entities.Node[];
        ActiveCount: number;
        IsForm: boolean;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * Framework entity class.
     */
    class FrameworkClass implements Framework {
        Lines: Entities.Line[];
        Id: number;
        Name: string;
        Access: string;
        Hierarchy: Entities.Line[];
        Publisher: string;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * UserAction entity class.
     */
    class UserActionClass extends NodeClass implements UserAction {
        SystemGenerated: boolean;
        GlobalId: string;
        Annotations: Entities.Annotation[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * TaskUserAction entity class.
     */
    class TaskUserActionClass extends UserActionClass implements TaskUserAction {
        UserActionTypeValue: number;
        Name: string;
        Comment: string;
        TaskId: string;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * FormUserAction entity class.
     */
    class FormUserActionClass extends UserActionClass implements FormUserAction {
        FormId: string;
        ControlLabel: string;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * CommandUserAction entity class.
     */
    class CommandUserActionClass extends FormUserActionClass implements CommandUserAction {
        ReturnTypeValue: number;
        CommandName: string;
        ControlName: string;
        ControlType: string;
        Arguments: Entities.CommandArgument[];
        LabelId: string;
        ReturnValue: string;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * Annotation entity class.
     */
    class AnnotationClass implements Annotation {
        Description: string;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * Recording entity class.
     */
    class RecordingClass implements Recording {
        Scopes: Entities.Scope[];
        FormContextEntries: Entities.FormContextDictionaryEntry[];
        RootScope: Entities.Scope;
        Name: string;
        Description: string;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * FormContextDictionaryEntry entity class.
     */
    class FormContextDictionaryEntryClass implements FormContextDictionaryEntry {
        FormId: string;
        FormContext: Entities.FormContext;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ProductVariantResolutionContext entity class.
     */
    class ProductVariantResolutionContextClass implements ProductVariantResolutionContext {
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ProductVariantResolutionOnKitSelectionContext entity class.
     */
    class ProductVariantResolutionOnKitSelectionContextClass extends ProductVariantResolutionContextClass implements ProductVariantResolutionOnKitSelectionContext {
        SelectedComponents: Entities.ComponentInSlotRelation[];
        SlotId: number;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * WarehouseLocation entity class.
     */
    class WarehouseLocationClass implements WarehouseLocation {
        LocationId: string;
        IsLicensePlateControlled: boolean;
        ProfileId: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * FiscalTransaction entity class.
     */
    class FiscalTransactionClass implements FiscalTransaction {
        CreatedDateTime: Date;
        StoreId: string;
        TerminalId: string;
        TransactionId: string;
        TransDateTime: Date;
        LineNumber: number;
        RegisterResponse: string;
        ReceiptCopy: boolean;
        RecordGUID: string;
        RegisterStoreId: string;
        RegisterTerminalId: string;
        StaffId: string;
        RegistrationStatusValue: number;
        RegistrationProcessId: string;
        ConnectorGroup: string;
        ConnectorName: string;
        ConnectorFunctionalityProfileId: string;
        RegisterInfo: string;
        DocumentNumber: string;
        RegistrationTypeValue: number;
        ServiceName: string;
        CountryRegionIsoCode: string;
        TenderLineAdjustments: Entities.FiscalTransactionTenderLineAdjustment[];
        SalesLineAdjustments: Entities.FiscalTransactionSalesLineAdjustment[];
        ReasonCodeLines: Entities.ReasonCodeLine[];
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * FulfillmentLine entity class.
     */
    class FulfillmentLineClass implements FulfillmentLine {
        SalesId: string;
        SalesPersonStoreId: string;
        SalesPersonId: string;
        SalesPersonFirstName: string;
        SalesPersonLastName: string;
        SalesLineNumber: number;
        ReceiptId: string;
        ChannelReferenceId: string;
        CustomerId: string;
        CustomerName: string;
        EmailAddress: string;
        DeliveryModeCode: string;
        DocumentStatusValue: number;
        FulfillmentDeliveryType: Entities.FulfillmentLineDeliveryType;
        DeliveryTypeValue: number;
        QuantityOrdered: number;
        QuantityPicked: number;
        QuantityPacked: number;
        QuantityInvoiced: number;
        StoreInventoryTotalQuantity: number;
        StoreInventoryReservedQuantity: number;
        StoreInventoryOrderedQuantity: number;
        ItemId: string;
        ProductId: number;
        ProductVariant: string;
        ItemName: string;
        FulfillmentStatus: Entities.FulfillmentLineStatus;
        FulfillmentStatusValue: number;
        UnitOfMeasureSymbol: string;
        RequestedShipDate: Date;
        RequestedDeliveryDate: Date;
        RequestedReceiptDate: Date;
        CreatedDate: Date;
        TotalAmount: number;
        Balance: number;
        ShippingAddress: Entities.Address;
        DetailedOrderStatusValue: number;
        DetailedLineStatusValue: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * FulfillmentLineSearchCriteria entity class.
     */
    class FulfillmentLineSearchCriteriaClass implements FulfillmentLineSearchCriteria {
        CustomerId: string;
        CustomerName: string;
        EmailAddress: string;
        SalesId: string;
        OrderCreatedStartDate: Date;
        OrderCreatedEndDate: Date;
        ReceiptId: string;
        StoreId: string;
        ChannelReferenceId: string;
        RequestedReceiptStartDate: Date;
        RequestedReceiptEndDate: Date;
        RequestedDeliveryStartDate: Date;
        RequestedDeliveryEndDate: Date;
        FulfillmentStatusValues: number[];
        DeliveryModeCode: string;
        WarehouseId: string;
        LoyaltyCardNumber: string;
        CustomerPhoneNumber: string;
        DeliveryTypeValue: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * Comment entity class.
     */
    class CommentClass implements Comment {
        RecordId: number;
        AuthorStaffId: string;
        AuthorName: string;
        Text: string;
        CreatedDateTime: Date;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * AddressPurpose entity class.
     */
    class AddressPurposeClass implements AddressPurpose {
        RecordId: number;
        AddressType: number;
        Name: string;
        Description: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * DeliveryChargeLine entity class.
     */
    class DeliveryChargeLineClass implements DeliveryChargeLine {
        ChargeCode: string;
        CurrencyCode: string;
        CalculatedAmount: number;
        Description: string;
        IsRefundable: boolean;
        IsShipping: boolean;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ExtensionPackageDefinition entity class.
     */
    class ExtensionPackageDefinitionClass implements ExtensionPackageDefinition {
        Name: string;
        Publisher: string;
        IsEnabled: boolean;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ReturnPolicy entity class.
     */
    class ReturnPolicyClass implements ReturnPolicy {
        RecordId: number;
        TenderTypePolicies: Entities.TenderTypePolicy[];
        IsManagerOverrideEnabled: boolean;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * TenderTypeAmount entity class.
     */
    class TenderTypeAmountClass implements TenderTypeAmount {
        TenderTypeId: string;
        Amount: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * FeatureState entity class.
     */
    class FeatureStateClass implements FeatureState {
        Name: string;
        IsEnabled: boolean;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * Warranty entity class.
     */
    class WarrantyClass extends SimpleProductClass implements Warranty {
        DurationUnitValue: number;
        Duration: number;
        ApplicablePriceRangeBaseTypeValue: number;
        ApplicablePriceRangeMin: number;
        ApplicablePriceRangeMax: number;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * WarrantyGroup entity class.
     */
    class WarrantyGroupClass implements WarrantyGroup {
        Warranties: Entities.Warranty[];
        RecordId: number;
        GroupName: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ProductWarrantiesMapping entity class.
     */
    class ProductWarrantiesMappingClass implements ProductWarrantiesMapping {
        WarrantyGroups: Entities.WarrantyGroup[];
        WarrantableProductId: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * FulfillmentLineContextualOperationsMap entity class.
     */
    class FulfillmentLineContextualOperationsMapClass implements FulfillmentLineContextualOperationsMap {
        FulfillmentLine: Entities.FulfillmentLine;
        ApplicableOperationsValues: number[];
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * BusinessPartnerProspect entity class.
     */
    class BusinessPartnerProspectClass implements BusinessPartnerProspect {
        FirstName: string;
        LastName: string;
        CompanyName: string;
        Address: Entities.Address;
        JobTitle: string;
        Department: string;
        CompanySize: number;
        Comments: string;
        LastOperationId: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ChecklistTask entity class.
     */
    class ChecklistTaskClass implements ChecklistTask {
        Version: string;
        AssignedToPersonnelNumbers: string[];
        Id: string;
        Name: string;
        Description: string;
        DueDateTime: Date;
        DeepLinkTypeValue: number;
        DeepLink: string;
        DeepLinkPosOperationName: string;
        ContactPersonPersonnelNumber: string;
        Instructions: string;
        StatusValue: number;
        CompletionDateTime: Date;
        ResolvedByPersonnelNumber: string;
        ChecklistId: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * MediaLocation entity class.
     */
    class MediaLocationClass implements MediaLocation {
        Uri: string;
        AltText: string;
        IsDefault: boolean;
        IsSelfHosted: boolean;
        Priority: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * EmployeeActivity entity class.
     */
    class EmployeeActivityClass implements EmployeeActivity {
        StaffId: string;
        StaffName: string;
        Activity: string;
        ActivityDateTimeOffset: Date;
        StoreNumber: string;
        EmployeeActivityTypeValue: number;
        BreakCategory: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * TokenizedPaymentCard entity class.
     */
    class TokenizedPaymentCardClass implements TokenizedPaymentCard {
        IsSwipe: boolean;
        TenderType: string;
        CardTokenInfo: Entities.CardTokenInfo;
        Phone: string;
        Country: string;
        House: string;
        Address1: string;
        Address2: string;
        City: string;
        State: string;
        Zip: string;
        NameOnCard: string;
        CardTypeId: string;
        ExpirationMonth: number;
        ExpirationYear: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * LineShippingAddress entity class.
     */
    class LineShippingAddressClass implements LineShippingAddress {
        LineId: string;
        ShippingAddress: Entities.Address;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * CartDeliveryPreferences entity class.
     */
    class CartDeliveryPreferencesClass implements CartDeliveryPreferences {
        HeaderDeliveryPreferenceTypeValues: number[];
        CartLineDeliveryPreferences: Entities.CartLineDeliveryPreference[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * LineDeliverySpecification entity class.
     */
    class LineDeliverySpecificationClass implements LineDeliverySpecification {
        LineId: string;
        DeliverySpecification: Entities.DeliverySpecification;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * DeliverySpecification entity class.
     */
    class DeliverySpecificationClass implements DeliverySpecification {
        DeliveryModeId: string;
        DeliveryPreferenceTypeValue: number;
        DeliveryAddress: Entities.Address;
        PickUpStoreId: string;
        ElectronicDeliveryEmailAddress: string;
        ElectronicDeliveryEmailContent: string;
        ShipFromStoreId: string;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * OrderSearchCriteria entity class.
     */
    class OrderSearchCriteriaClass implements OrderSearchCriteria {
        CustomerAccountNumber: string;
        CustomerName: string;
        EmailAddress: string;
        LoyaltyCardNumber: string;
        CustomerPhoneNumber: string;
        SalesId: string;
        ReceiptId: string;
        OrderStatusValues: number[];
        StartDateTime: Date;
        EndDateTime: Date;
        ChannelReferenceId: string;
        StoreId: string;
        OrderType: number;
        CustomFilters: Entities.SearchFilter[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ChecklistSearchCriteria entity class.
     */
    class ChecklistSearchCriteriaClass implements ChecklistSearchCriteria {
        ChannelId: number;
        PersonnelNumber: string;
        ChecklistIds: string[];
        StatusValues: number[];
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * TaskSearchCriteria entity class.
     */
    class TaskSearchCriteriaClass implements TaskSearchCriteria {
        ChannelId: number;
        PersonnelNumber: string;
        TaskIds: string[];
        StatusValues: number[];
        FilterMyTasks: boolean;
        FilterOverdueTasks: boolean;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * TenderDiscountLine entity class.
     */
    class TenderDiscountLineClass implements TenderDiscountLine {
        DiscountAmount: number;
        PaymentAmount: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ReceiptRetrievalCriteria entity class.
     */
    class ReceiptRetrievalCriteriaClass implements ReceiptRetrievalCriteria {
        IsCopy: boolean;
        IsRemoteTransaction: boolean;
        IsPreview: boolean;
        QueryBySalesId: boolean;
        ReceiptTypeValue: number;
        ShiftId: number;
        ShiftTerminalId: string;
        HardwareProfileId: string;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * CartSearchCriteria entity class.
     */
    class CartSearchCriteriaClass implements CartSearchCriteria {
        CartId: string;
        ExpectedCartVersion: number;
        CustomerAccountNumber: string;
        IncludeAnonymous: boolean;
        SuspendedOnly: boolean;
        CartTypeValue: number;
        LastModifiedDateTimeFrom: Date;
        LastModifiedDateTimeTo: Date;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * RetrievePaymentResultSettings entity class.
     */
    class RetrievePaymentResultSettingsClass implements RetrievePaymentResultSettings {
        ReturnUrl: string;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * SearchReceiptCriteria entity class.
     */
    class SearchReceiptCriteriaClass implements SearchReceiptCriteria {
        TransactionId: string;
        ReceiptTypeValue: number;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ElectronicAddress entity class.
     */
    class ElectronicAddressClass implements ElectronicAddress {
        AddressTypeValue: number;
        Address: string;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * FulfillmentLineParameter entity class.
     */
    class FulfillmentLineParameterClass implements FulfillmentLineParameter {
        SalesId: string;
        SalesLineNumber: number;
        Quantity: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ShipFulfillmentLine entity class.
     */
    class ShipFulfillmentLineClass extends FulfillmentLineParameterClass implements ShipFulfillmentLine {
        ProductId: number;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * RejectFulfillmentLine entity class.
     */
    class RejectFulfillmentLineClass extends FulfillmentLineParameterClass implements RejectFulfillmentLine {
        RejectedQuantity: number;
        InfoCodeId: string;
        SubInfoCodeId: string;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ReadChangedProductsSession entity class.
     */
    class ReadChangedProductsSessionClass implements ReadChangedProductsSession {
        Id: string;
        TotalNumberOfProducts: number;
        NumberOfProductsRead: number;
        NumberOfProductsReadInCurrentPage: number;
        NextSynchronizationToken: string;
        IsInitialSync: boolean;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * DeletedListingsResult entity class.
     */
    class DeletedListingsResultClass implements DeletedListingsResult {
        HasMorePublishedListings: boolean;
        DeletedListings: Entities.ListingIdentity[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ProductRating entity class.
     */
    class ProductRatingClass implements ProductRating {
        ProductId: number;
        AverageRating: number;
        TotalRatings: number;
        RatingDistribution: Entities.ProductRatingCount[];
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ProductDeliveryOptions entity class.
     */
    class ProductDeliveryOptionsClass implements ProductDeliveryOptions {
        ProductId: number;
        DeliveryOptions: Entities.DeliveryOption[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ListingPublishStatus entity class.
     */
    class ListingPublishStatusClass implements ListingPublishStatus {
        PublishStatusValue: number;
        ListingModifiedDateTime: Date;
        ChannelListingId: string;
        ChannelId: number;
        CatalogId: number;
        ProductId: number;
        LanguageId: string;
        AppliedActionValue: number;
        StatusMessage: string;
        Tag: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * OrgUnitLocationSearchCriteria entity class.
     */
    class OrgUnitLocationSearchCriteriaClass implements OrgUnitLocationSearchCriteria {
        OrgUnitNumber: string;
        OrgUnitName: string;
        InventoryLocationIds: string[];
        DeliveryModeTypeFilterValue: number;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * StoreHours entity class.
     */
    class StoreHoursClass implements StoreHours {
        RegularStoreHours: Entities.RegularStoreHours;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * CartPromotions entity class.
     */
    class CartPromotionsClass implements CartPromotions {
        HeaderPromotions: string[];
        CartLinePromotions: Entities.CartLinePromotion[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * CartPromotionLine entity class.
     */
    class CartPromotionLineClass implements CartPromotionLine {
        LineId: string;
        Promotion: Entities.Promotion;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ItemUnit entity class.
     */
    class ItemUnitClass implements ItemUnit {
        ItemId: string;
        VariantInventoryDimensionId: string;
        Product: number;
        DistinctProductVariant: number;
        UnitOfMeasure: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ProductAvailableQuantity entity class.
     */
    class ProductAvailableQuantityClass implements ProductAvailableQuantity {
        ProductId: number;
        AvailableQuantity: number;
        UnitOfMeasure: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * OrgUnitAvailabilitySearchCriteria entity class.
     */
    class OrgUnitAvailabilitySearchCriteriaClass implements OrgUnitAvailabilitySearchCriteria {
        OrgUnitName: string;
        OrgUnitNumber: string;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * InvoiceSearchCriteria entity class.
     */
    class InvoiceSearchCriteriaClass implements InvoiceSearchCriteria {
        CustomerId: string;
        InvoiceIds: string[];
        InvoiceTypeValues: number[];
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * PickAndPackSalesLineParameter entity class.
     */
    class PickAndPackSalesLineParameterClass implements PickAndPackSalesLineParameter {
        SalesLineNumber: number;
        Quantity: number;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ProductListSearchCriteria entity class.
     */
    class ProductListSearchCriteriaClass implements ProductListSearchCriteria {
        CustomerId: string;
        ProductListId: string;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ProjectionDomain entity class.
     */
    class ProjectionDomainClass implements ProjectionDomain {
        ChannelId: number;
        CatalogId: number;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * AffiliationLoyaltyTier entity class.
     */
    class AffiliationLoyaltyTierClass implements AffiliationLoyaltyTier {
        AffiliationId: number;
        LoyaltyTierId: number;
        AffiliationTypeValue: number;
        ReasonCodeLines: Entities.ReasonCodeLine[];
        CustomerId: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ClientBookCustomerSearchCriteria entity class.
     */
    class ClientBookCustomerSearchCriteriaClass implements ClientBookCustomerSearchCriteria {
        FilterByCurrentEmployee: boolean;
        Refinement: Entities.ClientBookRefinerValue[];
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ClientBookCustomer entity class.
     */
    class ClientBookCustomerClass implements ClientBookCustomer {
        CustomerId: string;
        Name: string;
        Phone: string;
        Email: string;
        StaffId: string;
        ImageUris: Entities.MediaLocation[];
        Attributes: Entities.CustomerAttribute[];
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ClientBookChanges entity class.
     */
    class ClientBookChangesClass implements ClientBookChanges {
        Changes: Entities.ClientBookChange[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ChargeCode entity class.
     */
    class ChargeCodeClass implements ChargeCode {
        Code: string;
        ModuleTypeValue: number;
        Description: string;
        ItemTaxGroupId: string;
        IsRefundable: boolean;
        IsShipping: boolean;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * PaymentMerchantInformation entity class.
     */
    class PaymentMerchantInformationClass implements PaymentMerchantInformation {
        PaymentConnectorPropertiesXml: string;
        MerchantPropertiesHashValue: string;
        ServiceAccountId: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * StoreSafe entity class.
     */
    class StoreSafeClass implements StoreSafe {
        SafeNumber: string;
        Name: string;
        StoreNumber: string;
        SafeBalance: number;
        LastUpdatedTime: Date;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * CreateHardwareStationTokenResult entity class.
     */
    class CreateHardwareStationTokenResultClass implements CreateHardwareStationTokenResult {
        HardwareStationToken: string;
        PairingKey: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ValidateHardwareStationTokenResult entity class.
     */
    class ValidateHardwareStationTokenResultClass implements ValidateHardwareStationTokenResult {
        PairingKey: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * TerminalDataDownloadRequestInfo entity class.
     */
    class TerminalDataDownloadRequestInfoClass implements TerminalDataDownloadRequestInfo {
        TerminalId: string;
        RequiresDataInitialization: boolean;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * DataDownloadParameters entity class.
     */
    class DataDownloadParametersClass implements DataDownloadParameters {
        DownloadInterval: number;
        DownloadSessions: Entities.DownloadSession[];
        FeatureControlList: Entities.RetailSharedConfigurationParameter[];
        DataStore: Entities.CDXDataStore;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * TerminalDataUploadRequestInfo entity class.
     */
    class TerminalDataUploadRequestInfoClass implements TerminalDataUploadRequestInfo {
        TerminalId: string;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * DataUploadParameters entity class.
     */
    class DataUploadParametersClass implements DataUploadParameters {
        UploadInterval: number;
        UploadJobPackageRequests: Entities.UploadJobPackageRequest[];
        FeatureControlList: Entities.RetailSharedConfigurationParameter[];
        DataStore: Entities.CDXDataStore;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * DownloadSession entity class.
     */
    class DownloadSessionClass implements DownloadSession {
        Id: number;
        JobId: string;
        JobDescription: string;
        FileSize: number;
        RowsAffected: number;
        Checksum: string;
        DateDownloaded: string;
        DateRequested: string;
        DataStoreName: string;
        StatusValue: number;
        Message: string;
        DownloadLink: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * LoyaltyRewardPointActivity entity class.
     */
    class LoyaltyRewardPointActivityClass implements LoyaltyRewardPointActivity {
        ActivityDate: Date;
        LoyaltyRewardPointTimelineEntryType: string;
        ExtensibleLoyaltyRewardPointActivityEntryTypeValue: number;
        LoyaltyPoints: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * CurrencyRequest entity class.
     */
    class CurrencyRequestClass implements CurrencyRequest {
        AmountToConvert: number;
        CurrencyCode: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * HardwareStationProfile entity class.
     */
    class HardwareStationProfileClass implements HardwareStationProfile {
        RecordId: number;
        HardwareStationId: string;
        HardwareStationTypeValue: number;
        HardwareProfileId: string;
        HardwareStationName: string;
        HardwareStationDescription: string;
        HardwareStationUrl: string;
        HardwareStationHostName: string;
        HardwareStationEftTerminalId: string;
        HardwareConfigurations: Entities.HardwareConfigurations;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * NameValuePair entity class.
     */
    class NameValuePairClass implements NameValuePair {
        Name: string;
        Value: string;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * LinkToExistingCustomerResult entity class.
     */
    class LinkToExistingCustomerResultClass implements LinkToExistingCustomerResult {
        EmailAddress: string;
        ExternalIdentityProvider: string;
        ExternalIdentityLinkRecordId: number;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * OfflineSyncStatsLine entity class.
     */
    class OfflineSyncStatsLineClass implements OfflineSyncStatsLine {
        IsUploadJob: boolean;
        JobDescription: string;
        LastSyncDateTime: Date;
        Status: string;
        FileSize: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * StorageAccessToken entity class.
     */
    class StorageAccessTokenClass implements StorageAccessToken {
        Url: string;
        SasKey: string;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * TaskGuidesSearchResult entity class.
     */
    class TaskGuidesSearchResultClass implements TaskGuidesSearchResult {
        Lines: Entities.Line[];
        FrameworkPublisherName: string;
        FrameworkName: string;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * AuditEvent entity class.
     */
    class AuditEventClass implements AuditEvent {
        EventId: number;
        EventIdString: string;
        Channel: number;
        Store: string;
        Terminal: string;
        UploadType: string;
        EventType: string;
        DurationInMilliseconds: number;
        Source: string;
        EventMessage: string;
        LogLevel: string;
        Staff: string;
        ShiftId: number;
        ReferenceId: number;
        RefChannel: number;
        RefStore: string;
        RefTerminal: string;
        RefTransactionId: string;
        AuditEventTypeValue: number;
        FiscalTransactions: Entities.AuditEventFiscalTransaction[];
        FiscalRegistrationLines: Entities.AuditEventFiscalRegistrationLine[];
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ItemAvailability entity class.
     */
    class ItemAvailabilityClass implements ItemAvailability {
        ItemId: string;
        VariantInventoryDimensionId: string;
        InventoryLocationId: string;
        ProductId: number;
        AvailableQuantity: number;
        OrderedSum: number;
        PhysicalReserved: number;
        UnitOfMeasure: string;
        InventoryUnitOfMeasure: string;
        InventoryUnitOfMeasureDescription: string;
        ProductDimensions: Entities.ProductDimension[];
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * InventoryAvailableToPromise entity class.
     */
    class InventoryAvailableToPromiseClass extends ItemAvailabilityClass implements InventoryAvailableToPromise {
        Date: string;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * NotificationItem entity class.
     */
    class NotificationItemClass implements NotificationItem {
        Action: number;
        ActionName: string;
        NotificationDetails: Entities.NotificationDetail[];
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * FiscalIntegrationDocumentRetrievalCriteria entity class.
     */
    class FiscalIntegrationDocumentRetrievalCriteriaClass implements FiscalIntegrationDocumentRetrievalCriteria {
        TransactionId: string;
        IsRemoteTransaction: boolean;
        QueryBySalesId: boolean;
        FiscalRegistrationEventTypeValue: number;
        ShiftId: number;
        ShiftTerminalId: string;
        DocumentContext: Entities.FiscalIntegrationDocumentContext;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * FiscalIntegrationDocument entity class.
     */
    class FiscalIntegrationDocumentClass implements FiscalIntegrationDocument {
        Document: string;
        DocumentGenerationResultTypeValue: number;
        FiscalConnectorTechnicalProfile: Entities.FiscalIntegrationTechnicalProfile;
        DocumentAdjustment: Entities.FiscalIntegrationDocumentAdjustment;
        SequentialSignatureDataContext: Entities.FiscalIntegrationSignatureDataContext;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * FiscalIntegrationRegistrationResult entity class.
     */
    class FiscalIntegrationRegistrationResultClass implements FiscalIntegrationRegistrationResult {
        TransactionID: string;
        AuditEventId: string;
        Response: string;
        SubmittedDocument: string;
        RegisterInfo: string;
        RegistrationStatusValue: number;
        FiscalRegistrationEventTypeValue: number;
        DocumentAdjustment: Entities.FiscalIntegrationDocumentAdjustment;
        ReasonCodeLines: Entities.ReasonCodeLine[];
        SequentialSignatureData: Entities.FiscalIntegrationSequentialSignatureData;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * FiscalIntegrationRegistrationProcess entity class.
     */
    class FiscalIntegrationRegistrationProcessClass implements FiscalIntegrationRegistrationProcess {
        RecordId: number;
        RegistrationProcessId: string;
        Description: string;
        RegistrationProcessLines: Entities.FiscalIntegrationRegistrationProcessLine[];
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * FiscalIntegrationSupportedEvents entity class.
     */
    class FiscalIntegrationSupportedEventsClass implements FiscalIntegrationSupportedEvents {
        FunctionalityProfileGroupId: string;
        SupportedFiscalEventTypes: number[];
        SupportedNonFiscalEventTypes: number[];
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * FiscalIntegrationTechnicalProfile entity class.
     */
    class FiscalIntegrationTechnicalProfileClass implements FiscalIntegrationTechnicalProfile {
        ProfileId: string;
        Description: string;
        ConnectorName: string;
        ConnectorTypeValue: number;
        TechnicalProfile: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * FiscalIntegrationTechnicalProfileSearchCriteria entity class.
     */
    class FiscalIntegrationTechnicalProfileSearchCriteriaClass implements FiscalIntegrationTechnicalProfileSearchCriteria {
        ExcludeOptionalProcessLines: boolean;
        FunctionalityProfileGroupIds: string[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * FiscalIntegrationServiceInfo entity class.
     */
    class FiscalIntegrationServiceInfoClass implements FiscalIntegrationServiceInfo {
        ServiceName: string;
        ServiceProperties: string;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * FiscalIntegrationServiceStatus entity class.
     */
    class FiscalIntegrationServiceStatusClass implements FiscalIntegrationServiceStatus {
        IsReady: boolean;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * FiscalIntegrationServiceCommunicationResult entity class.
     */
    class FiscalIntegrationServiceCommunicationResultClass implements FiscalIntegrationServiceCommunicationResult {
        Response: string;
        CommunicationResultTypeValue: number;
        FailureDetails: Entities.FiscalIntegrationServiceFailureDetails;
        FiscalIntegrationServiceInfo: string;
        UserNotificationMessage: string;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * FiscalIntegrationSequentialSignatureData entity class.
     */
    class FiscalIntegrationSequentialSignatureDataClass implements FiscalIntegrationSequentialSignatureData {
        LastRegisterResponse: string;
        SequenceKey: string;
        IsOffline: boolean;
        SequentialNumber: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * DiscountsSearchCriteria entity class.
     */
    class DiscountsSearchCriteriaClass implements DiscountsSearchCriteria {
        ChannelId: number;
        Keyword: string;
        IsDiscountCodeRequired: boolean;
        StartDate: Date;
        EndDate: Date;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * Promotion entity class.
     */
    class PromotionClass implements Promotion {
        OfferId: string;
        OfferName: string;
        PeriodicDiscountTypeValue: number;
        IsDiscountCodeRequired: boolean;
        ValidationPeriodId: string;
        AdditionalRestrictions: string;
        Description: string;
        ValidFromDate: Date;
        ValidToDate: Date;
        ValidationPeriod: Entities.ValidationPeriod;
        CouponCodes: string[];
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * CategoryPathLookup entity class.
     */
    class CategoryPathLookupClass implements CategoryPathLookup {
        ProductId: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * CategoryPathResult entity class.
     */
    class CategoryPathResultClass implements CategoryPathResult {
        ProductId: number;
        CategoryPath: Entities.CategoryPath[];
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ExtensionProfile entity class.
     */
    class ExtensionProfileClass implements ExtensionProfile {
        ExtensionServiceUrl: string;
        AttachedServices: Entities.AttachedService[];
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ChannelInventoryConfiguration entity class.
     */
    class ChannelInventoryConfigurationClass implements ChannelInventoryConfiguration {
        RecordId: number;
        ChannelId: string;
        AllowTransferOrderOverDelivery: boolean;
        AllowTransferOrderUnderDelivery: boolean;
        UserLocationProfileId: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ShiftRetrievalCriteria entity class.
     */
    class ShiftRetrievalCriteriaClass implements ShiftRetrievalCriteria {
        ShiftStatusValue: number;
        FilterByUserRole: boolean;
        IncludeAllShiftsForStore: boolean;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * MediaBlob entity class.
     */
    class MediaBlobClass implements MediaBlob {
        MediaType: string;
        Content: string;
        IsDefault: boolean;
        AltText: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * TerminalInfo entity class.
     */
    class TerminalInfoClass implements TerminalInfo {
        TerminalId: string;
        DeviceNumber: string;
        Name: string;
        DeviceType: number;
        ActivationStatusValue: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * CustomerTimelineItemTypeMap entity class.
     */
    class CustomerTimelineItemTypeMapClass implements CustomerTimelineItemTypeMap {
        EntityType: string;
        Types: Entities.CustomerTimelineItemType[];
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * CustomerTimelineRefiner entity class.
     */
    class CustomerTimelineRefinerClass implements CustomerTimelineRefiner {
        RefinedResultsCount: number;
        EntityType: string;
        TypeId: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * CustomerTitle entity class.
     */
    class CustomerTitleClass implements CustomerTitle {
        Text: string;
        RecordId: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ProductWarehouse entity class.
     */
    class ProductWarehouseClass implements ProductWarehouse {
        ProductId: number;
        InventLocationId: string;
        DataAreaId: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ProductWarehouseInventoryInformation entity class.
     */
    class ProductWarehouseInventoryInformationClass implements ProductWarehouseInventoryInformation {
        ProductWarehouseInventoryAvailabilities: Entities.ProductWarehouseInventoryAvailability[];
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * InventoryAvailabilitySearchCriteria entity class.
     */
    class InventoryAvailabilitySearchCriteriaClass implements InventoryAvailabilitySearchCriteria {
        ProductIds: number[];
        DefaultWarehouseOnly: boolean;
        SearchArea: Entities.SearchArea;
        FilterByChannelFulfillmentGroup: boolean;
        DataLevelValue: number;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ExtensibleEnumerationContainer entity class.
     */
    class ExtensibleEnumerationContainerClass implements ExtensibleEnumerationContainer {
        TypeName: string;
        ExtensibleEnumerations: Entities.ExtensibleEnumeration[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * PackingSlipData entity class.
     */
    class PackingSlipDataClass implements PackingSlipData {
        PackingSlipId: string;
        CreatedDateTime: Date;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * OrgUnitAddress entity class.
     */
    class OrgUnitAddressClass extends AddressClass implements OrgUnitAddress {
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * WarehouseDetails entity class.
     */
    class WarehouseDetailsClass extends AddressClass implements WarehouseDetails {
        InventoryLocationId: string;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * AttributeBooleanValue entity class.
     */
    class AttributeBooleanValueClass extends AttributeValueBaseClass implements AttributeBooleanValue {
        Value: boolean;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * AttributeCurrencyValue entity class.
     */
    class AttributeCurrencyValueClass extends AttributeValueBaseClass implements AttributeCurrencyValue {
        CurrencyValue: number;
        CurrencyCode: string;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * AttributeDateTimeOffsetValue entity class.
     */
    class AttributeDateTimeOffsetValueClass extends AttributeValueBaseClass implements AttributeDateTimeOffsetValue {
        Value: Date;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * AttributeFloatValue entity class.
     */
    class AttributeFloatValueClass extends AttributeValueBaseClass implements AttributeFloatValue {
        Value: number;
        UnitSymbol: string;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * AttributeIntValue entity class.
     */
    class AttributeIntValueClass extends AttributeValueBaseClass implements AttributeIntValue {
        Value: number;
        UnitSymbol: string;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * AttributeMediaLocationValue entity class.
     */
    class AttributeMediaLocationValueClass extends AttributeValueBaseClass implements AttributeMediaLocationValue {
        Value: Entities.MediaLocation[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * AttributeTextValue entity class.
     */
    class AttributeTextValueClass extends AttributeValueBaseClass implements AttributeTextValue {
        TextValue: string;
        TextValueTranslations: Entities.TextValueTranslation[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ButtonGridButton entity class.
     */
    class ButtonGridButtonClass implements ButtonGridButton {
        Action: number;
        ActionProperty: string;
        BackColorAsARGB: Entities.ARGBColor;
        BorderColorAsARGB: Entities.ARGBColor;
        Column: number;
        ColumnSpan: number;
        DisplayText: string;
        FontColorAsARGB: Entities.ARGBColor;
        ButtonId: number;
        Row: number;
        RowSpan: number;
        UseCustomLookAndFeel: boolean;
        PictureAsBase64: string;
        FontStyle: number;
        FontSize: number;
        EnableCustomFontForPOS: boolean;
        HideButtonText: boolean;
        Tooltip: string;
        EnableLiveContent: boolean;
        NotificationContentAlignment: number;
        ImageAlignment: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ARGBColor entity class.
     */
    class ARGBColorClass implements ARGBColor {
        A: number;
        R: number;
        G: number;
        B: number;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ExtensiblePeriodicDiscountOfferType entity class.
     */
    class ExtensiblePeriodicDiscountOfferTypeClass extends ExtensibleEnumerationClass implements ExtensiblePeriodicDiscountOfferType {
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ChargeLineOverride entity class.
     */
    class ChargeLineOverrideClass implements ChargeLineOverride {
        OriginalAmount: number;
        OverrideAmount: number;
        OverrideReasonDescription: string;
        OverrideDateTime: Date;
        UserId: string;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * TaxLineGTE entity class.
     */
    class TaxLineGTEClass extends TaxLineClass implements TaxLineGTE {
        TaxComponent: string;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * TaxMeasure entity class.
     */
    class TaxMeasureClass implements TaxMeasure {
        Path: string;
        Value: number;
        DataAreaId: string;
        SaleLineNumber: number;
        StoreId: string;
        TerminalId: string;
        TransactionId: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * CardTokenInfo entity class.
     */
    class CardTokenInfoClass implements CardTokenInfo {
        CardToken: string;
        UniqueCardId: string;
        ServiceAccountId: string;
        MaskedCardNumber: string;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ProductAttributeMetadataFlags entity class.
     */
    class ProductAttributeMetadataFlagsClass implements ProductAttributeMetadataFlags {
        IsSearchable: boolean;
        IsRetrievable: boolean;
        IsQueryable: boolean;
        IsRefinable: boolean;
        IsSortable: boolean;
        IsMultiValue: boolean;
        IsTokenNormalization: boolean;
        IsCompleteMatch: boolean;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * UnitOfMeasureConversion entity class.
     */
    class UnitOfMeasureConversionClass implements UnitOfMeasureConversion {
        ItemId: string;
        FromUnitOfMeasureId: string;
        ToUnitOfMeasureId: string;
        FromUnitOfMeasureSymbol: string;
        ToUnitOfMeasureSymbol: string;
        IsBackward: boolean;
        RecordId: number;
        ProductRecordId: number;
        Factor: number;
        Numerator: number;
        Denominator: number;
        InnerOffset: number;
        OuterOffset: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * PriceLine entity class.
     */
    class PriceLineClass implements PriceLine {
        RecordId: number;
        Value: number;
        PriceMethod: string;
        OriginId: string;
        PriceChangedByExtensions: boolean;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * BasePriceLine entity class.
     */
    class BasePriceLineClass extends PriceLineClass implements BasePriceLine {
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * PriceAdjustmentPriceLine entity class.
     */
    class PriceAdjustmentPriceLineClass extends PriceLineClass implements PriceAdjustmentPriceLine {
        IsCompoundable: boolean;
        Concurrency: string;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * TradeAgreementPriceLine entity class.
     */
    class TradeAgreementPriceLineClass extends PriceLineClass implements TradeAgreementPriceLine {
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ReturnLabelContent entity class.
     */
    class ReturnLabelContentClass implements ReturnLabelContent {
        ReturnLocationText: string;
        ReturnWarehouseText: string;
        ReturnReasonText: string;
        ReturnPalleteText: string;
        ItemId: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * LoyaltyRewardPointLine entity class.
     */
    class LoyaltyRewardPointLineClass implements LoyaltyRewardPointLine {
        TransactionId: string;
        SaleLineNumber: number;
        LoyaltyGroupRecordId: number;
        LoyaltyCardNumber: string;
        CustomerAccount: string;
        EntryDate: Date;
        EntryTime: number;
        EntryTypeValue: number;
        ExpirationDate: Date;
        LineNumber: number;
        LoyaltyTierRecordId: number;
        RewardPointRecordId: number;
        RewardPointAmountQuantity: number;
        RewardPointId: string;
        RewardPointIsRedeemable: boolean;
        RewardPointType: string;
        RewardPointCurrency: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * TrackingInfo entity class.
     */
    class TrackingInfoClass implements TrackingInfo {
        TrackingNumber: string;
        ServiceType: string;
        PackageWeight: Entities.Weight;
        ShippedOnDate: Date;
        Status: string;
        DeliveredOnDate: Date;
        EstimatedDeliveryDate: Date;
        TrackingUrl: string;
        PackagingType: string;
        DestinationAddress: Entities.Address;
        OriginAddress: Entities.Address;
        ShipmentProgress: Entities.ShipmentProgress[];
        ShippingCharge: number;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * Weight entity class.
     */
    class WeightClass implements Weight {
        Value: number;
        Unit: string;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ShipmentProgress entity class.
     */
    class ShipmentProgressClass implements ShipmentProgress {
        Location: Entities.Address;
        DateTime: Date;
        Activity: string;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ShiftKey entity class.
     */
    class ShiftKeyClass implements ShiftKey {
        ShiftTerminalId: string;
        ShiftId: number;
        Store: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * AddressFormattingInfo entity class.
     */
    class AddressFormattingInfoClass implements AddressFormattingInfo {
        AddressComponentNameValue: number;
        LineNumber: number;
        IsDataEntryOnly: boolean;
        NewLine: boolean;
        Expand: boolean;
        Inactive: boolean;
        Special: boolean;
        NumberOfSpaces: number;
        Separator: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ScaleUnitConfiguration entity class.
     */
    class ScaleUnitConfigurationClass implements ScaleUnitConfiguration {
        Id: string;
        Name: string;
        Region: string;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * HardwareConfigurations entity class.
     */
    class HardwareConfigurationsClass implements HardwareConfigurations {
        CashDrawerConfigurations: Entities.HardwareConfiguration[];
        PrinterConfigurations: Entities.HardwareConfiguration[];
        PinPadConfiguration: Entities.HardwareConfiguration;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * HardwareConfiguration entity class.
     */
    class HardwareConfigurationClass implements HardwareConfiguration {
        RecordId: number;
        HardwareStationRecordId: number;
        TerminalId: string;
        DeviceName: string;
        IPAddress: string;
        Port: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * PaymentError entity class.
     */
    class PaymentErrorClass implements PaymentError {
        Code: string;
        Message: string;
        IsLocalized: boolean;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * Printer entity class.
     */
    class PrinterClass implements Printer {
        Name: string;
        PrinterType: number;
        Terminal: number;
        PrintBehaviorValue: number;
        ReceiptLayoutId: string;
        HardwareProfileId: string;
        ReceiptType: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * TransferOrderJournalLine entity class.
     */
    class TransferOrderJournalLineClass implements TransferOrderJournalLine {
        ItemId: string;
        ItemName: string;
        InventDimId: string;
        TotalQuantityShipped: number;
        QuantityShipped: number;
        TransferQuantity: number;
        UnitId: string;
        ConfigId: string;
        InventSizeId: string;
        InventColorId: string;
        InventStyleId: string;
        DeliveryMethod: string;
        Barcode: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * InventoryDocumentSourceSerialNumberLine entity class.
     */
    class InventoryDocumentSourceSerialNumberLineClass implements InventoryDocumentSourceSerialNumberLine {
        SourceDocumentTypeValue: number;
        SourceDocumentId: string;
        DocumentLineRecordId: number;
        InventTransRecordId: number;
        LineId: string;
        Quantity: number;
        SerialNumber: string;
        StatusValue: number;
        ProductId: number;
        DataAreaId: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * KitTransactionLine entity class.
     */
    class KitTransactionLineClass implements KitTransactionLine {
        ItemId: string;
        Quantity: number;
        InventoryDimensionId: string;
        ProductId: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ExtensibleRetailChannelType entity class.
     */
    class ExtensibleRetailChannelTypeClass extends ExtensibleEnumerationClass implements ExtensibleRetailChannelType {
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * TenderDetail entity class.
     */
    class TenderDetailClass implements TenderDetail {
        LineNumber: number;
        Amount: number;
        AmountInForeignCurrency: number;
        ForeignCurrencyExchangeRate: number;
        ForeignCurrency: string;
        BankBagNumber: string;
        TenderTypeId: string;
        TenderRecount: number;
        DenominationDetails: Entities.DenominationDetail[];
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * DenominationDetail entity class.
     */
    class DenominationDetailClass implements DenominationDetail {
        Type: number;
        Currency: string;
        DenominationAmount: number;
        QuantityDeclared: number;
        AmountDeclared: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ButtonGridZone entity class.
     */
    class ButtonGridZoneClass implements ButtonGridZone {
        ButtonGridId: string;
        ZoneId: string;
        ZoneName: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ImageZone entity class.
     */
    class ImageZoneClass implements ImageZone {
        PictureId: number;
        PictureAsBase64: string;
        ZoneId: string;
        ZoneName: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ReportZone entity class.
     */
    class ReportZoneClass implements ReportZone {
        ReportRecordId: number;
        ZoneId: string;
        ZoneName: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * SalesInvoiceLine entity class.
     */
    class SalesInvoiceLineClass implements SalesInvoiceLine {
        RecordId: number;
        ItemId: string;
        ProductName: string;
        InventDimensionId: string;
        InventTransactionId: string;
        Quantity: number;
        Price: number;
        DiscountPercent: number;
        DiscountAmount: number;
        BatchId: string;
        NetAmount: number;
        Site: string;
        Warehouse: string;
        SerialId: string;
        ColorId: string;
        SizeId: string;
        StyleId: string;
        ConfigId: string;
        ColorName: string;
        SizeName: string;
        StyleName: string;
        ConfigName: string;
        SalesTaxGroup: string;
        ItemTaxGroup: string;
        SalesMarkup: number;
        TotalDiscount: number;
        TotalPercentageDiscount: number;
        LineDiscount: number;
        PeriodicDiscount: number;
        PeriodicPercentageDiscount: number;
        LineManualDiscountPercentage: number;
        LineManualDiscountAmount: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ReportRow entity class.
     */
    class ReportRowClass implements ReportRow {
        RowData: Entities.CommerceProperty[];
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * FormAnnotation entity class.
     */
    class FormAnnotationClass extends AnnotationClass implements FormAnnotation {
        MenuItemLabel: string;
        MenuItemName: string;
        MenuItemType: string;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * TaskGuideAnnotation entity class.
     */
    class TaskGuideAnnotationClass extends AnnotationClass implements TaskGuideAnnotation {
        RecordingValueType: string;
        Title: string;
        ExampleText: string;
        Hidden: boolean;
        GlobalId: string;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * CommandArgument entity class.
     */
    class CommandArgumentClass implements CommandArgument {
        Value: string;
        IsReference: boolean;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * PropertyUserAction entity class.
     */
    class PropertyUserActionClass extends FormUserActionClass implements PropertyUserAction {
        Value: string;
        ValueLabel: string;
        PropertyName: string;
        ControlName: string;
        ControlType: string;
        UserActionType: string;
        IsReference: boolean;
        LabelId: string;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * InfoUserAction entity class.
     */
    class InfoUserActionClass extends UserActionClass implements InfoUserAction {
        FormId: string;
        ControlLabel: string;
        ControlLabelId: string;
        ControlName: string;
        Text: string;
        Notes: string;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * MenuItemUserAction entity class.
     */
    class MenuItemUserActionClass extends UserActionClass implements MenuItemUserAction {
        MenuItemName: string;
        MenuItemType: string;
        NavigationPath: string[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ValidationUserAction entity class.
     */
    class ValidationUserActionClass extends UserActionClass implements ValidationUserAction {
        Name: string;
        Comment: string;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ArtifactSummary entity class.
     */
    class ArtifactSummaryClass implements ArtifactSummary {
        ArtifactType: string;
        LanguageTags: string[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * MetadataPropertyValue entity class.
     */
    class MetadataPropertyValueClass implements MetadataPropertyValue {
        PropertyId: string;
        SingleValue: string;
        MultiValue: Entities.MetadataText[];
        Tags: string[];
        ComboBox: string;
        MultiSelect: string[];
        Links: Entities.MetadataHypertextLink[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * MetadataText entity class.
     */
    class MetadataTextClass implements MetadataText {
        Id: string;
        Text: string;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * MetadataHypertextLink entity class.
     */
    class MetadataHypertextLinkClass implements MetadataHypertextLink {
        Id: string;
        DisplayName: string;
        Url: string;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * FormContext entity class.
     */
    class FormContextClass implements FormContext {
        FormID: string;
        FormName: string;
        RecordingName: string;
        HasMetadata: boolean;
        Sequence: number;
        Annotations: Entities.Annotation[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ExtensibleFiscalRegistrationType entity class.
     */
    class ExtensibleFiscalRegistrationTypeClass extends ExtensibleEnumerationClass implements ExtensibleFiscalRegistrationType {
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * FiscalTransactionTenderLineAdjustment entity class.
     */
    class FiscalTransactionTenderLineAdjustmentClass implements FiscalTransactionTenderLineAdjustment {
        TenderLineNumber: number;
        AdjustmentAmount: number;
        RecordGuid: string;
        TransactionId: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * FiscalTransactionSalesLineAdjustment entity class.
     */
    class FiscalTransactionSalesLineAdjustmentClass implements FiscalTransactionSalesLineAdjustment {
        SalesLineNumber: number;
        Exclude: boolean;
        RecordGuid: string;
        TransactionId: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * DetailedOrderStatus entity class.
     */
    class DetailedOrderStatusClass extends ExtensibleEnumerationClass implements DetailedOrderStatus {
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * DetailedLineStatus entity class.
     */
    class DetailedLineStatusClass extends ExtensibleEnumerationClass implements DetailedLineStatus {
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * SalesAffiliationLoyaltyTier entity class.
     */
    class SalesAffiliationLoyaltyTierClass extends AffiliationLoyaltyTierClass implements SalesAffiliationLoyaltyTier {
        TransactionId: string;
        ChannelId: number;
        TerminalId: string;
        ReceiptId: string;
        StaffId: string;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * TaxViewLine entity class.
     */
    class TaxViewLineClass implements TaxViewLine {
        TaxId: string;
        TaxAmount: number;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * Coupon entity class.
     */
    class CouponClass implements Coupon {
        CodeId: string;
        Code: string;
        DiscountOfferId: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * CustomerAccountDepositLine entity class.
     */
    class CustomerAccountDepositLineClass implements CustomerAccountDepositLine {
        Amount: number;
        CustomerAccount: string;
        Comment: string;
        StoreNumber: string;
        Terminal: string;
        Shift: string;
        TransactionStatusValue: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * CustomerAttribute entity class.
     */
    class CustomerAttributeClass implements CustomerAttribute {
        AttributeValue: Entities.CommercePropertyValue;
        Units: string;
        RecordId: number;
        Name: string;
        KeyName: string;
        DataTypeValue: number;
        Attribute: number;
        NameTranslations: Entities.TextValueTranslation[];
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ContactInfo entity class.
     */
    class ContactInfoClass implements ContactInfo {
        AddressTypeValue: number;
        RecordId: number;
        PartyLocationRecordId: number;
        PartyRecordId: number;
        PartyNumber: string;
        Description: string;
        Value: string;
        ValueExtension: string;
        LogisticsLocationId: string;
        LogisticsLocationRecordId: number;
        ParentLocation: number;
        IsPrimary: boolean;
        IsMobilePhone: boolean;
        IsPrivate: boolean;
        IsOptedInMarketing: boolean;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ShiftTaxLine entity class.
     */
    class ShiftTaxLineClass implements ShiftTaxLine {
        TaxCode: string;
        TaxAmount: number;
        TaxRate: number;
        NetAmount: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * TaxRegistration entity class.
     */
    class TaxRegistrationClass implements TaxRegistration {
        RecordId: number;
        Name: string;
        CountryRegionId: string;
        IsRegistrationNumberUnique: boolean;
        IsPrimaryAddressRestricted: boolean;
        TypeApplicabilityRuleRecordId: number;
        TypeValue: number;
        Description: string;
        DirPartyLocationRecordId: number;
        RegistrationNumber: string;
        ValidFrom: Date;
        ValidTo: Date;
        Issuer: string;
        IssueDate: Date;
        Section: string;
        DirectoryPartyRecordId: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ChannelTaxRegistration entity class.
     */
    class ChannelTaxRegistrationClass extends TaxRegistrationClass implements ChannelTaxRegistration {
        ChannelId: number;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * LinkedProduct entity class.
     */
    class LinkedProductClass implements LinkedProduct {
        ProductRecordId: number;
        LinkedProductRecordId: number;
        Quantity: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * DisplayOrderInCategory entity class.
     */
    class DisplayOrderInCategoryClass implements DisplayOrderInCategory {
        CategoryRecordId: number;
        DisplayOrder: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * RelatedProduct entity class.
     */
    class RelatedProductClass implements RelatedProduct {
        ProductRecordId: number;
        RelatedProductRecordId: number;
        CatalogId: number;
        RelationName: string;
        IsExcludedRelation: boolean;
        IsDirectRelation: boolean;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * KitComponent entity class.
     */
    class KitComponentClass implements KitComponent {
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ListingIdentity entity class.
     */
    class ListingIdentityClass implements ListingIdentity {
        ProductId: number;
        LanguageId: string;
        CatalogId: number;
        Tag: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ProductRatingCount entity class.
     */
    class ProductRatingCountClass implements ProductRatingCount {
        Rating: number;
        Count: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * RegularStoreHours entity class.
     */
    class RegularStoreHoursClass implements RegularStoreHours {
        MondayOpenTime: number;
        MondayCloseTime: number;
        IsClosedOnMonday: boolean;
        TuesdayOpenTime: number;
        TuesdayCloseTime: number;
        IsClosedOnTuesday: boolean;
        WednesdayOpenTime: number;
        WednesdayCloseTime: number;
        IsClosedOnWednesday: boolean;
        ThursdayOpenTime: number;
        ThursdayCloseTime: number;
        IsClosedOnThursday: boolean;
        FridayOpenTime: number;
        FridayCloseTime: number;
        IsClosedOnFriday: boolean;
        SaturdayOpenTime: number;
        SaturdayCloseTime: number;
        IsClosedOnSaturday: boolean;
        SundayOpenTime: number;
        SundayCloseTime: number;
        IsClosedOnSunday: boolean;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ValidationPeriod entity class.
     */
    class ValidationPeriodClass implements ValidationPeriod {
        RecordId: number;
        PeriodId: string;
        Description: string;
        ValidFrom: Date;
        ValidTo: Date;
        StartingTime: number;
        EndingTime: number;
        IsTimeBounded: number;
        MondayStartingTime: number;
        MondayEndingTime: number;
        IsMondayTimeBounded: number;
        TuesdayStartingTime: number;
        TuesdayEndingTime: number;
        IsTuesdayTimeBounded: number;
        WednesdayStartingTime: number;
        WednesdayEndingTime: number;
        IsWednesdayTimeBounded: number;
        ThursdayStartingTime: number;
        ThursdayEndingTime: number;
        IsThursdayTimeBounded: number;
        FridayStartingTime: number;
        FridayEndingTime: number;
        IsFridayTimeBounded: number;
        SaturdayStartingTime: number;
        SaturdayEndingTime: number;
        IsSaturdayTimeBounded: number;
        SundayStartingTime: number;
        SundayEndingTime: number;
        IsSundayTimeBounded: number;
        IsEndTimeAfterMidnight: number;
        IsMondayEndTimeAfterMidnight: number;
        IsTuesdayEndTimeAfterMidnight: number;
        IsWednesdayEndTimeAfterMidnight: number;
        IsThursdayEndTimeAfterMidnight: number;
        IsFridayEndTimeAfterMidnight: number;
        IsSaturdayEndTimeAfterMidnight: number;
        IsSundayEndTimeAfterMidnight: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ClientBookChange entity class.
     */
    class ClientBookChangeClass implements ClientBookChange {
        FromStaffId: string;
        ToStaffId: string;
        CustomerId: string;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * RetailSharedConfigurationParameter entity class.
     */
    class RetailSharedConfigurationParameterClass implements RetailSharedConfigurationParameter {
        RecordId: number;
        Name: string;
        Value: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * CDXDataStore entity class.
     */
    class CDXDataStoreClass implements CDXDataStore {
        Name: string;
        RecId: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * UploadJobPackageRequest entity class.
     */
    class UploadJobPackageRequestClass implements UploadJobPackageRequest {
        JobId: string;
        RerunUploadSessionId: number;
        TargetStorage: string;
        UploadJobDefintion: string;
        UploadUrl: string;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ExtensibleAuditEventType entity class.
     */
    class ExtensibleAuditEventTypeClass extends ExtensibleEnumerationClass implements ExtensibleAuditEventType {
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * AuditEventFiscalTransaction entity class.
     */
    class AuditEventFiscalTransactionClass implements AuditEventFiscalTransaction {
        EventId: number;
        LineNumber: number;
        RegisterResponse: string;
        Store: string;
        TransDateTime: Date;
        Terminal: string;
        UploadType: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * AuditEventFiscalRegistrationLine entity class.
     */
    class AuditEventFiscalRegistrationLineClass implements AuditEventFiscalRegistrationLine {
        EventId: number;
        RegisterResponse: string;
        StoreId: string;
        TransactionDateTime: Date;
        TerminalId: string;
        UploadType: string;
        UploadTypeValue: number;
        StaffId: string;
        RecordGuid: string;
        RegistrationStatusValue: number;
        RegistrationProcessId: string;
        ConnectorGroup: string;
        ConnectorName: string;
        ConnectorFunctionalityProfileId: string;
        RegisterInfo: string;
        CreatedDateTime: Date;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * NotificationDetail entity class.
     */
    class NotificationDetailClass implements NotificationDetail {
        ActionProperty: string;
        ItemCount: number;
        DisplayText: string;
        IsNew: boolean;
        LastUpdatedDateTimeStr: string;
        IsSuccess: boolean;
        IsLiveContentOnly: boolean;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * FiscalIntegrationDocumentContext entity class.
     */
    class FiscalIntegrationDocumentContextClass implements FiscalIntegrationDocumentContext {
        AuditEvent: Entities.AuditEvent;
        SignatureData: Entities.FiscalIntegrationSequentialSignatureData[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * FiscalIntegrationDocumentAdjustment entity class.
     */
    class FiscalIntegrationDocumentAdjustmentClass implements FiscalIntegrationDocumentAdjustment {
        TenderLineAdjustments: Entities.FiscalTransactionTenderLineAdjustment[];
        SalesLineAdjustments: Entities.FiscalTransactionSalesLineAdjustment[];
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * FiscalIntegrationSignatureDataContext entity class.
     */
    class FiscalIntegrationSignatureDataContextClass implements FiscalIntegrationSignatureDataContext {
        SequentialSignatureKey: string;
        SequentialNumber: number;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * FiscalIntegrationRegistrationProcessLine entity class.
     */
    class FiscalIntegrationRegistrationProcessLineClass implements FiscalIntegrationRegistrationProcessLine {
        RegistrationProcessId: string;
        SequenceNumber: number;
        Priority: number;
        ConnectorTypeValue: number;
        FunctionalityProfileGroupId: string;
        AllowSkip: boolean;
        AllowMarkAsRegistered: boolean;
        Optional: boolean;
        RegistrationSettings: Entities.FiscalIntegrationRegistrationSettings;
        SupportedFiscalEventTypes: number[];
        SupportedNonFiscalEventTypes: number[];
        SequentialKeys: string[];
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * FiscalIntegrationRegistrationSettings entity class.
     */
    class FiscalIntegrationRegistrationSettingsClass implements FiscalIntegrationRegistrationSettings {
        SkipReasonCode: string;
        MarkAsRegisteredReasonCode: string;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * FiscalIntegrationServiceFailureDetails entity class.
     */
    class FiscalIntegrationServiceFailureDetailsClass implements FiscalIntegrationServiceFailureDetails {
        FailureTypeValue: number;
        IsRetryAllowed: boolean;
        ErrorCode: string;
        ErrorMessage: string;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * CategoryPath entity class.
     */
    class CategoryPathClass implements CategoryPath {
        Segments: Entities.CategoryPathSegment[];
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * CategoryPathSegment entity class.
     */
    class CategoryPathSegmentClass implements CategoryPathSegment {
        CategoryName: string;
        CategoryId: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * AttachedService entity class.
     */
    class AttachedServiceClass implements AttachedService {
        BaseUrl: string;
        ServiceId: string;
        StatusValue: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * CustomerTimelineItemType entity class.
     */
    class CustomerTimelineItemTypeClass implements CustomerTimelineItemType {
        Description: string;
        TypeId: string;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ProductWarehouseInventoryAvailability entity class.
     */
    class ProductWarehouseInventoryAvailabilityClass implements ProductWarehouseInventoryAvailability {
        ProductId: number;
        InventLocationId: string;
        DataAreaId: string;
        PhysicalInventory: number;
        PhysicalReserved: number;
        TotalAvailable: number;
        TotalAvailableInventoryLevelLabel: string;
        TotalAvailableInventoryLevelCode: string;
        OrderedInTotal: number;
        PhysicalAvailable: number;
        PhysicalAvailableInventoryLevelLabel: string;
        PhysicalAvailableInventoryLevelCode: string;
        LastInventoryTransactionId: number;
        UnpostedOnlineOrderedQuantity: number;
        IsInventoryAvailabilityQuantityReturned: boolean;
        SumUncountedTransactions: number;
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ParameterSet entity class.
     */
    class ParameterSetClass implements ParameterSet {
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * CartLineValidationResults entity class.
     */
    class CartLineValidationResultsClass implements CartLineValidationResults {
        ValidationFailuresByCartLines: Entities.LineDataValidationFailure[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * CommerceException entity class.
     */
    class CommerceExceptionClass implements CommerceException {
        LocalizedMessage: string;
        ErrorResourceId: string;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * DataValidationException entity class.
     */
    class DataValidationExceptionClass extends CommerceExceptionClass implements DataValidationException {
        ValidationResults: Entities.DataValidationFailure[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * MissingRequiredReasonCodeException entity class.
     */
    class MissingRequiredReasonCodeExceptionClass extends DataValidationExceptionClass implements MissingRequiredReasonCodeException {
        RequiredReasonCodes: Entities.ReasonCode[];
        TransactionRequiredReasonCodeIds: string[];
        ReasonCodeRequirements: Entities.ReasonCodeRequirement[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * SecurityException entity class.
     */
    class SecurityExceptionClass extends CommerceExceptionClass implements SecurityException {
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * DeviceAuthenticationException entity class.
     */
    class DeviceAuthenticationExceptionClass extends SecurityExceptionClass implements DeviceAuthenticationException {
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * HeadquarterTransactionServiceException entity class.
     */
    class HeadquarterTransactionServiceExceptionClass extends CommerceExceptionClass implements HeadquarterTransactionServiceException {
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * UserAuthenticationException entity class.
     */
    class UserAuthenticationExceptionClass extends SecurityExceptionClass implements UserAuthenticationException {
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * UserAuthorizationException entity class.
     */
    class UserAuthorizationExceptionClass extends SecurityExceptionClass implements UserAuthorizationException {
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * FeatureNotSupportedException entity class.
     */
    class FeatureNotSupportedExceptionClass extends CommerceExceptionClass implements FeatureNotSupportedException {
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * CartValidationException entity class.
     */
    class CartValidationExceptionClass extends DataValidationExceptionClass implements CartValidationException {
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * TenderValidationException entity class.
     */
    class TenderValidationExceptionClass extends DataValidationExceptionClass implements TenderValidationException {
        TenderTypeId: string;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * PaymentException entity class.
     */
    class PaymentExceptionClass extends CommerceExceptionClass implements PaymentException {
        PaymentSdkErrors: Entities.PaymentError[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * CommerceDataExchangeException entity class.
     */
    class CommerceDataExchangeExceptionClass extends CommerceExceptionClass implements CommerceDataExchangeException {
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ExtensibleEnumerationException entity class.
     */
    class ExtensibleEnumerationExceptionClass extends CommerceExceptionClass implements ExtensibleEnumerationException {
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * DataValidationFailure entity class.
     */
    class DataValidationFailureClass implements DataValidationFailure {
        ErrorContext: string;
        ErrorResourceId: string;
        MemberNames: string[];
        LocalizedMessage: string;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ItemDiscontinuedException entity class.
     */
    class ItemDiscontinuedExceptionClass extends CommerceExceptionClass implements ItemDiscontinuedException {
        RemovedUnavailableItemIds: string;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * InventoryDocumentLockedByOtherTerminalException entity class.
     */
    class InventoryDocumentLockedByOtherTerminalExceptionClass extends DataValidationExceptionClass implements InventoryDocumentLockedByOtherTerminalException {
        WorkingTerminalId: string;
        CurrentTerminalId: string;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * InventoryDocumentExceedMaximumQuantityException entity class.
     */
    class InventoryDocumentExceedMaximumQuantityExceptionClass extends DataValidationExceptionClass implements InventoryDocumentExceedMaximumQuantityException {
        MaximumQuantity: number;
        AllowOverDelivery: boolean;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * CommerceRuntimeCompositionException entity class.
     */
    class CommerceRuntimeCompositionExceptionClass extends CommerceExceptionClass implements CommerceRuntimeCompositionException {
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ChecklistTaskValidationException entity class.
     */
    class ChecklistTaskValidationExceptionClass extends DataValidationExceptionClass implements ChecklistTaskValidationException {
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * InsufficientCredentialLengthException entity class.
     */
    class InsufficientCredentialLengthExceptionClass extends DataValidationExceptionClass implements InsufficientCredentialLengthException {
        ActualLength: number;
        MinLength: number;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * ExtensibleEnumerationCacheException entity class.
     */
    class ExtensibleEnumerationCacheExceptionClass extends CommerceExceptionClass implements ExtensibleEnumerationCacheException {
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * StaffPasswordExpiredException entity class.
     */
    class StaffPasswordExpiredExceptionClass extends UserAuthenticationExceptionClass implements StaffPasswordExpiredException {
        StaffId: string;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * TenderTypePolicy entity class.
     */
    class TenderTypePolicyClass implements TenderTypePolicy {
        OriginalTenderType: string;
        AllowedReturnTenderTypes: string[];
        ExtensionProperties: Entities.CommerceProperty[];
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * LineDataValidationFailure entity class.
     */
    class LineDataValidationFailureClass implements LineDataValidationFailure {
        DataValidationFailure: Entities.DataValidationFailure;
        LineIndex: number;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * WrongEndpointException entity class.
     */
    class WrongEndpointExceptionClass extends CommerceExceptionClass implements WrongEndpointException {
        RedirectUri: string;
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
    /**
     * BadRequestException entity class.
     */
    class BadRequestExceptionClass extends CommerceExceptionClass implements BadRequestException {
        /**
         * Construct an object from odata response.
         *
         * @param {any} odataObject The odata result object.
         */
        constructor(odataObject?: any);
    }
}
declare module Commerce.Proxy {
    class ObjectExtensions {
        /**
         * Verifies whether the object is null.
         * Remarks: if the object is undefined, this returns false.
         *
         * @param {any} object The object.
         * @return {boolean} True if the object is null, false otherwise.
         */
        static isNull(object: any): boolean;
        /**
         * Verifies whether the object is undefined.
         * Remarks: if the object is null, this returns false.
         *
         * @param {any} object The object.
         * @return {boolean} True if the object is undefined, false otherwise.
         */
        static isUndefined(object: any): boolean;
        /**
         * Verifies whether the object is of the given type.
         * Remarks: if the object is undefined, this returns false.
         *
         * @param {any} object The object.
         * @param {any} type The type to check against.
         * @return {boolean} True if the object is of the given type, false otherwise.
         */
        static isOfType(object: any, type: any): boolean;
        /**
         * Verifies whether the object is null or undefined.
         *
         * @param {any} object The object.
         * @return {boolean} True if the object is null or undefined, false otherwise.
         */
        static isNullOrUndefined(object: any): boolean;
        /**
         * Verifies whether the object is a function.
         *
         * @param {any} object The object.
         * @return {boolean} True if the object is a function, false otherwise.
         */
        static isFunction(object: any): boolean;
        /**
         * Verifies whether the variable is of type object.
         *
         * @param {any} variable The variable.
         * @return {boolean} True if the variable is an object, false otherwise.
         */
        static isObject(variable: any): boolean;
        /**
         * Converts the object to an observable proxy object.
         * Returns the same object that is provided as parameter.
         *
         * Every property that of the object will become an observable.
         * e.g. for an object like this:
         * obj = {
         *     simpleProperty: "a",
         *     complexProperty: {
         *         someProperty: "b"
         *     }
         * }
         *
         * we will have:
         *    obj.simpleProperty()   <- observable
         *    obj.complexProperty <- object
         *    obj.complexProperty.someProperty() <- observable
         *
         * To update an proxy use obj.update(newObjectValue).
         * This will update every observable in your obj with the values found in the newObjectValue.
         */
        static convertToObservableProxyObject(obj: any): any;
        /**
         * Converts the clone of an object to observable proxy object.
         *
         * @param {any} object The object.
         * @return {any} clone of an object to observable proxy object.
         */
        static cloneToObservableProxyObject(obj: any): any;
        /**
         * Do not use this function directly. Call update method on your proxy object.
         */
        private static updateObservableProxyObject(newValue);
        /**
         * Unwraps an proxy observable unwrapping all inner observables.
         */
        static unwrapObservableProxyObject(proxy: any): any;
        /**
         * Makes a copy of an object.
         * Alternative for jquery (does not handle arrays correctly and it will break calls with Odata):
         * jquery example call that this method replaces: <any >$.extend(true, { }, <your object to clone >);
         * @param {T} origObject The original object to clone.
         * @return {T} The cloned object.
         */
        static clone<T>(origObject: T): T;
        private static safeClone(origObject, cloneMap);
        /**
         * Help execute async calls in a sequence.
         *
         * @param {any[]} array The elements array.
         * @param {(entity, () => void) => void)} iterator Async iterator callback.
         * @param {any} [then] Success callback.
         */
        static forEachAsync(array: any[], iterator: any, then?: any): void;
        /**
         * Creates a grouped array from a given array based on key.
         *
         * @param {any[]} array The elements array.
         * @param {(any) => any} keySelector The key selector function.
         * @return {any[]} The grouped array.
         */
        static groupBy(inputArray: any[], keySelector: (any) => any): any[];
    }
}
import TsLogging = Microsoft.Dynamics.Diagnostics.TypeScriptCore;
declare module Commerce.Proxy {
    /**
     * Attaches the logging sink to the LoggerBase.
     *
     * @method attachLoggingSink
     * @param sink {TsLogging.ILoggingSink} Sink to attach to Retail Logger.
     */
    function attachLoggingSink(sink: TsLogging.ILoggingSink): void;
    /**
     * Class represents proxy events.
     * Event Code Range: 44000 - 44999.
     */
    class RetailLogger {
        static LogEvent(eventName: Function, error?: string): void;
        static genericError(message: string): void;
        static genericWarning(message: string): void;
        static genericInfo(message: string): void;
        static modelManagersRetailServerRequestStarted(requestId: string, requestUrl: string): void;
        static modelManagersRetailServerRequestError(requestId: string, requestUrl: string, error: string): void;
        static modelManagersRetailServerRequestFinished(requestId: string, requestUrl: string): void;
        static initEntitySetInvalidError(entitySetId: string): void;
        static initEntitySetMultipleTimesError(entitySetId: string): void;
        static initEntitySetNoMethodNumberError(): void;
        static initPaymentEntitySetInvalidError(entitySetId: string): void;
        static initPaymentEntitySetMultipleTimesError(entitySetId: string): void;
        static initPaymentEntitySetNoMethodNumberError(): void;
        static shoppingCartServiceGetShoppingCartStarted(): void;
        static shoppingCartServiceGetShoppingCartError(error: string): void;
        static shoppingCartServiceGetShoppingCartFinished(): void;
        static shoppingCartServiceRemoveFromCartStarted(): void;
        static shoppingCartServiceRemoveFromCartError(error: string): void;
        static shoppingCartServiceRemoveFromCartFinished(): void;
        static shoppingCartApplyPromotionCodeStarted(): void;
        static shoppingCartApplyPromotionCodeError(error: string): void;
        static shoppingCartApplyPromotionCodeFinished(): void;
        static shoppingCartUpdateQuantityStarted(): void;
        static shoppingCartUpdateQuantityError(error: string): void;
        static shoppingCartUpdateQuantityFinished(): void;
        static shoppingCartRemovePromotionCodeStarted(): void;
        static shoppingCartRemovePromotionCodeError(error: string): void;
        static shoppingCartRemovePromotionCodeFinished(): void;
        static shoppingCartUpdateLoyaltyCardIdStarted(): void;
        static shoppingCartUpdateLoyaltyCardIdError(error: string): void;
        static shoppingCartUpdateLoyaltyCardIdFinished(): void;
        static shoppingCartCommenceCheckoutStarted(): void;
        static shoppingCartCommenceCheckoutError(error: string): void;
        static shoppingCartCommenceCheckoutFinished(): void;
        static shoppingCartGetPromotionsStarted(): void;
        static shoppingCartGetPromotionsError(error: string): void;
        static shoppingCartGetPromotionsFinished(): void;
        static getSimpleProductsByIdStarted(): void;
        static getSimpleProductsByIdError(error: string): void;
        static getSimpleProductsByIdFinished(): void;
        static getKitComponentsError(): void;
        static searchProductsByProductIdsStarted(): void;
        static searchProductsByProductIdsError(error: string): void;
        static searchProductsByProductIdsFinished(): void;
        static checkoutCartPrepare3DSRedirect(redirectUri: string): void;
        static checkoutCartAdd3DSRedirectPropertyToFormPost(propertyName: string): void;
        static checkoutCartBegin3DSFormSubmit(): void;
        static checkoutCartEnd3DSFormSubmit(): void;
        static checkoutServiceGetAllDeliveryOptionDescriptionsStarted(): void;
        static checkoutServiceGetAllDeliveryOptionDescriptionsError(error: string): void;
        static checkoutServiceGetAllDeliveryOptionDescriptionsFinished(): void;
        static checkoutServiceGetDeliveryPreferencesStarted(): void;
        static checkoutServiceGetDeliveryPreferencesError(error: string): void;
        static checkoutServiceGetDeliveryPreferencesFinished(): void;
        static checkoutServiceGetOrderDeliveryOptionsStarted(): void;
        static checkoutServiceGetOrderDeliveryOptionsError(error: string): void;
        static checkoutServiceGetOrderDeliveryOptionsFinished(): void;
        static checkoutServiceGetItemDeliveryOptionsStarted(): void;
        static checkoutServiceGetItemDeliveryOptionsError(error: string): void;
        static checkoutServiceGetItemDeliveryOptionsFinished(): void;
        static checkoutServiceUpdateDeliverySpecificationsStarted(): void;
        static checkoutServiceUpdateDeliverySpecificationsError(error: string): void;
        static checkoutServiceUpdateDeliverySpecificationsFinished(): void;
        static checkoutServiceUpdateLineDeliverySpecificationsStarted(): void;
        static checkoutServiceUpdateLineDeliverySpecificationsError(error: string): void;
        static checkoutServiceUpdateLineDeliverySpecificationsFinished(): void;
        static checkoutServiceGetPaymentCardTypesStarted(): void;
        static checkoutServiceGetPaymentCardTypesError(error: string): void;
        static checkoutServiceGetPaymentCardTypesFinished(): void;
        static checkoutServiceGetGiftCardBalanceStarted(): void;
        static checkoutServiceGetGiftCardBalanceError(error: string): void;
        static checkoutServiceGetGiftCardBalanceFinished(): void;
        static checkoutServiceSubmitOrderStarted(): void;
        static checkoutServiceSubmitOrderError(error: string): void;
        static checkoutServiceSubmitOrderFinished(): void;
        static checkoutServiceGetCardPaymentAcceptUrlStarted(): void;
        static checkoutServiceGetCardPaymentAcceptUrlFinished(): void;
        static checkoutServiceGetCardPaymentAcceptUrlError(error: string): void;
        static checkoutServiceRetrieveCardPaymentAcceptResultStarted(): void;
        static checkoutServiceRetrieveCardPaymentAcceptResultFinished(): void;
        static checkoutServiceRetrieveCardPaymentAcceptResultError(error: string): void;
        static checkoutServiceCleanUpAfterSuccessfulOrderStarted(): void;
        static checkoutServiceCleanUpAfterSuccessfulOrderError(error: string): void;
        static checkoutServiceCleanUpAfterSuccessfulOrderFinished(): void;
        static channelServiceGetChannelConfigurationStarted(): void;
        static channelServiceGetChannelConfigurationError(error: string): void;
        static channelServiceGetChannelConfigurationFinished(): void;
        static channelServiceGetCountryRegionInfoStarted(): void;
        static channelServiceGetCountryRegionInfoError(error: string): void;
        static channelServiceGetCountryRegionInfoFinished(): void;
        static channelServiceGetStateProvinceInfoStarted(): void;
        static channelServiceGetStateProvinceInfoError(error: string): void;
        static channelServiceGetStateProvinceInfoFinished(): void;
        static channelServiceGetTenderTypesStarted(): void;
        static channelServiceGetTenderTypesError(error: string): void;
        static channelServiceGetTenderTypesFinished(): void;
        static channelServiceGetCardTypesStarted(): void;
        static channelServiceGetCardTypesError(error: string): void;
        static channelServiceGetCardTypesFinished(): void;
        static storeProductAvailabilityServiceGetNearbyStoresWithAvailabilityStarted(): void;
        static storeProductAvailabilityServiceGetNearbyStoresWithAvailabilityError(error: string): void;
        static storeProductAvailabilityServiceGetNearbyStoresWithAvailabilityFinished(): void;
        static storeProductAvailabilityServiceGetNearbyStoresStarted(): void;
        static storeProductAvailabilityServiceGetNearbyStoresError(error: string): void;
        static storeProductAvailabilityServiceGetNearbyStoresFinished(): void;
        static loyaltyServiceGetLoyaltyCardsStarted(): void;
        static loyaltyServiceGetLoyaltyCardsError(error: string): void;
        static loyaltyServiceGetLoyaltyCardsFinished(): void;
        static loyaltyServiceUpdateLoyaltyCardIdStarted(): void;
        static loyaltyServiceUpdateLoyaltyCardIdError(error: string): void;
        static loyaltyServiceUpdateLoyaltyCardIdFinished(): void;
        static customerServiceGetCustomerStarted(): void;
        static customerServiceGetCustomerError(error: string): void;
        static customerServiceGetCustomerFinished(): void;
        static customerServiceIsAuthenticationSessionStarted(): void;
        static customerServiceIsAuthenticationSessionError(error: string): void;
        static customerServiceIsAuthenticationSessionFinished(): void;
        static getOrderHistoryStarted(): void;
        static getOrderHistoryError(error: string): void;
        static getOrderHistoryFinished(): void;
        static getOrderDetailsStarted(): void;
        static getOrderDetailsError(error: string): void;
        static getOrderDetailsFinished(): void;
        static createWishListStarted(): void;
        static createWishListError(error: string): void;
        static createWishListFinished(): void;
        static deleteWishListStarted(): void;
        static deleteWishListError(error: string): void;
        static deleteWishListFinished(): void;
        static updateWishListStarted(): void;
        static updateWishListError(error: string): void;
        static updateWishListFinished(): void;
        static getWishListsStarted(): void;
        static getWishListsError(error: string): void;
        static getWishListsFinished(): void;
        static getWishListStarted(): void;
        static getWishListError(error: string): void;
        static getWishListFinished(): void;
        static addLinesToWishListStarted(): void;
        static addLinesToWishListError(error: string): void;
        static addLinesToWishListFinished(): void;
        static removeItemsFromWishListStarted(): void;
        static removeItemsFromWishListError(error: string): void;
        static removeItemsFromWishListFinished(): void;
        static updateLinesOnWishListStarted(): void;
        static updateLinesOnWishListError(error: string): void;
        static updateLinesOnWishListFinished(): void;
        static addItemsToCartStarted(): void;
        static addItemsToCartError(error: string): void;
        static addItemsToCartFinished(): void;
    }
}
declare module Commerce.Proxy {
    /**
    * The tracer class allows information to be logged on the device for Information, Warning or Error
    * The same method call can be used for each type
    * Example:
    *         Commerce.Proxy.Tracer.Information("Message {0} {1}", ["Arg1", "Arg2"]);     // With parameters to be formatted
    *         Commerce.Proxy.Tracer.Information("Message");                               // Without parameters
    *
    * Example of different tracer logs
    *   Dynamics-Information: <<Formatted message>> <<number of milliseconds since 1970/01/01>>
    *   Dynamics-Warning: <<Formatted message>> <<number of milliseconds since 1970/01/01>>
    *   Dynamics-Error: <<Formatted message>> <<number of milliseconds since 1970/01/01>>
    */
    class Tracer {
        private static TracerDynamics;
        private static TracerDynamicsInformation;
        private static TracerDynamicsWarning;
        private static TracerDynamicsError;
        private static TracerDynamicsException;
        private static TracingOn;
        private static Counters;
        private static Timers;
        private static init();
        private static _initialized;
        /**
        * Traces an informational message in the specified format.
        */
        static Information(format: string, ...args: any[]): void;
        /**
        * Traces a warning message in the specified format.
        */
        static Warning(format: string, ...args: any[]): void;
        /**
        * Traces an error message in the specified format.
        */
        static Error(format: string, ...args: any[]): void;
        /**
        * Traces an error message in the specified format.
        */
        static Errors(errors: ProxyError[], format: string, ...args: any[]): void;
        static StartCounter(uniqueFunctionName: string): void;
        static EndCounter(uniqueFunctionName: string): void;
        static DumpCounters(): void;
        private static GetMessage(type, format, ...args);
    }
}
declare module Commerce.Proxy {
    class StringExtensions {
        static EMPTY: string;
        /**
         * Verifies whether the string is empty, but not null.
         *
         * @param {string} object The object.
         * @return {boolean} True if the object is empty, false otherwise.
         */
        static isEmpty(object: string): boolean;
        /**
         * Verifies whether the string is empty or whitespace, but not null.
         *
         * @param {string} object The object.
         * @return {boolean} True if the object is empty or whitespace, false otherwise.
         */
        static isEmptyOrWhitespace(object: string): boolean;
        /**
         * Verifies whether the string is null or whitespace.
         *
         * @param {string} object The object.
         * @return {boolean} True if the object is null or whitespace, false otherwise.
         */
        static isNullOrWhitespace(object: string): boolean;
        /**
         * Pad left with padString until the required length is reached.
         */
        static padLeft(object: string, padString: string, length: number): string;
        /**
         * Pad right with padString until the required length is reached.
         */
        static padRight(object: string, padString: string, length: number): string;
        /**
         * Basic C# like string format function.
         */
        static format(object: string, ...params: any[]): string;
        /**
         * Returns an ordinal to indicate the ordering of the strings
         * -1: This object is less than comparison object
         * 0: This object is equal to the comparison object
         * 1: This object is greater than the comparison object
         */
        static compare(object: string, comparisonObject: string, ignoreCase?: boolean): number;
        /**
         * Replaces new line character with <br /> for display.
         */
        static replaceNewLineWithBr(text: string): any;
        /**
         * Replaces all instances of @txtToReplace
         */
        static replaceAll(txt: any, txtToReplace: any, valueToReplaceWith: any): any;
        /**
         * Escapes single quote to be send as part of URLs.
         */
        static escapeSingleQuote(text: string): string;
        /**
         * Removes the trailing slashes from the URI.
         *
         * @param {string} uri The URI to clean.
         * @return {string} The uri without trailing slashes.
         */
        static CleanUri(uri: string): string;
        /**
        * Determines whether the end of string matches a specified string.
        *
        * @param {string} str: The string to search in.
        * @param {string} suffix: The string to compare to the substring at the end of str.
        * @param {boolean} caseSensitive: Determines if the comparison case sensitive (false, by default)
        * @return {boolean} true if suffix matches the end of str; otherwise, false.
        */
        static endsWith(str: string, suffix: string, caseSensitive?: boolean): boolean;
    }
}
declare module Commerce.Proxy.Common {
    /**
     * Interface for data service request factory
     */
    interface IDataServiceRequestFactory {
        /**
         * Locale for the current data service request factory.
         */
        locale: string;
        /**
         * Create a request.
         * @param {IDataServiceQueryInternal} dataServiceQuery The data service query.
         * @return {IDataServiceRequest} The data service request.
         */
        create(dataServiceQuery: IDataServiceQueryInternal): IDataServiceRequest;
    }
}
declare module Commerce.Proxy.Common {
    /**
     * Interface for data service request.
     */
    interface IDataServiceRequest {
        /**
         * Locale for the current data service request.
         */
        locale: string;
        /**
         * Request Identifier.
         * Autogenerated unique identifier if executed in batch. Used to fetch the response from batch result array.
         */
        id(): number;
        /**
         * Execute the request.
         * @param {any} callerContext The caller context.
         * @return {IAsyncResult<T>} The async result.
         */
        execute<T>(callerContext: any): IAsyncResult<T>;
        /**
         * Executes the batch requests.
         * @param {IDataServiceRequest[]} requests The collection of requests to execute.
         * @param {any} [callerContext] The caller context.
         * @return {IAsyncResult<Array>} The async result.  Responses at index I correlates to request with identifier I.
         */
        executeBatch(requests: IDataServiceRequest[], callerContext?: any): IAsyncResult<any[]>;
    }
}
declare module Commerce.Proxy.Common {
    /**
     * Represents a data service query object.
     */
    class DataServiceQuery<T> {
        private static AUTHENTICATION_TOKEN_NAME;
        private static AUTHENTICATION_TOKEN_FORMAT;
        private _query;
        private _dataServiceRequestFactory;
        /**
         * Creates a new instance of DataServiceQuery<T>.
         * @param {IDataServiceRequestFactory} dataServiceRequestFactory The data service request factory.
         * @param {string} [entitySet] The entity set name.
         * @param {string} [entityType] The entity type name.
         * @param {any} [returntype] The return type of query.
         * @param {any} [key] Entity key.
         */
        constructor(dataServiceRequestFactory: IDataServiceRequestFactory, entitySet?: string, entityType?: string, returnType?: any, key?: any);
        /**
         * Query result settings.
         *
         * @param {string} value The value of query result settings.
         */
        resultSettings(value: Entities.QueryResultSettings): DataServiceQuery<T>;
        /**
         * Filter Clause.
         * @param {string} value The filter value.
         */
        filter(value: string): DataServiceQuery<T>;
        /**
         * Top clause
         * @param {string} value The number of top rows to select.
         */
        top(value: number): DataServiceQuery<T>;
        /**
         * Skip clause
         * @param {string} value The number of rows to skip
         */
        skip(value: number): DataServiceQuery<T>;
        /**
         * Expand clause
         * @param {string} propertyName The property name to expand.
         */
        expand(propertyName: string): DataServiceQuery<T>;
        /**
         * Request number of total row available.
         */
        inlineCount(): DataServiceQuery<T>;
        /**
         * Order by clause.
         * @param {string} value The field name for ordering.
         */
        orderBy(value: string): DataServiceQuery<T>;
        /**
         * Transforms the request into a create request.
         * @param {string} object The object.
         * @return {IDataServiceRequest} The data service request.
         */
        create(object: any): IDataServiceRequest;
        /**
         * Transforms the request into a read request.
         * @return {IDataServiceRequest} The data service request.
         */
        read(): IDataServiceRequest;
        /**
         * Transforms the request into an update request.
         * @param {string} object The object.
         * @return {IDataServiceRequest} The data service request.
         */
        update(object: any): IDataServiceRequest;
        /**
         * Transforms the request into a delete request.
         * @return {DataServiceRequest} The data service request.
         */
        delete(): IDataServiceRequest;
        setGetAllRecords(): void;
        isGetAllRecords(): boolean;
        createDataServiceRequestForOperation(operationName: string, isAction: boolean, returnType: any, isReturnTypeACollection: string, data?: ODataOperationParameters): IDataServiceRequest;
        private _createRequest();
    }
    /**
     * Represents collection of OData action or function parameters.
     */
    class ODataOperationParameters {
        parameters: any;
    }
    /**
     * Represents a data service query object for internal paramater from DataServiceQuery to DataServiceRequest.
     */
    interface IDataServiceQueryInternal {
        entitySet: string;
        entityType: string;
        key: any;
        action?: string;
        isAction?: boolean;
        data?: any;
        returnType: any;
        isReturnTypeACollection?: boolean;
        resultSettings?: Entities.QueryResultSettings;
        filterSettings?: string;
        expands?: string[];
        inlineCount?: boolean;
        tokens: {
            [tokenName: string]: string;
        };
    }
}
declare module Commerce.Proxy {
    /**
     * Class for representing an error.
     */
    class ProxyError {
        private _errorCode;
        private _errorMessage;
        private _localizedErrorMessage;
        private _canRetry;
        private _commerceException;
        private _formatData;
        private _extraData;
        constructor(errorCode: string, errorMessage: string, localizedErrorMessage?: string, canRetry?: boolean, extraData?: any, ...formatData: any[]);
        /**
         * Gets the commerce exception that caused this error.
         *
         * @return {any} The commerce exception.
         */
        /**
         * Sets the commerce exception that caused this error.
         *
         * @param {any} exception The commerce exception.
         */
        commerceException: any;
        /**
         * Gets the error code.
         *
         * @return {string} The error code.
         */
        readonly ErrorCode: string;
        /**
         * Gets the error message.
         *
         * @return {string} The error message.
         */
        readonly ErrorMessage: string;
        /**
         * Gets the localized error message.
         *
         * @return {string} The localized error message.
         */
        readonly LocalizedErrorMessage: string;
        /**
         * Gets the format data used on formatted error messages.
         *
         * @return {any[]} The format data.
         */
        readonly formatData: any[];
        /**
         * Gets the additional information the might be supplied by the error.
         *
         * @return {any} The extra data.
         */
        readonly extraData: any;
        /**
         * Gets the error title. Defaults to the resource string string_29004 for the error title if
         * no error title is mapped for the error.
         */
        readonly ErrorTitleResourceId: string;
        /**
         * Gets whether the action that generated the error can be retried.
         *
         * @return {string} Whether the action that generated the error can be retried.
         */
        readonly CanRetry: boolean;
    }
}
declare module Commerce.Proxy {
    /**
     * Helper class for function queue management.
     */
    class FunctionQueueHelper {
        /**
         * Call all the functions on the queue with optional data and clears the queue.
         *
         * @param {Function[]} functionQueue The queue of functions to be called.
         * @param {any} callerContext The caller context for the callback.
         * @param {any} [data] Optional parameter to be passed as the function argument.
         */
        static callFunctions(functionQueue: Function[], callerContext: any, data?: any): void;
        /**
         * Queues a function to be called later.
         *
         * @param {Function[]} functionQueue The queue of functions to be called.
         * @param {Function} callback The function to be queued.
         */
        static queueFunction(functionQueue: Function[], callback: Function): void;
    }
}
declare module Commerce.Proxy {
    /**
     * Provides a simple generic implementation for IAsyncResult interface.
     */
    class AsyncResult<T> implements IAsyncResult<T> {
        private _result;
        private _errors;
        private _succeded;
        private _failed;
        private _callerContext;
        private _successCallbacks;
        private _errorCallbacks;
        /**
         * Creates a new instance of AsyncResult<T> class.
         *
         * @param {any} callerContext The caller context for the done and fail callbacks.
         */
        constructor(callerContext?: any);
        /**
         * Clears the async result.
         */
        clear(): void;
        /**
         * Resolves the async call with the given result.
         *
         * @param {T} result The result of the async callback.
         */
        resolve(result: T): void;
        /**
         * Rejects the async call with the given error.
         *
         * @param {ProxyError[]} errors The error collection for the async callback.
         */
        reject(errors: ProxyError[]): void;
        /**
         * Resolves or rejects the async call with result from given async result.
         *
         * @param {IAsyncResult<T>} asyncResult The async callback.
         */
        resolveOrRejectOn(asyncResult: IAsyncResult<T>): void;
        /**
         * This function should be called when an async call succeeds.
         *
         * @param {(result: T) => void} callback The callback function.
         */
        done(callback: (result: T) => void): IAsyncResult<T>;
        /**
         * This function should be called when an error happens on an async call.
         *
         * @param {(error: ProxyError[]) => void} error The error callback function.
         */
        fail(callback: (errors: ProxyError[]) => void): IAsyncResult<T>;
        /**
         * Calls a defined callback function on the result element, and returns a new async result with the mapped result.
         *
         * @param {(value: T) => U} mapFunction The function used to map the async result result from IAsyncResult<T> to IAsyncResult<U>.
         * @return {IAsyncResult<U>} The mapped async result.
         */
        map<U>(mapFunction: (value: T) => U): IAsyncResult<U>;
        /**
         * Creates a resolved AsyncResult with an optional result.
         *
         * @param {T} [result] The optional result to resolve the AsyncResult with.
         * @return {AsyncResult<T>} The resolved async result.
         */
        static createResolved<T>(result?: T): AsyncResult<T>;
        /**
         * Creates an rejected AsyncResult with an optional error collection.
         *
         * @param {T} [result] The optional result to resolve the AsyncResult with.
         * @return {AsyncResult<T>} The resolved async result.
         */
        static createRejected<T>(errors?: ProxyError[]): AsyncResult<T>;
        /**
         * Creates a async result that resolves or rejects when all of the given async results are finished, i.e. when they either resolve or reject.
         *
         * @param {IAsyncResult<T>[]} asyncResults The list of async results to join.
         * @return {IVoidAsyncResult} The async result that rejects or resolves only when all underlying async results finish executing.
         */
        static join<T>(asyncResults: IAsyncResult<T>[]): IVoidAsyncResult;
    }
    /**
     * Represents a null result.
     */
    interface NullResult {
    }
    /**
     * Provides a simple generic implementation for IVoidAsyncResult interface.
     */
    class VoidAsyncResult extends AsyncResult<NullResult> implements IVoidAsyncResult {
        /**
         * Creates a new instance of AsyncResult<T> class.
         *
         * @param {any} callerContext The caller context for the done and fail callbacks.
         */
        constructor(callerContext?: any);
        /**
         * Resolves the async call.
         */
        resolve(): void;
        /**
         * This function should be called when an async call succeeds.
         *
         * @param {(result: T) => void} callback The callback function.
         */
        done(callback: () => void): IVoidAsyncResult;
        /**
         * Calls a defined callback function and returns a new async result with the mapped result.
         *
         * @param {() => U} mapFunction The function used to map the async result result from IAsyncResult<T> to IAsyncResult<U>.
         * @return {IAsyncResult<U>} The mapped async result.
         */
        map<U>(mapFunction: () => U): IAsyncResult<U>;
    }
    /**
     * Provides a way to queue up async/sync calls.
     * The queue only executes when the run function is called.
     */
    class AsyncQueue {
        private _asyncQueue;
        private _asyncResult;
        private _canceled;
        /**
         * Creates an empty queue.
         */
        constructor();
        /**
         * Queues the async call to be executed when accessing the result.
         *
         * @param {() => IAsyncResult<T>} asyncCall The async call to enqueue.
         * @return {AsyncQueue} A reference to the async queue for chaining.
         * @remarks The async call will not be queued if it null or undefined and/or if the async queue is already running.
         *          Async calls that do not return and IAsyncResult object are considered synchronous calls.
         */
        enqueue<T>(asyncCall: () => IAsyncResult<T>): AsyncQueue;
        /**
         * Cancels the queue if the async result was canceled, i.e. the result is true.
         *
         * @param {IAsyncResult<T>} result The async result containing the value of whether it was canceled or not.
         * @return {IAsyncResult<T>} The async result passed as argument, for chaining.
         */
        cancelOn<T extends ICancelableResult>(result: IAsyncResult<T>): IAsyncResult<T>;
        /**
         * Cancels queue execution and resolves the async result with a value indicating the queue was canceled.
         */
        cancel(): void;
        /**
         * Runs the queue and return the async result with whether or not the queue was canceled.
         *
         * @return {IAsyncResult<ICancelableResult>} The async result with whether or not the queue was canceled.
         * @remarks Calling this function multiple times only makes this queue run once.
         */
        run(): IAsyncResult<ICancelableResult>;
    }
    /**
     * Encapsulates a worker queue that process async requests sequentially.
     */
    class AsyncWorkerQueue {
        private _workerQueue;
        private _processing;
        constructor();
        /**
         * Queues the async call to be executed.
         *
         * @param {() => IAsyncResult<T>} asyncCall The async call to enqueue.
         * @return {IAsyncResult<T>} The async result.
         */
        enqueue<T>(asyncCall: () => IAsyncResult<T>): IAsyncResult<T>;
        /**
         * Processes the queue.
         */
        private processQueue();
    }
}
declare module Commerce.Proxy {
    import IDataServiceRequestFactory = Common.IDataServiceRequestFactory;
    import IDataServiceRequest = Common.IDataServiceRequest;
    import DataServiceQuery = Common.DataServiceQuery;
    class CommerceContext {
        private _dataServiceRequestFactory;
        constructor(dataServiceRequestFactory: IDataServiceRequestFactory);
        /**
         * The matched retail server api version.
         */
        static ApiVersion: string;
        /**
         * The indicator for not logging the transaction in database.
         */
        static DoNotLogTransactionId: string;
        dataServiceRequestFactory: IDataServiceRequestFactory;
        storeOperations(): StoreOperationsDataServiceQuery;
        categories(recordId?: number): CategoriesDataServiceQuery;
        carts(id?: string): CartsDataServiceQuery;
        customers(accountNumber?: string): CustomersDataServiceQuery;
        employees(staffId?: string): EmployeesDataServiceQuery;
        checklists(recordId?: number): ChecklistsDataServiceQuery;
        salesOrders(id?: string): SalesOrdersDataServiceQuery;
        shifts(shiftId?: number, terminalId?: string): ShiftsDataServiceQuery;
        stockCountJournals(journalId?: string): StockCountJournalsDataServiceQuery;
        orgUnits(orgUnitNumber?: string): OrgUnitsDataServiceQuery;
        products(recordId?: number): ProductsDataServiceQuery;
        catalogs(recordId?: number): CatalogsDataServiceQuery;
        commerceLists(id?: number): CommerceListsDataServiceQuery;
        productLists(id?: string): ProductListsDataServiceQuery;
        recommendations(id?: string): RecommendationsDataServiceQuery;
        transferOrders(orderId?: string): TransferOrdersDataServiceQuery;
        purchaseOrders(orderId?: string): PurchaseOrdersDataServiceQuery;
        pickingLists(orderId?: string): PickingListsDataServiceQuery;
        warehouses(inventLocation?: string): WarehousesDataServiceQuery;
        scanResults(scannedText?: string): DataServiceQuery<Entities.ScanResult>;
        applicableOperations(id?: string): ApplicableOperationsDataServiceQuery;
        inventoryInboundOutboundDocuments(workDocumentId?: string): InventoryInboundOutboundDocumentsDataServiceQuery;
        businessPartners(businessPartnerId?: string): BusinessPartnersDataServiceQuery;
        businessPartnerUsers(email?: string): DataServiceQuery<Entities.BusinessPartnerUser>;
        suspendedCarts(id?: string): SuspendedCartsDataServiceQuery;
    }
    class StoreOperationsDataServiceQuery extends DataServiceQuery<any> {
        constructor(dataServiceRequestFactory: IDataServiceRequestFactory);
        roundAmountByTenderType(amount: number, tenderTypeId: string): IDataServiceRequest;
        voidSuspendedTransactions(suspendedCartIds: string[], shiftId: number, shiftTerminalId: string, reasonCodeLines: Entities.ReasonCodeLine[]): IDataServiceRequest;
        getMerchantPropertiesByServiceAccountId(serviceAccountIds: string[]): IDataServiceRequest;
        getStoreSafes(): IDataServiceRequest;
        getShiftReconciliationLines(shiftReconciliationLineRetrievalCriteria: Entities.ShiftReconciliationLineRetrievalCriteria): IDataServiceRequest;
        reconcileLines(shiftReconciliationLines: Entities.ShiftReconciliationLine[], Description: string): IDataServiceRequest;
        undoReconciliation(shiftReconciliationLines: Entities.ShiftReconciliationLine[]): IDataServiceRequest;
        getReceiptMasks(receiptTransactionType: number): IDataServiceRequest;
        getSearchSuggestions(searchSuggestionCriteria: Entities.SearchSuggestionCriteria): IDataServiceRequest;
        startSession(transactionId: string): IDataServiceRequest;
        endSession(transactionId: string): IDataServiceRequest;
        activateDevice(deviceNumber: string, terminalId: string, deviceId: string, forceActivate: boolean, deviceType: number): IDataServiceRequest;
        massActivateDevice(deviceNumber: string, terminalId: string, deviceId: string, deviceType: number): IDataServiceRequest;
        deactivateDevice(transactionId: string): IDataServiceRequest;
        createHardwareStationToken(): IDataServiceRequest;
        validateHardwareStationToken(deviceNumber: string, hardwareStationToken: string): IDataServiceRequest;
        getBarcodeById(barcodeId: string): IDataServiceRequest;
        getButtonGridById(buttonGridId: string): IDataServiceRequest;
        getButtonGridsByIds(getButtonGridsByIdsCriteria: Entities.GetButtonGridsByIdsCriteria): IDataServiceRequest;
        getCardTypes(): IDataServiceRequest;
        resolveCardTypes(cardNumberPrefix: string, cardType: number): IDataServiceRequest;
        getSupportedPaymentCardTypes(): IDataServiceRequest;
        getCities(countryRegionId: string, stateProvinceId: string, countyId: string): IDataServiceRequest;
        getCountryRegionsForShipping(): IDataServiceRequest;
        getCountryRegionsByLanguageId(languageId: string): IDataServiceRequest;
        getCounties(countryRegionId: string, stateProvinceId: string): IDataServiceRequest;
        getCreditMemoById(creditMemoId: string): IDataServiceRequest;
        getDownloadInterval(dataStoreName: string): IDataServiceRequest;
        getTerminalDataStoreName(terminalId: string): IDataServiceRequest;
        getDownloadLink(dataStoreName: string, downloadSessionId: number): IDataServiceRequest;
        getDataDownloadParametersByTerminal(TerminalDataDownloadRequestInfo: Entities.TerminalDataDownloadRequestInfo): IDataServiceRequest;
        getDataUploadParametersByTerminal(TerminalDataUploadRequestInfo: Entities.TerminalDataUploadRequestInfo): IDataServiceRequest;
        getDownloadSessions(dataStoreName: string): IDataServiceRequest;
        getInitialDownloadSessions(dataStoreName: string): IDataServiceRequest;
        getUploadJobDefinitions(dataStoreName: string): IDataServiceRequest;
        getUploadInterval(dataStoreName: string): IDataServiceRequest;
        postOfflineTransactions(offlineTransactionForMPOS: string[]): IDataServiceRequest;
        getRetailTrialPlanOffer(): IDataServiceRequest;
        getLatestNumberSequence(): IDataServiceRequest;
        getReceiptNumberResetInfo(): IDataServiceRequest;
        getLoyaltyRewardPointActivityTimeline(cardNumber: string, rewardPointId: string): IDataServiceRequest;
        getLoyaltyRewardPointActivityTimelineForExpiredPoints(cardNumber: string, rewardPointId: string): IDataServiceRequest;
        calculateTotalCurrencyAmount(currenciesAmount: Entities.CurrencyRequest[]): IDataServiceRequest;
        getDiscountCode(discountCode: string): IDataServiceRequest;
        getDiscountCodesByOfferId(offerId: string): IDataServiceRequest;
        getDiscountCodesByKeyword(keyword: string, activeDate: Date): IDataServiceRequest;
        getDistricts(countryRegionId: string, stateProvinceId: string, countyId: string, cityName: string): IDataServiceRequest;
        getHardwareStationProfiles(): IDataServiceRequest;
        getHardwareProfileById(hardwareProfileId: string): IDataServiceRequest;
        getLocalizedStrings(languageId: string, textId: number): IDataServiceRequest;
        getOperationPermissionById(operationId: number): IDataServiceRequest;
        getReasonCodesById(reasonCodeGroupId: string): IDataServiceRequest;
        searchReportDataSet(reportId: string, parameters: Entities.CommerceProperty[]): IDataServiceRequest;
        getReportDataSetById(reportId: string): IDataServiceRequest;
        getSrsReportDataSet(reportId: string, parameters: Entities.CommerceProperty[]): IDataServiceRequest;
        getIncomeExpenseAccounts(incomeExpenseAccountType: number): IDataServiceRequest;
        getStateProvinces(countryRegionId: string): IDataServiceRequest;
        getZipCodes(countryRegionId: string, stateProvinceId: string, countyId: string, cityName: string, district: string): IDataServiceRequest;
        getAddressFromZipCode(countryRegionId: string, zipPostalCode: string): IDataServiceRequest;
        disassembleKitTransactions(kitTransaction: Entities.KitTransaction): IDataServiceRequest;
        issueLoyaltyCard(loyaltyCard: Entities.LoyaltyCard): IDataServiceRequest;
        getLoyaltyCard(cardNumber: string): IDataServiceRequest;
        getCustomerLoyaltyCards(accountNumber: string): IDataServiceRequest;
        getLoyaltyCardTransactions(cardNumber: string, rewardPointId: string): IDataServiceRequest;
        getLoyaltyRewardPointsExpiringSoon(cardNumber: string, rewardPointId: string, daysToExpiry: number): IDataServiceRequest;
        searchJournalTransactions(searchCriteria: Entities.TransactionSearchCriteria): IDataServiceRequest;
        getGiftCard(giftCardId: string, tenderTypeId: string, pin: string, expirationMonth: number, expirationYear: number): IDataServiceRequest;
        getGiftCardInquiry(giftCardId: string): IDataServiceRequest;
        getNonSalesTransactions(shiftId: string, shiftTerminalId: string, nonSalesTenderTypeValue: number): IDataServiceRequest;
        createNonSalesTransaction(nonSalesTransaction: Entities.NonSalesTransaction): IDataServiceRequest;
        createDropAndDeclareTransaction(dropAndDeclareTransaction: Entities.DropAndDeclareTransaction): IDataServiceRequest;
        getTaxOverrides(overrideBy: string): IDataServiceRequest;
        getCustomerBalance(accountNumber: string, invoiceAccountNumber: string): IDataServiceRequest;
        initiateLinkToExistingCustomer(email: string, ActivationToken: string, emailTemplateId: string, emailProperties: Entities.NameValuePair[]): IDataServiceRequest;
        finalizeLinkToExistingCustomer(email: string, ActivationToken: string): IDataServiceRequest;
        unlinkFromExistingCustomer(): IDataServiceRequest;
        getOfflineSyncStatus(): IDataServiceRequest;
        getOfflinePendingTransactionCount(): IDataServiceRequest;
        getOfflinePendingTransactionCountByShift(shiftId: number, shiftTerminalId: string): IDataServiceRequest;
        updateDownloadSession(downloadSession: Entities.DownloadSession): IDataServiceRequest;
        updateApplicationVersion(appVersion: string): IDataServiceRequest;
        getStorageAccessTokenForUpload(): IDataServiceRequest;
        getBusinessProcessModelLibraries(): IDataServiceRequest;
        getBusinessProcessModelLibrary(businessProcessModelFrameworkLineId: number, hierarchyDepth: number): IDataServiceRequest;
        searchTaskGuidesByTitle(businessProcessModelFrameworkLineId: number, taskGuideSearchText: string, queryTypeValue: number): IDataServiceRequest;
        generateBusinessProcessModelPackage(taskRecording: Entities.Recording): IDataServiceRequest;
        downloadRecording(businessProcessModelLineId: number): IDataServiceRequest;
        loadRecordingFromFile(recordingUrl: string): IDataServiceRequest;
        generateRecordingFile(taskRecording: Entities.Recording): IDataServiceRequest;
        generateTrainingDocument(taskRecording: Entities.Recording): IDataServiceRequest;
        generateRecordingBundle(taskRecording: Entities.Recording): IDataServiceRequest;
        uploadRecording(taskRecording: Entities.Recording, businessProcessModelLineId: number): IDataServiceRequest;
        getAttributeDefinitions(attributeDefinitionCriteria: Entities.AttributeDefinitionCriteria): IDataServiceRequest;
        getAttributeGroupDefinitions(attributeGroupDefinitionCriteria: Entities.AttributeGroupDefinitionCriteria): IDataServiceRequest;
        saveFiscalTransaction(fiscalTransaction: Entities.FiscalTransaction): IDataServiceRequest;
        validatePrintReceiptCopyAllowed(salesOrderToPrint: Entities.SalesOrder): IDataServiceRequest;
        registerAuditEvent(auditEvent: Entities.AuditEvent): IDataServiceRequest;
        registerAndGetAuditEvent(auditEvent: Entities.AuditEvent): IDataServiceRequest;
        getInventoryAvailableToPromise(productId: number, itemId: string, inventLocationId: string): IDataServiceRequest;
        getSalesOrdersWithNoFiscalTransactions(storeNumber: string, terminalId: string): IDataServiceRequest;
        getNotifications(subscribedOperations: number[]): IDataServiceRequest;
        acknowledgeNotifications(lastPullDateTime: Date): IDataServiceRequest;
        getFiscalIntegrationFiscalDocument(hardwareProfileId: string, functionalityProfileGroupId: string, fiscalIntegrationDocumentRetrievalCriteria: Entities.FiscalIntegrationDocumentRetrievalCriteria, connectorType: number): IDataServiceRequest;
        getFiscalIntegrationNonFiscalDocument(hardwareProfileId: string, functionalityProfileGroupId: string, fiscalIntegrationDocumentRetrievalCriteria: Entities.FiscalIntegrationDocumentRetrievalCriteria, connectorType: number): IDataServiceRequest;
        getFiscalIntegrationFiscalServiceSetupDocument(hardwareProfileId: string, functionalityProfileGroupId: string, connectorType: number): IDataServiceRequest;
        getFiscalIntegrationFiscalServiceReadDataDocument(hardwareProfileId: string, functionalityProfileGroupId: string, connectorType: number): IDataServiceRequest;
        processFiscalIntegrationFiscalServiceReadDataResult(hardwareProfileId: string, functionalityProfileGroupId: string, documentToProcess: string, connectorType: number): IDataServiceRequest;
        saveFiscalIntegrationRegistrationResult(hardwareProfileId: string, functionalityProfileGroupId: string, registrationResult: Entities.FiscalIntegrationRegistrationResult, connectorType: number): IDataServiceRequest;
        getFiscalIntegrationRegistrationProcess(): IDataServiceRequest;
        getChannelSupportedFiscalIntegrationEventsByGroup(functionalityProfileGroupId: string): IDataServiceRequest;
        getFiscalIntegrationTechnicalProfiles(hardwareProfileId: string): IDataServiceRequest;
        getFiscalIntegrationTechnicalProfilesByFunctionalityGroupIds(hardwareProfileId: string, functionalityProfileGroupId: string[]): IDataServiceRequest;
        backupFiscalRegistrationProcessContext(terminalId: string, storeNumber: string, channelId: number, fiscalProcessCompleted: boolean, fiscalIntegrationSerializedContext: string): IDataServiceRequest;
        getActiveFiscalRegistrationProcessContextBackup(terminalId: string, storeNumber: string, channelId: number): IDataServiceRequest;
        getFiscalIntegrationTechnicalProfilesBySearchCriteria(hardwareProfileId: string, fiscalIntegrationTechnicalProfileSearchCriteria: Entities.FiscalIntegrationTechnicalProfileSearchCriteria): IDataServiceRequest;
        getFiscalIntegrationServiceStatus(fiscalIntegrationServiceInfo: Entities.FiscalIntegrationServiceInfo): IDataServiceRequest;
        submitFiscalIntegrationDocument(documentToSubmit: string, fiscalIntegrationServiceInfo: Entities.FiscalIntegrationServiceInfo): IDataServiceRequest;
        getFeatureStates(featureNames: string[]): IDataServiceRequest;
        getLastFiscalIntegrationSequentialSignatures(sequentialKeys: string[]): IDataServiceRequest;
        getAvailablePromotions(searchCriteria: Entities.DiscountsSearchCriteria): IDataServiceRequest;
        createFiscalTransaction(functionalityProfileGroupId: string, registrationResult: Entities.FiscalIntegrationRegistrationResult, connectorType: number): IDataServiceRequest;
        getButtonGrids(): IDataServiceRequest;
        getButtonGridsByScreenSize(height: number, width: number): IDataServiceRequest;
        getCashDeclarations(): IDataServiceRequest;
        getCountryRegions(): IDataServiceRequest;
        getCustomerGroups(): IDataServiceRequest;
        getDeliveryOptions(): IDataServiceRequest;
        getChannelsByType(channelType: string): IDataServiceRequest;
        getChannels(): IDataServiceRequest;
        getEnvironmentConfiguration(): IDataServiceRequest;
        getSearchConfiguration(): IDataServiceRequest;
        getExtensionPackageDefinitions(): IDataServiceRequest;
        getExtensionProfile(): IDataServiceRequest;
        getDeviceConfiguration(): IDataServiceRequest;
        getVisualProfile(): IDataServiceRequest;
        getLanguages(): IDataServiceRequest;
        getAffiliations(): IDataServiceRequest;
        getOperationPermissions(): IDataServiceRequest;
        getReasonCodes(): IDataServiceRequest;
        getReturnOrderReasonCodes(): IDataServiceRequest;
        getSalesTaxGroups(): IDataServiceRequest;
        getTenderTypes(): IDataServiceRequest;
        getUnitsOfMeasure(): IDataServiceRequest;
        getDiscountCodes(): IDataServiceRequest;
        getCurrencies(): IDataServiceRequest;
        getCurrenciesAmount(currencyCode: string, amount: number): IDataServiceRequest;
        getCommissionSalesGroups(): IDataServiceRequest;
        searchCommissionSalesGroups(searchText: string): IDataServiceRequest;
        getPaymentMerchantInformation(hardwareProfileId: string): IDataServiceRequest;
        getPaymentPropertiesIfModified(hardwareProfileId: string, merchantInformationHash: string): IDataServiceRequest;
        getOnlineChannelPublishStatus(): IDataServiceRequest;
        setOnlineChannelPublishStatus(publishingStatus: number, statusMessage: string): IDataServiceRequest;
        getInventoryConfiguration(): IDataServiceRequest;
        getAvailableDevices(deviceType: number): IDataServiceRequest;
        getImageBlob(imageId: number): IDataServiceRequest;
        getExtensibleEnumerations(): IDataServiceRequest;
        getAddressPurposes(): IDataServiceRequest;
        getReturnPolicy(): IDataServiceRequest;
    }
    class CategoriesDataServiceQuery extends DataServiceQuery<Entities.Category> {
        constructor(dataServiceRequestFactory: IDataServiceRequestFactory, entitySet: string, entityType: string, returnType?: any, key?: any);
        getCategories(channelId: number): IDataServiceRequest;
        getAttributes(categoryId: number): IDataServiceRequest;
        getChildren(channelId: number, categoryId: number): IDataServiceRequest;
    }
    class CartsDataServiceQuery extends DataServiceQuery<Entities.Cart> {
        constructor(dataServiceRequestFactory: IDataServiceRequestFactory, entitySet: string, entityType: string, returnType?: any, key?: any);
        checkout(receiptEmail: string, tokenizedPaymentCard: Entities.TokenizedPaymentCard, receiptNumberSequence: string, cartTenderLines: Entities.CartTenderLine[], cartVersion: number): IDataServiceRequest;
        getMaxLoyaltyPointsToRedeemForTransactionBalance(loyaltyCardId: string, currencyCode: string): IDataServiceRequest;
        getPaymentsHistory(): IDataServiceRequest;
        getLineDeliveryOptionsByChannelId(lineShippingAddresses: Entities.LineShippingAddress[], channelId: number): IDataServiceRequest;
        getLineDeliveryOptions(lineShippingAddresses: Entities.LineShippingAddress[], filterOption: number): IDataServiceRequest;
        getDeliveryPreferences(): IDataServiceRequest;
        getDeliveryOptions(shippingAddress: Entities.Address, cartLineIds: string[], filterOption: number): IDataServiceRequest;
        updateLineDeliverySpecifications(lineDeliverySpecifications: Entities.LineDeliverySpecification[]): IDataServiceRequest;
        updateDeliverySpecification(deliverySpecification: Entities.DeliverySpecification): IDataServiceRequest;
        addCharge(moduleTypeValue: number, chargeCode: string, amount: number): IDataServiceRequest;
        overrideCharge(chargeLineId: string, amount: number, reasonCodeLines: Entities.ReasonCodeLine[]): IDataServiceRequest;
        addCartLineCharge(cartLineId: string, moduleTypeValue: number, chargeCode: string, amount: number): IDataServiceRequest;
        overrideCartLineCharge(cartLineId: string, chargeLineId: string, amount: number, reasonCodeLines: Entities.ReasonCodeLine[]): IDataServiceRequest;
        void(reasonCodeLines: Entities.ReasonCodeLine[], cartVersion: number): IDataServiceRequest;
        addCartLines(cartLines: Entities.CartLine[], cartVersion: number): IDataServiceRequest;
        updateCartLines(cartLines: Entities.CartLine[], cartVersion: number): IDataServiceRequest;
        voidCartLines(cartLines: Entities.CartLine[]): IDataServiceRequest;
        removeCartLines(cartLineIds: string[]): IDataServiceRequest;
        addTenderLine(cartTenderLine: Entities.CartTenderLine, cartVersion: number): IDataServiceRequest;
        calculateTenderDiscount(tenderLine: Entities.TenderLine, cartVersion: number): IDataServiceRequest;
        addPreprocessedTenderLine(preprocessedTenderLine: Entities.TenderLine, cartVersion: number): IDataServiceRequest;
        validateTenderLineForAdd(tenderLine: Entities.TenderLine): IDataServiceRequest;
        updateTenderLineSignature(tenderLineId: string, signatureData: string): IDataServiceRequest;
        getDeclinedOrVoidedCardReceipts(preprocessedTenderLine: Entities.TenderLine, receiptRetrievalCriteria: Entities.ReceiptRetrievalCriteria): IDataServiceRequest;
        copy(targetCartType: number): IDataServiceRequest;
        addInvoicedSalesLinesToCart(transactionId: string, invoicedSalesLinesIds: number[]): IDataServiceRequest;
        voidTenderLine(tenderLineId: string, reasonCodeLines: Entities.ReasonCodeLine[], isPreprocessed: boolean, forceVoid: boolean): IDataServiceRequest;
        issueGiftCard(giftCardId: string, amount: number, currencyCode: string, lineDescription: string, tenderTypeId: string): IDataServiceRequest;
        refillGiftCard(giftCardId: string, amount: number, currencyCode: string, lineDescription: string, tenderTypeId: string): IDataServiceRequest;
        cashOutGiftCard(giftCardId: string, amount: number, currencyCode: string, lineDescription: string, tenderTypeId: string): IDataServiceRequest;
        suspend(): IDataServiceRequest;
        suspendWithJournal(journalCartId: string, receiptNumberSequence: string): IDataServiceRequest;
        resume(): IDataServiceRequest;
        resumeFromReceiptId(receiptId: string): IDataServiceRequest;
        removeDiscountCodes(discountCodes: string[]): IDataServiceRequest;
        getSuspended(): IDataServiceRequest;
        search(cartSearchCriteria: Entities.CartSearchCriteria): IDataServiceRequest;
        overrideCartLinePrice(cartLineId: string, price: number): IDataServiceRequest;
        getCardPaymentAcceptPoint(cardPaymentAcceptSettings: Entities.CardPaymentAcceptSettings, extensionProperties: Entities.CommerceProperty[]): IDataServiceRequest;
        retrieveCardPaymentAcceptResult(resultAccessCode: string, extensionProperties: Entities.CommerceProperty[], cartId: string, settings: Entities.RetrievePaymentResultSettings): IDataServiceRequest;
        recallOrder(transactionId: string, salesId: string): IDataServiceRequest;
        recallQuote(transactionId: string, quoteId: string): IDataServiceRequest;
        recalculateOrder(): IDataServiceRequest;
        resetAllCharges(): IDataServiceRequest;
        getPromotions(): IDataServiceRequest;
        getAvailablePromotions(cartLineIds: string[]): IDataServiceRequest;
        recallSalesInvoice(transactionId: string, invoiceId: string): IDataServiceRequest;
        addOrderInvoice(invoiceId: string, lineDescription: string): IDataServiceRequest;
        addInvoices(invoiceIds: string[]): IDataServiceRequest;
        updateCommissionSalesGroup(transactionId: string, cartLineId: string, commissionSalesGroup: string, isUserInitiated: boolean): IDataServiceRequest;
        addCoupons(couponCodes: string[], isLegacyDiscountCode: boolean): IDataServiceRequest;
        removeCoupons(couponCodes: string[]): IDataServiceRequest;
        getChargeCodes(): IDataServiceRequest;
        addDiscountCode(discountCode: string): IDataServiceRequest;
        getReturnOptions(): IDataServiceRequest;
        validateForCheckout(cartVersion: number): IDataServiceRequest;
    }
    class CustomersDataServiceQuery extends DataServiceQuery<Entities.Customer> {
        constructor(dataServiceRequestFactory: IDataServiceRequestFactory, entitySet: string, entityType: string, returnType?: any, key?: any);
        search(customerSearchCriteria: Entities.CustomerSearchCriteria): IDataServiceRequest;
        searchByFields(CustomerSearchByFieldCriteria: Entities.CustomerSearchByFieldCriteria): IDataServiceRequest;
        getByAccountNumbers(accountNumbers: string[], searchLocationValue: number): IDataServiceRequest;
        createCustomerTimelineItem(customerTimelineItem: Entities.CustomerTimelineItem): IDataServiceRequest;
        updateCustomerTimelineItem(customerTimelineItem: Entities.CustomerTimelineItem): IDataServiceRequest;
        getOrderHistory(): IDataServiceRequest;
        getOrderShipmentsHistory(): IDataServiceRequest;
        postNonTransactionalActivityLoyaltyPoints(loyaltyCardId: string, channelId: number, affiliationId: number, activityTypeId: string): IDataServiceRequest;
        getPurchaseHistory(): IDataServiceRequest;
        getCustomerSearchFields(): IDataServiceRequest;
        getCustomerTimelineItemTypes(): IDataServiceRequest;
        getCustomerTimelineItems(): IDataServiceRequest;
        getCustomerTimelineRefiners(): IDataServiceRequest;
        getTitles(): IDataServiceRequest;
    }
    class EmployeesDataServiceQuery extends DataServiceQuery<Entities.Employee> {
        constructor(dataServiceRequestFactory: IDataServiceRequestFactory, entitySet: string, entityType: string, returnType?: any, key?: any);
        getActivities(employeeActivitySearchCriteria: Entities.EmployeeActivitySearchCriteria): IDataServiceRequest;
        getManagerActivityView(employeeActivitySearchCriteria: Entities.EmployeeActivitySearchCriteria): IDataServiceRequest;
        registerActivity(employeeActivityType: number): IDataServiceRequest;
        getAccessibleOrgUnits(): IDataServiceRequest;
        getLatestActivity(): IDataServiceRequest;
        searchClientBookCustomers(clientBookCustomerSearchCriteria: Entities.ClientBookCustomerSearchCriteria): IDataServiceRequest;
        getClientBookSearchRefiners(refinerSourceTypes: number[], searchCriteria: Entities.ClientBookCustomerSearchCriteria): IDataServiceRequest;
        updateClientBook(clientBookChanges: Entities.ClientBookChanges): IDataServiceRequest;
        getCurrentEmployee(): IDataServiceRequest;
    }
    class ChecklistsDataServiceQuery extends DataServiceQuery<Entities.Checklist> {
        constructor(dataServiceRequestFactory: IDataServiceRequestFactory, entitySet: string, entityType: string, returnType?: any, key?: any);
        searchChecklists(checklistSearchCriteria: Entities.ChecklistSearchCriteria): IDataServiceRequest;
        searchTasks(taskSearchCriteria: Entities.TaskSearchCriteria): IDataServiceRequest;
        createTask(createTask: Entities.ChecklistTask): IDataServiceRequest;
        updateChecklists(updateChecklists: Entities.Checklist[]): IDataServiceRequest;
        updateTasks(updateTasks: Entities.ChecklistTask[]): IDataServiceRequest;
    }
    class SalesOrdersDataServiceQuery extends DataServiceQuery<Entities.SalesOrder> {
        constructor(dataServiceRequestFactory: IDataServiceRequestFactory, entitySet: string, entityType: string, returnType?: any, key?: any);
        searchSalesTransactionsByReceiptId(receiptId: string): IDataServiceRequest;
        search(salesOrderSearchCriteria: Entities.SalesOrderSearchCriteria): IDataServiceRequest;
        searchOrders(orderSearchCriteria: Entities.OrderSearchCriteria): IDataServiceRequest;
        getReceipts(receiptRetrievalCriteria: Entities.ReceiptRetrievalCriteria): IDataServiceRequest;
        sendReceipt(searchCriteria: Entities.SearchReceiptCriteria, recipientAddresses: Entities.ElectronicAddress[]): IDataServiceRequest;
        getGiftReceipts(SalesLineNumbers: number[], receiptRetrievalCriteria: Entities.ReceiptRetrievalCriteria): IDataServiceRequest;
        getByReceiptId(receiptId: string, orderStoreNumber: string, orderTerminalId: string): IDataServiceRequest;
        getSalesOrderDetailsByTransactionId(transactionId: string, searchLocationValue: number): IDataServiceRequest;
        getSalesOrderDetailsBySalesId(salesId: string): IDataServiceRequest;
        getSalesOrderDetailsByQuotationId(quotationId: string): IDataServiceRequest;
        shipFulfillmentLines(ShipFulfillmentLines: Entities.ShipFulfillmentLine[]): IDataServiceRequest;
        acceptFulfillmentLines(FulfillmentLineParameter: Entities.FulfillmentLineParameter[]): IDataServiceRequest;
        pickFulfillmentLines(FulfillmentLineParameter: Entities.FulfillmentLineParameter[]): IDataServiceRequest;
        packFulfillmentLines(FulfillmentLineParameter: Entities.FulfillmentLineParameter[]): IDataServiceRequest;
        markFulfillmentLinesAsPacked(FulfillmentLineParameter: Entities.FulfillmentLineParameter[]): IDataServiceRequest;
        markAsPicked(FulfillmentLineParameter: Entities.FulfillmentLineParameter[]): IDataServiceRequest;
        getFulfillmentPickingLists(pickingListFulfillmentLine: Entities.FulfillmentLineParameter[], hardwareProfileId: string): IDataServiceRequest;
        getFulfillmentLines(fulfillmentLineSearchCriteria: Entities.FulfillmentLineSearchCriteria): IDataServiceRequest;
        getFulfillmentPackingSlips(packFulfillmentLines: Entities.FulfillmentLineParameter[], hardwareProfileId: string): IDataServiceRequest;
        getFulfillmentPackingSlipsById(salesId: string, PackingSlipId: string, hardwareProfileId: string): IDataServiceRequest;
        rejectFulfillmentLines(RejectFulfillmentLines: Entities.RejectFulfillmentLine[]): IDataServiceRequest;
        getInvoicesBySalesId(salesId: string): IDataServiceRequest;
        getOrderInvoices(customerId: string): IDataServiceRequest;
        getInvoices(invoiceSearchCriteria: Entities.InvoiceSearchCriteria): IDataServiceRequest;
        getInvoicedSalesLinesBySalesIds(salesIds: string[]): IDataServiceRequest;
        createPickingList(salesId: string): IDataServiceRequest;
        createPickingListForItems(salesId: string, pickAndPackSalesLineParameters: Entities.PickAndPackSalesLineParameter[]): IDataServiceRequest;
        getPickingLists(): IDataServiceRequest;
        createPackingSlip(salesId: string): IDataServiceRequest;
        getPackingSlipsData(salesId: string): IDataServiceRequest;
    }
    class ShiftsDataServiceQuery extends DataServiceQuery<Entities.Shift> {
        constructor(dataServiceRequestFactory: IDataServiceRequestFactory, entitySet: string, entityType: string, returnType?: any, key?: any);
        upsertShifts(shifts: Entities.Shift[]): IDataServiceRequest;
        upsertAndValidateShifts(shiftId: number, terminalId: string, shifts: Entities.Shift[]): IDataServiceRequest;
        deleteShifts(): IDataServiceRequest;
        open(shiftId: number, cashDrawer: string, isShared: boolean): IDataServiceRequest;
        close(transactionId: string, forceClose: boolean, hasOfflinePendingTransactions: boolean): IDataServiceRequest;
        getSuspendedCartsByShift(shiftTerminalId: string, shiftId: number): IDataServiceRequest;
        voidSuspendedCarts(): IDataServiceRequest;
        saveTenderLines(tenderLines: Entities.ShiftTenderLine[]): IDataServiceRequest;
        blindClose(transactionId: string, forceClose: boolean): IDataServiceRequest;
        forceDelete(transactionId: string): IDataServiceRequest;
        resume(cashDrawer: string): IDataServiceRequest;
        use(): IDataServiceRequest;
        suspend(transactionId: string): IDataServiceRequest;
        getByStatus(statusValue: number): IDataServiceRequest;
        getByStatusFilterByUserRole(statusValue: number, filterByUserRole: boolean): IDataServiceRequest;
        getByRetrievalCriteria(shiftRetrievalCriteria: Entities.ShiftRetrievalCriteria): IDataServiceRequest;
        getXReport(transactionId: string, hardwareProfileId: string): IDataServiceRequest;
        getZReport(transactionId: string, hardwareProfileId: string): IDataServiceRequest;
        getOpenTenderLines(): IDataServiceRequest;
        validateCashDrawerLimit(shiftTerminalId: string, shiftId: number): IDataServiceRequest;
    }
    class StockCountJournalsDataServiceQuery extends DataServiceQuery<Entities.StockCountJournal> {
        constructor(dataServiceRequestFactory: IDataServiceRequestFactory, entitySet: string, entityType: string, returnType?: any, key?: any);
        sync(): IDataServiceRequest;
        syncTransactions(): IDataServiceRequest;
        calculateEstimatedOnHandInventory(): IDataServiceRequest;
        removeJournal(): IDataServiceRequest;
        removeTransaction(itemId: string, inventSizeId: string, inventColorId: string, inventStyleId: string, configurationId: string): IDataServiceRequest;
        removeStockCountLineByLineId(stockCountLineId: number): IDataServiceRequest;
        removeStockCountLineByProductRecId(productId: number): IDataServiceRequest;
        commit(): IDataServiceRequest;
    }
    class OrgUnitsDataServiceQuery extends DataServiceQuery<Entities.OrgUnit> {
        constructor(dataServiceRequestFactory: IDataServiceRequestFactory, entitySet: string, entityType: string, returnType?: any, key?: any);
        getTillLayout(height: number, width: number): IDataServiceRequest;
        search(storeSearchCriteria: Entities.SearchStoreCriteria): IDataServiceRequest;
        getOrgUnitLocationsByArea(searchArea: Entities.SearchArea, deliveryModeTypeFilter: number): IDataServiceRequest;
        searchOrgUnitLocations(orgUnitLocationSearchCriteria: Entities.OrgUnitLocationSearchCriteria): IDataServiceRequest;
        getOrgUnitConfiguration(): IDataServiceRequest;
        getStoreHours(storeNumber: string): IDataServiceRequest;
        getAvailableInventory(itemId: string, variantId: string, barcode: string): IDataServiceRequest;
        getAvailableInventoryNearby(itemIds: Entities.ItemUnit[], searchArea: Entities.SearchArea): IDataServiceRequest;
        getProductAvailabilityByDimensions(inventLocationIds: string[], productId: number, productDimensionCombinations: Entities.ProductDimensionCombination[]): IDataServiceRequest;
        searchProductAvailability(productId: number, orgUnitAvailabilitySearchCriteria: Entities.OrgUnitAvailabilitySearchCriteria): IDataServiceRequest;
        getTerminalInfo(deviceType: number): IDataServiceRequest;
        getProductAvailability(productId: number): IDataServiceRequest;
    }
    class ProductsDataServiceQuery extends DataServiceQuery<Entities.Product> {
        constructor(dataServiceRequestFactory: IDataServiceRequestFactory, entitySet: string, entityType: string, returnType?: any, key?: any);
        getDimensionValues(channelId: number, dimension: number, matchingDimensionValues: Entities.ProductDimension[], kitVariantResolutionContext: Entities.ProductVariantResolutionOnKitSelectionContext): IDataServiceRequest;
        getVariantsByDimensionValues(channelId: number, matchingDimensionValues: Entities.ProductDimension[]): IDataServiceRequest;
        getVariantsByComponentsInSlots(channelId: number, matchingSlotToComponentRelationship: Entities.ComponentInSlotRelation[]): IDataServiceRequest;
        getByIds(channelId: number, productIds: number[]): IDataServiceRequest;
        compare(channelId: number, catalogId: number, productIds: number[]): IDataServiceRequest;
        getRecommendedProducts(productIds: number[], customerId: string): IDataServiceRequest;
        refineSearchByCategory(channelId: number, catalogId: number, categoryId: number, refinementCriteria: Entities.ProductRefinerValue[]): IDataServiceRequest;
        refineSearchByText(channelId: number, catalogId: number, searchText: string, refinementCriteria: Entities.ProductRefinerValue[]): IDataServiceRequest;
        getProductSearchRefiners(searchCriteria: Entities.ProductSearchCriteria): IDataServiceRequest;
        search(productSearchCriteria: Entities.ProductSearchCriteria): IDataServiceRequest;
        getRefiners(productSearchCriteria: Entities.ProductSearchCriteria): IDataServiceRequest;
        changes(productSearchCriteria: Entities.ChangedProductsSearchCriteria): IDataServiceRequest;
        beginReadChangedProducts(changedProductSearchCriteria: Entities.ChangedProductsSearchCriteria): IDataServiceRequest;
        readChangedProducts(productSearchCriteria: Entities.ChangedProductsSearchCriteria): IDataServiceRequest;
        getDeletedListings(catalogId: number, skip: number, top: number): IDataServiceRequest;
        getDeletedCatalogs(): IDataServiceRequest;
        getDeletedLanguages(): IDataServiceRequest;
        getProductRatings(productIds: number[]): IDataServiceRequest;
        getProductAssortmentIntervals(productIds: number[]): IDataServiceRequest;
        getDeliveryOptions(productIds: number[], address: Entities.Address, filterOption: number): IDataServiceRequest;
        deleteListingsByCatalogs(catalogIds: number[]): IDataServiceRequest;
        deleteListingsByLanguages(languages: string[]): IDataServiceRequest;
        endReadChangedProducts(session: Entities.ReadChangedProductsSession): IDataServiceRequest;
        updateListingPublishingStatus(publishingStatuses: Entities.ListingPublishStatus[]): IDataServiceRequest;
        getPrices(itemId: string, inventoryDimensionId: string, barcode: string, customerAccountNumber: string, unitOfMeasureSymbol: string, quantity: number): IDataServiceRequest;
        getProductAvailabilities(itemIds: number[], channelId: number): IDataServiceRequest;
        getActivePrices(projectDomain: Entities.ProjectionDomain, productIds: number[], activeDate: Date, customerId: string, affiliationLoyaltyTiers: Entities.AffiliationLoyaltyTier[], includeSimpleDiscountsInContextualPrice: boolean): IDataServiceRequest;
        getFilteredSlotComponents(channelId: number, slotId: number, selectedComponents: Entities.ComponentInSlotRelation[]): IDataServiceRequest;
        getComponentByProductSlotRelation(channelId: number, componentRelation: Entities.ComponentInSlotRelation): IDataServiceRequest;
        getCategoryPaths(channelId: number, catalogId: number, CategoryPathLookups: Entities.CategoryPathLookup[]): IDataServiceRequest;
        searchByCategory(channelId: number, catalogId: number, categoryId: number): IDataServiceRequest;
        searchByText(channelId: number, catalogId: number, searchText: string): IDataServiceRequest;
        searchByCriteria(searchCriteria: Entities.ProductSearchCriteria): IDataServiceRequest;
        getByLookupClauses(channelId: number, productLookupClauses: Entities.ProductLookupClause[]): IDataServiceRequest;
        getSearchSuggestions(channelId: number, catalogId: number, searchText: string, hitPrefix: string, hitSuffix: string): IDataServiceRequest;
        getRefinersByCategory(catalogId: number, categoryId: number): IDataServiceRequest;
        getRefinersByText(catalogId: number, searchText: string): IDataServiceRequest;
        getRefinerValuesByCategory(catalogId: number, categoryId: number, refinerId: number, refinerSourceValue: number): IDataServiceRequest;
        getRefinerValuesByText(catalogId: number, searchText: string, refinerId: number, refinerSourceValue: number): IDataServiceRequest;
        getChannelProductAttributes(): IDataServiceRequest;
        getById(channelId: number): IDataServiceRequest;
        getAttributeValues(channelId: number, catalogId: number): IDataServiceRequest;
        getMediaLocations(channelId: number, catalogId: number): IDataServiceRequest;
        getMediaBlobs(channelId: number, catalogId: number): IDataServiceRequest;
        getDefaultComponents(channelId: number): IDataServiceRequest;
        getSlotComponents(channelId: number, slotId: number): IDataServiceRequest;
        getAllRelationTypes(): IDataServiceRequest;
        getRelationTypes(channelId: number, catalogId: number): IDataServiceRequest;
        getRelatedProducts(channelId: number, catalogId: number, relationTypeId: number): IDataServiceRequest;
        getUnitsOfMeasure(): IDataServiceRequest;
        getApplicableWarranties(catalogId: number, warrantableProductIds: number[]): IDataServiceRequest;
        getPrice(customerAccountNumber: string, unitOfMeasureSymbol: string): IDataServiceRequest;
        calculateProductPrice(customerAccountNumber: string, unitOfMeasureSymbol: string, loyaltyCardId: string, affiliationLoyaltyTiers: Entities.AffiliationLoyaltyTier[]): IDataServiceRequest;
        getEstimatedProductWarehouseAvailability(productWarehouses: Entities.ProductWarehouse[]): IDataServiceRequest;
        getEstimatedAvailability(searchCriteria: Entities.InventoryAvailabilitySearchCriteria): IDataServiceRequest;
    }
    class CatalogsDataServiceQuery extends DataServiceQuery<Entities.ProductCatalog> {
        constructor(dataServiceRequestFactory: IDataServiceRequestFactory, entitySet: string, entityType: string, returnType?: any, key?: any);
        getCatalogs(channelId: number, activeOnly: boolean): IDataServiceRequest;
    }
    class CommerceListsDataServiceQuery extends DataServiceQuery<Entities.CommerceList> {
        constructor(dataServiceRequestFactory: IDataServiceRequestFactory, entitySet: string, entityType: string, returnType?: any, key?: any);
        getByCustomer(customerId: string): IDataServiceRequest;
        addLines(commerceListLines: Entities.CommerceListLine[]): IDataServiceRequest;
        updateLines(commerceListLines: Entities.CommerceListLine[]): IDataServiceRequest;
        removeLines(commerceListLines: Entities.CommerceListLine[]): IDataServiceRequest;
        moveLines(commerceListLines: Entities.CommerceListLine[], destinationId: number): IDataServiceRequest;
        copyLines(commerceListLines: Entities.CommerceListLine[], destinationId: number): IDataServiceRequest;
        addContributors(commerceListContributors: Entities.CommerceListContributor[]): IDataServiceRequest;
        removeContributors(commerceListContributors: Entities.CommerceListContributor[]): IDataServiceRequest;
        createInvitations(commerceListInvitations: Entities.CommerceListInvitation[]): IDataServiceRequest;
        acceptInvitation(invitationToken: string, customerId: string): IDataServiceRequest;
    }
    class ProductListsDataServiceQuery extends DataServiceQuery<Entities.ProductList> {
        constructor(dataServiceRequestFactory: IDataServiceRequestFactory, entitySet: string, entityType: string, returnType?: any, key?: any);
        search(searchCriteria: Entities.ProductListSearchCriteria): IDataServiceRequest;
        getProductListLines(searchText: string): IDataServiceRequest;
        addProductListLines(productListLines: Entities.ProductListLine[]): IDataServiceRequest;
        updateProductListLines(productListLines: Entities.ProductListLine[]): IDataServiceRequest;
        removeProductListLines(productListLines: Entities.ProductListLine[]): IDataServiceRequest;
        copyCartToProductList(cartId: string, isRewrite: boolean, isQuantityAggregate: boolean): IDataServiceRequest;
    }
    class RecommendationsDataServiceQuery extends DataServiceQuery<Entities.Recommendation> {
        constructor(dataServiceRequestFactory: IDataServiceRequestFactory, entitySet: string, entityType: string, returnType?: any, key?: any);
        getElements(recommendationCriteria: Entities.RecommendationCriteria): IDataServiceRequest;
    }
    class TransferOrdersDataServiceQuery extends DataServiceQuery<Entities.TransferOrder> {
        constructor(dataServiceRequestFactory: IDataServiceRequestFactory, entitySet: string, entityType: string, returnType?: any, key?: any);
        commit(skipNotValidLines: boolean): IDataServiceRequest;
        getTransferOrderLines(): IDataServiceRequest;
        createTransferOrderLines(transferOrderLines: Entities.TransferOrderLine[]): IDataServiceRequest;
        updateTransferOrderLines(transferOrderLines: Entities.TransferOrderLine[]): IDataServiceRequest;
        getTransferOrderComments(): IDataServiceRequest;
        addTransferOrderComment(AuthorStaffId: string, CommentText: string): IDataServiceRequest;
        deleteTransferOrderLines(transferOrderLines: Entities.TransferOrderLine[]): IDataServiceRequest;
        getTransferOrderJournals(): IDataServiceRequest;
        getTransferPackingSlip(voucherId: string, receiptRetrievalCriteria: Entities.ReceiptRetrievalCriteria): IDataServiceRequest;
    }
    class PurchaseOrdersDataServiceQuery extends DataServiceQuery<Entities.PurchaseOrder> {
        constructor(dataServiceRequestFactory: IDataServiceRequestFactory, entitySet: string, entityType: string, returnType?: any, key?: any);
        commit(): IDataServiceRequest;
    }
    class PickingListsDataServiceQuery extends DataServiceQuery<Entities.PickingList> {
        constructor(dataServiceRequestFactory: IDataServiceRequestFactory, entitySet: string, entityType: string, returnType?: any, key?: any);
        commit(): IDataServiceRequest;
    }
    class WarehousesDataServiceQuery extends DataServiceQuery<Entities.Warehouse> {
        constructor(dataServiceRequestFactory: IDataServiceRequestFactory, entitySet: string, entityType: string, returnType?: any, key?: any);
        searchWarehouseLocationsAsync(searchCriteria: Entities.WarehouseLocationSearchCriteria): IDataServiceRequest;
        getWarehouseById(): IDataServiceRequest;
        searchWarehouses(searchText: string): IDataServiceRequest;
        getLocations(): IDataServiceRequest;
        searchLocations(searchText: string): IDataServiceRequest;
        getAvailableFulfillmentLocations(deliveryModeTypeFilter: number): IDataServiceRequest;
    }
    class ApplicableOperationsDataServiceQuery extends DataServiceQuery<Entities.SalesOrderContextualOperationsMap> {
        constructor(dataServiceRequestFactory: IDataServiceRequestFactory, entitySet: string, entityType: string, returnType?: any, key?: any);
        getOrders(orderSearchCriteria: Entities.OrderSearchCriteria): IDataServiceRequest;
        getFulfillmentLines(fulfillmentLineSearchCriteria: Entities.FulfillmentLineSearchCriteria): IDataServiceRequest;
    }
    class InventoryInboundOutboundDocumentsDataServiceQuery extends DataServiceQuery<Entities.InventoryInboundOutboundDocument> {
        constructor(dataServiceRequestFactory: IDataServiceRequestFactory, entitySet: string, entityType: string, returnType?: any, key?: any);
        updateStatus(documentStatus: number, documentVersion: number): IDataServiceRequest;
        updateLinesByCriteria(filterCriteria: Entities.InventoryDocumentLineFilterCriteria, updateLinesAction: Entities.InventoryDocumentUpdateLinesAction, returnUpdatedLinesPolicy: Entities.InventoryDocumentLineOperationResultSettings): IDataServiceRequest;
        updateLine(documentLine: Entities.InventoryInboundOutboundDocumentLine): IDataServiceRequest;
        updateWorkingTerminal(documentVersion: number): IDataServiceRequest;
        updateNote(documentNote: string, documentVersion: number): IDataServiceRequest;
        updateReceiptId(documentReceiptId: string, documentVersion: number): IDataServiceRequest;
        commit(documentVersion: number): IDataServiceRequest;
        refreshOperationStatus(): IDataServiceRequest;
        start(sourceDocumentId: string, sourceDocumentType: number): IDataServiceRequest;
        addLine(documentLine: Entities.InventoryInboundOutboundDocumentLine): IDataServiceRequest;
        deleteLine(documentLineId: string, documentLineVersion: number): IDataServiceRequest;
        searchSerialNumberLines(searchCriteria: Entities.InventoryDocumentSerialNumberLineSearchCriteria): IDataServiceRequest;
        validate(documentVersion: number): IDataServiceRequest;
        searchValidationResultLines(searchCriteria: Entities.InventoryDocumentValidationResultSearchCriteria): IDataServiceRequest;
        syncSourceDocument(sourceDocumentId: string, sourceDocumentType: number): IDataServiceRequest;
        searchInboundDocuments(searchCriteria: Entities.InventoryDocumentSearchCriteria): IDataServiceRequest;
        searchOutboundDocuments(searchCriteria: Entities.InventoryDocumentSearchCriteria): IDataServiceRequest;
        searchLines(searchCriteria: Entities.InventoryDocumentLineSearchCriteria): IDataServiceRequest;
        resetSerialNumberLine(resetSerialNumberLineAction: Entities.InventoryDocumentSerialNumberLineResetAction): IDataServiceRequest;
        updateSerialNumberLine(updateSerialNumberLineAction: Entities.InventoryDocumentSerialNumberLineUpdateAction): IDataServiceRequest;
        getLinesSummary(): IDataServiceRequest;
        getSerialNumberLinesSummary(documentLineId: string): IDataServiceRequest;
    }
    class BusinessPartnersDataServiceQuery extends DataServiceQuery<Entities.BusinessPartner> {
        constructor(dataServiceRequestFactory: IDataServiceRequestFactory, entitySet: string, entityType: string, returnType?: any, key?: any);
        createProspect(businessPartnerProspect: Entities.BusinessPartnerProspect): IDataServiceRequest;
        getCurrent(): IDataServiceRequest;
        getUsers(): IDataServiceRequest;
    }
    class SuspendedCartsDataServiceQuery extends DataServiceQuery<Entities.SuspendedCart> {
        constructor(dataServiceRequestFactory: IDataServiceRequestFactory, entitySet: string, entityType: string, returnType?: any, key?: any);
        getAllSuspendedCarts(): IDataServiceRequest;
    }
}
declare module Commerce.Proxy {
    /**
     * Error type enum.
     */
    class ErrorTypeEnum {
        static Cash: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDDEVICETOKEN: string;
        static APPLICATION_ERROR: string;
        static APPLICATION_STORE_INITIALIZATION_DATA_FAILED_TO_LOAD: string;
        static PRICE_CHECK_INITIALIZATION_DATA_FAILED_TO_LOAD: string;
        static CART_LINE_MISSING_PRODUCT_NAME_ERROR: string;
        static OPERATOR_ID_PASSWORD_NOT_SPECIFIED: string;
        static OPERATOR_PASSWORD_NOT_SPECIFIED: string;
        static SERVER_ERROR: string;
        static INVALID_URL: string;
        static INVALID_EMAIL: string;
        static INVALID_PHONE: string;
        static INVALID_NAME: string;
        static INVALID_NAME_FORMAT: string;
        static EMPTY_STREET: string;
        static EMPTY_CITY: string;
        static EMPTY_STATE: string;
        static EMPTY_COUNTRY: string;
        static EMPTY_ZIPCODE: string;
        static EMPTY_NAME: string;
        static LINE_ITEM_MISSING_PRODUCT_NAME_ERROR: string;
        static LOGOFF_ERROR: string;
        static AAD_AUTHENTICATION_FAILED: string;
        static DEVICE_ACTIVATION_DETAILS_NOT_SPECIFIED: string;
        static DEVICE_DEACTIVATION_INCOMPLETE_TRANSACTION_ERROR: string;
        static CHANGE_PASSWORD_DETAILS_NOT_SPECIFIED: string;
        static NEW_PASSWORD_AND_CONFIRMATION_NOT_MATCHING_ERROR: string;
        static RESET_PASSWORD_DETAILS_NOT_SPECIFIED: string;
        static OLD_AND_NEW_PASSWORD_MATCHING_ERROR: string;
        static OPERATION_ISSUE_CREDIT_MEMO_NOT_AVAILABLE: string;
        static PAYMENT_INFORMATION_INCOMPLETE: string;
        static PAYMENT_INVALID_NUMBER: string;
        static PAYMENT_CARD_NOT_SUPPORTED: string;
        static PAYMENT_CASH_PAYMENT_NOT_AVAILABLE: string;
        static PAYMENT_CARD_PAYMENT_NOT_AVAILABLE: string;
        static PAYMENT_UNABLE_TO_LOAD_CURRENCY_AMOUNTS: string;
        static PAYMENT_CUSTOMER_ACCOUNT_NOT_SET: string;
        static PAYMENT_AMOUNT_CANNOT_BE_EMPTY: string;
        static PAYMENT_CARD_TRACK_DATA_EMPTY: string;
        static PAYMENT_CARD_NUMBER_EMPTY: string;
        static PAYMENT_CARD_SECURITY_CODE_EMPTY: string;
        static PAYMENT_CREDIT_MEMO_NUMBER_EMPTY: string;
        static PAYMENT_LOYALTY_CARD_NUMBER_EMPTY: string;
        static PAYMENT_GIFT_CARD_NUMBER_EMPTY: string;
        static PAYMENT_CUSTOMER_ACCOUNT_EMPTY: string;
        static PAYMENT_INVALID_CARD_NUMBER: string;
        static PAYMENT_INVALID_SECURITY_CODE: string;
        static PAYMENT_INVALID_ZIP_CODE: string;
        static CART_IS_EMPTY: string;
        static RETAIL_SERVER_REDIRECT_ERROR: string;
        static OPERATION_NOT_VALID_FOR_BIG_ENDIAN_SYSTEM: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_MANUALCARDNUMBERNOTALLOWED: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_TENDERLINECANNOTBEVOIDED: string;
        static INVALID_INCOME_EXPENSE_LINE_COLLECTION: string;
        static CARTLINE_DISCOUNTINUED: string;
        static SCALE_UNSPECIFIED_WITHOUT_MANUAL_ENTRY: string;
        static SCALE_RETURNED_ZERO_WITHOUT_MANUAL_ENTRY: string;
        static APPLICATION_CONFIGURATION_LOADING_ERROR: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_DEMOMODEOPERATIONNOTSUPPORTED: string;
        static MANAGER_OVERRIDE_CANCELED_ERROR: string;
        static SELECTED_CARTLINES_CONTAINS_VOIDED_PRODUCTS: string;
        static CUSTOMERORDER_MANUAL_DEPOSIT_REQUIRED: string;
        static STORE_NOT_FOUND: string;
        static DIMENSION_SELECTION_NOT_COMPLETED: string;
        static RETURN_MULTIPLE_REASON_CODE_SETS_ARE_DEFINED: string;
        static RETURN_NO_ORDERS_FOUND: string;
        static RETURN_NO_SALES_LINES_IN_ORDER: string;
        static RETURN_ALL_SALES_LINES_IN_ORDER_RETURN: string;
        static RETURN_NO_REASON_CODES_ARE_DEFINED: string;
        static RETURN_NO_ITEM_SELECTED: string;
        static RETURN_MAX_RETURN_LINE_AMOUNT_EXCEEDED: string;
        static RETURN_MAX_RETURN_TOTAL_AMOUNT_EXCEEDED: string;
        static CREDIT_MEMO_INVALID_AMOUNT: string;
        static NO_PRICECHECK_ON_PRODUCTS: string;
        static NO_PRODUCT_INFORMATION: string;
        static CART_UNAVAILABLE_FOR_PICK_UP: string;
        static CART_LINES_UNAVAILABLE_FOR_PICK_UP: string;
        static PICK_LIST_CAN_NOT_BE_CREATED: string;
        static PACK_SLIP_CAN_NOT_BE_CREATED: string;
        static CUSTOMER_ORDER_OPERATION_INVOICE_NOT_SUPPORTED: string;
        static CREATE_OR_EDIT_CUSTOMER_ORDER_OR_QUOTATION_ONLY: string;
        static EDIT_CUSTOMER_ORDER_OR_QUOTATION_ONLY: string;
        static NO_STORE_SELECTED_FOR_PICKUP: string;
        static ALL_PRODUCTS_SELECTED_PICKUP_OR_SHIP_SELECTED: string;
        static INVALID_SHIPPING_CHARGES: string;
        static NO_ADDRESSES_SELECTED_FOR_SHIP: string;
        static NO_SHIPPING_METHODS_SELECTED_FOR_SHIP: string;
        static CREATE_OR_EDIT_QUOTATION_ONLY: string;
        static EDIT_CUSTOMER_ORDER_ONLY: string;
        static CANCELLATION_CHARGE_IS_NOT_VALID: string;
        static CANCELLATION_CHARGE_INVALID_NEGATIVE_AMOUNT: string;
        static CANCELLATION_CHARGE_INVALID_OPERATION: string;
        static CART_UNAVAILABLE_FOR_CANCEL: string;
        static UNSUPPORTED_APPLY_DISCOUNT_OPERATION: string;
        static MISSING_CARTLINE_ON_APPLY_DISCOUNT: string;
        static MAXIMUM_LINE_DISCOUNT_AMOUNT_EXCEEDED: string;
        static MAXIMUM_LINE_DISCOUNT_PERCENT_EXCEEDED: string;
        static MAXIMUM_TOTAL_DISCOUNT_AMOUNT_EXCEEDED: string;
        static MAXIMUM_TOTAL_DISCOUNT_PERCENT_EXCEEDED: string;
        static MAXIMUM_LINE_DISCOUNT_AMOUNT_EXCEEDED_PRICE: string;
        static MAXIMUM_TOTAL_DISCOUNT_AMOUNT_EXCEEDED_SUBTOTAL: string;
        static PRICE_OVERRIDE_NOT_VALID_ONE_OR_MORE_ITEMS: string;
        static PRICE_OVERRIDE_PRICE_EXCEEDS_MAXIMUM_DEVICE_PRICE: string;
        static PRICE_OVERRIDE_NO_ITEM_SELECTED: string;
        static PRICE_OVERRIDE_PRODUCT_IS_VOIDED: string;
        static PRICE_OVERRIDE_PRICE_CANNOT_BE_NEGATIVE: string;
        static PRICE_OVERRIDE_INVALID_PRICE: string;
        static PRICE_OVERRIDE_PRICE_NOT_A_NUMBER: string;
        static PRICE_OVERRIDE_PRODUCT_IS_FOR_A_RECEIPT: string;
        static PRICE_OVERRIDE_PRODUCT_IS_FOR_A_GIFT_CERTIFICATE: string;
        static PRICE_OVERRIDE_PRICE_CANNOT_BE_ZERO: string;
        static PRICE_OVERRIDE_PRICE_MUST_BE_POSITIVE: string;
        static PRICE_OVERRIDE_ONLY_LOWER_AMOUNTS_ALLOWED: string;
        static PRICE_OVERRIDE_ONLY_HIGHER_AMOUNTS_ALLOWED: string;
        static PRICE_OVERRIDE_ONLY_LOWER_OR_EQUAL_AMOUNTS_ALLOWED: string;
        static PRICE_OVERRIDE_ONLY_HIGHER_OR_EQUAL_AMOUNTS_ALLOWED: string;
        static PRICE_OVERRIDE_NOT_ALLOWED_FOR_PRODUCT: string;
        static PRICE_OVERRIDE_NONE_ALLOWED: string;
        static CHANGE_SALES_PERSON_INVALID_CART_MODE: string;
        static SET_QUANTITY_NOT_VALID_ONE_OR_MORE_ITEMS: string;
        static SET_QUANTITY_NOT_GREATER_THAN_ZERO: string;
        static SET_QUANTITY_NOT_IN_RANGE: string;
        static SET_QUANTITY_NOT_VALID_NO_ITEM_SELECTED: string;
        static SET_QUANTITY_NOT_A_NUMBER: string;
        static SET_QUANTITY_NOT_ZERO: string;
        static SET_QUANTITY_QUANTITY_EXCEEDS_MAXIMUM_DEVICE_QUANTITY: string;
        static SET_QUANTITY_NOT_VALID_FOR_UNIT_OF_MEASURE: string;
        static SET_QUANTITY_NOT_VALID_FOR_SERIALIZED_ITEM: string;
        static UNIT_OF_MEASURE_NOT_VALID_ONE_OR_MORE_ITEMS: string;
        static UNIT_OF_MEASURE_NOT_VALID_NO_ITEM_SELECTED: string;
        static UNIT_OF_MEASURE_NOT_VALID_NO_UNIT_OF_MEASURE: string;
        static UNIT_OF_MEASURE_NOT_VALID_NO_UNIT_OF_MEASURE_CONVERSIONS: string;
        static NOT_IMPLEMENTED: string;
        static KIT_BLOCKED_FOR_DISASSEMBLY_AT_REGISTER: string;
        static PERIPHERALS_HARDWARESTATION_NOTCONFIGURED: string;
        static PERIPHERALS_BARCODE_SCANNER_NOTFOUND: string;
        static PERIPHERALS_BARCODE_SCANNER_ENABLE_FAILED: string;
        static PERIPHERALS_MSR_NOTFOUND: string;
        static PERIPHERALS_MSR_ENABLE_FAILED: string;
        static PERIPHERALS_PRINTER_FAILED: string;
        static PERIPHERAL_PAYMENT_UNKNOWN_ERROR: string;
        static MICROSOFT_DYNAMICS_COMMERCE_HARDWARESTATION_PRINTER_ERROR: string;
        static MICROSOFT_DYNAMICS_COMMERCE_HARDWARESTATION_CASHDRAWER_ERROR: string;
        static MICROSOFT_DYNAMICS_COMMERCE_HARDWARESTATION_SCALE_ERROR: string;
        static MICROSOFT_DYNAMICS_COMMERCE_HARDWARESTATION_PAYMENTTERMINAL_ERROR: string;
        static MICROSOFT_DYNAMICS_COMMERCE_HARDWARESTATION_DUALDISPLAY_ERROR: string;
        static MICROSOFT_DYNAMICS_COMMERCE_HARDWARESTATION_PERIPHERALNOTFOUND: string;
        static MICROSOFT_DYNAMICS_COMMERCE_HARDWARESTATION_PAIRINGERROR: string;
        static MICROSOFT_DYNAMICS_COMMERCE_HARDWARESTATION_TOKENVALIDATIONFAILED: string;
        static MICROSOFT_DYNAMICS_COMMERCE_HARDWARESTATION_PINPAD_ERROR: string;
        static MICROSOFT_DYNAMICS_COMMERCE_HARDWARESTATION_SIGNATURECAPTURE_ERROR: string;
        static MICROSOFT_DYNAMICS_COMMERCE_HARDWARESTATION_LINEDISPLAY_ERROR: string;
        static MICROSOFT_DYNAMICS_COMMERCE_HARDWARESTATION_LINEDISPLAY_CHARACTERSETNOTSUPPORTED: string;
        static MICROSOFT_DYNAMICS_COMMERCE_HARDWARESTATION_PERIPHERALISLOCKED: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTCONNECTORNOTFOUND: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CUSTOMERACCOUNTPAYMENTISNOTALLOWEDFORCUSTOMERORDERDEPOSITANDCANCELLATION: string;
        static AMOUNT_IS_NOT_VALID: string;
        static SHIFT_IS_NOT_VALID: string;
        static OPERATION_NOT_ALLOWED_PRODUCT_IS_VOIDED: string;
        static OPERATION_NOT_ALLOWED_PRODUCT_IS_FOR_A_RECEIPT: string;
        static OPERATION_NOT_ALLOWED_PRODUCT_IS_FOR_A_GIFT_CERTIFICATE: string;
        static OPERATION_NOT_ALLOWED_LINKED_PRODUCT: string;
        static OPERATION_NOT_ALLOWED_MULTIPLE_CART_LINES: string;
        static OPERATION_NOT_ALLOWED_INCOME_EXPENSE_TRANSACTION: string;
        static OPERATION_NOT_ALLOWED_TIME_CLOCK_DISABLED: string;
        static OPERATION_NOT_ALLOWED_FINISH_CURRENT_TRANSACTION: string;
        static RECEIPT_EMAIL_IS_EMPTY: string;
        static OPERATION_NOT_ALLOWED_PERMISSION_DENIED: string;
        static OPERATION_VALIDATION_INVALID_ARGUMENTS: string;
        static OPERATION_NOT_ALLOWED_NO_CART_LINE_SELECTED: string;
        static OPERATION_NOT_ALLOWED_IN_NONDRAWER_MODE: string;
        static OPERATION_NOT_ALLOWED_NO_PAYMENT_LINE_SELECTED: string;
        static OPERATION_NOT_ALLOWED_MULTIPLE_PAYMENT_LINES: string;
        static OPERATION_NOT_ALLOWED_IN_OFFLINE_STATE: string;
        static INVALID_AFFILIATION_COLLECTION: string;
        static MISSING_CARTLINE_ON_APPLY_TAX_OVERRDE: string;
        static NO_TAX_OVERRIDE_REASON_CODES_CONFIGURED: string;
        static CANNOT_SWITCH_ONLINE_CART_IN_PROGRESS: string;
        static CANNOT_SWITCH_OFFLINE_NOT_AVAILABLE: string;
        static CANNOT_SWITCH_TRANSFER_FAILED: string;
        static SIGNATURE_INVALID_FORMAT: string;
        static ASYNC_CLIENT_ZERO_DOWNLOAD_SESSION: string;
        static ASYNC_CLIENT_EMPTY_UPLOAD_JOB_DEFINITION: string;
        static ASYNC_CLIENT_NO_TRANSACTION_DATA: string;
        static ASYNC_CLIENT_CANNOT_LOAD_OFFLINE_TRANSACTION_DATA: string;
        static ASYNC_CLIENT_FAIL_PURGE_OFFLINE_TRANSACTION_DATA: string;
        static ASYNC_CLIENT_FAIL_DOWNLOAD_FILE: string;
        static ASYNC_CLIENT_FAIL_APPLY_FILE_TO_OFFLINE_DATABASE: string;
        static ASYNC_CLIENT_FAIL_UPDATE_DOWNLOAD_SESSION_STATUS: string;
        static ASYNC_CLIENT_FAIL_RETRIEVE_INITIAL_DATA_SYNC_INDICATOR: string;
        static ASYNC_CLIENT_OFFLINE_NOT_ENABLED_ON_TERMINAL: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_HEADQUARTERTRANSACTIONSERVICEMETHODCALLFAILURE: string;
        static EMPLOYEE_NOT_FOUND: string;
        static GENERICCOMMERCEERROR: string;
        static GENERICERRORMESSAGE: string;
        static GENERICVALIDATIONERROR: string;
        static ISASSOCIATEDVALIDATIONERROR: string;
        static ISNOTASSOCIATEDVALIDATIONERROR: string;
        static ISNOTAUTHENTICATEDVALIDATIONERROR: string;
        static ITEMSVALIDATIONERROR: string;
        static LINEIDSVALIDATIONERROR: string;
        static LISTINGSVALIDATIONERROR: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_DUPLICATEOBJECT: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INSUFFICIENTQUANTITYONHAND: string;
        static INVALID_CURRENCY_AMOUNT: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDCARTSALESLINEADD: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDFORMAT: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_LASTCHANGEVERSIONMISMATCH: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_OBJECTNOTFOUND: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_EXTENSIBLETRANSACTIONTYPENOTFOUND: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_REQUIREDVALUENOTFOUND: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_UNKNOWNREQUEST: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_UNSUPPORTEDLANGUAGE: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_VALUEOUTOFRANGE: string;
        static NAMEVALIDATIONERROR: string;
        static PAYMENTSVALIDATIONERROR: string;
        static PROMOTIONCODEVALIDATIONERROR: string;
        static SAVEDSHOPPINGCARTIDVALIDATIONERROR: string;
        static SHIPPINGOPTIONSLINEITEMSELECTION: string;
        static SHIPPINGOPTIONSPICKUP: string;
        static SHIPPINGOPTIONSSHIPTONEWADDRESS: string;
        static SHIPPINGOPTIONSVALIDATIONERROR: string;
        static SHOPPINGCARTIDSVALIDATIONERROR: string;
        static SHOPPINGCARTIDVALIDATIONERROR: string;
        static STORELOCATORBINGMAPSTOKENEMPTY: string;
        static STORELOCATORINVALIDDISTANCE: string;
        static STORELOCATORINVALIDLOCATION: string;
        static STORELOCATORUNABLETOGETCOORDINATES: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDCARTVERSION: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_AGGREGATECOMMUNICATIONERROR: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_APPLICATIONCOMPOSITIONFAILED: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CANNOTRETURNMORETHANPURCHASED: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CONFIGURATIONSETTINGNOTFOUND: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_DUPLICATEDEFAULTNOTIFICATIONHANDLERENCOUNTERED: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_EMPTYINVENTORYUNITOFMEASUREFORITEM: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_EXTERNALPROVIDERERROR: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_HEADQUARTERCOMMUNICATIONFAILURE: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_HEADQUARTERRESPONSEPARSINGERROR: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDCARTSTATE: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDCHANNELCONFIGURATION: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDCONFIGURATIONKEYFORMAT: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDCONNECTIONSTRING: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDPIPELINECONFIGURATION: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDPROVIDERCONFIGURATION: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDRUNTIMECONTEXT: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDSERVERRESPONSE: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_SERVICEINITIALIZATIONFAILED: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_SERVICENOTFOUND: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_UNABLETOCOMPUTESALESTAXGROUPFORADDRESS: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_UNABLETOFINDDEFAULTHANDLER: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_UNABLETOFINDDELIVERYOPTIONS: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_UNABLETOFINDINVENTORYFORITEM: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_AGGREGATEVALIDATIONERROR: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_AUTHENTICATIONFAILED: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_AUTHORIZATIONFAILED: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_COUPONISVALIDFORCURRENTSESSION: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CRITICALSTORAGEERROR: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_DISCOUNTAMOUNTINVALIDATED: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_DISCOUNTISALLOWEDONLYFORCREATIONANDEDITION: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_IDMISMATCH: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INSUFFICIENTQUANTITYAVAILABLE: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDCHANGETRACKINGCONFIGURATION: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDPRICEENCOUNTERED: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDREQUEST: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDSHIPPINGADDRESS: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDSQLCOMMAND: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_ITEMDISCONTINUEDFROMCHANNEL: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_OBJECTVERSIONMISMATCHERROR: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PROVIDERCOMMUNICATIONFAILURE: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_REQUESTEDITEMISOUTOFSTOCK: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_UNITOFMEASURECONVERSIONNOTFOUND: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_DEFAULTCUSTOMERNOTFOUND: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_BARCODENOTFOUND: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_LINKEDITEMSEARCHBYBARCODENOTSUPPORTED: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_QUOTEMUSTNOTHAVEDEPOSITOVERRIDE: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_QUOTEMUSTHAVEVALIDQUOTATIONEXPIRYDATE: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDPICKUPDEPOSITOVERRIDEAMOUNT: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_SALESLINEMUSTHAVEPICKUPDELIVERYMODE: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_UNABLETOPICKUPMORETHANQTYREMAINING: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_ORDERWASNOTCREATEDWITHDEPOSITOVERRIDE: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_MULTIPLEEMPLOYEETOTALDISCOUNTSNOTALLOWED: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_MULTIPLEEMPLOYEELINEDISCOUNTSNOTALLOWED: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CANNOTSUSPENDCARTWITHACTIVETENDERLINES: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_TERMINALHASANOPENSHIFT: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CASHDRAWERHASANOPENSHIFT: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_SHIFTVALIDATIONERROR: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_SHIFTALREADYOPENONDIFFERENTTERMINAL: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_SHIFTSTARTINGAMOUNTNOTENTERED: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_SHIFTTENDERDECLARATIONAMOUNTNOTENTERED: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CANNOTCHANGECUSTOMERIDWHENEDITINGCUSTOMERORDER: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDSHIPPINGDATE: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CURRENCYCHANNELORDERMISMATCH: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CURRENCYNOTFOUND: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_DEPOSITMUSTBEGREATERTHANZERO: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_DEPOSITOVERRIDEMUSTNOTBEGREATERTHANTOTALAMOUNT: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_DEPOSITOVERRIDEMAYNOTBECHANGED: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_DEPOSITOVERRIDEMAYNOTBECLEARED: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTUSINGUNAUTHORIZEDACCOUNT: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_EMPLOYEEDISCOUNTEXCEEDED: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_MAXCOUNTINGDIFFERENCEEXCEEDED: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CHANGETENDERTYPENOTSUPPORTED: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_ELEVATEDUSERSAMEASLOGGEDONUSER: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_UNABLETOGENERATETOKEN: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTKEYNOTFOUND: string;
        static BAD_REQUEST: string;
        static NOT_AUTHORIZIED: string;
        static FORBIDDEN: string;
        static PRECONDITION_FAILED: string;
        static SERVICE_UNAVAILABLE: string;
        static SERVER_TIMEOUT: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDCARDEXPIRATIONDATE: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_UNABLETOAUTHORIZEPAYMENT: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_VOIDTRANSACTIONCONTAINSTENDEREDLINES: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_LOYALTYCARDALREADYISSUED: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CUSTOMERNOTFOUND: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDLOYALTYCARDNUMBER: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_BLOCKEDLOYALTYCARD: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_NOTENDERLOYALTYCARD: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CONFLICTLOYALTYCARDCUSTOMERANDTRANSACTIONCUSTOMER: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDDEVICE: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CDXREALTIMESERVICEFAILURE: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_NOTENOUGHREWARDPOINTS: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_NOMORETHANONELOYALTYTENDER: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_AMOUNTDUEMUSTBEPAIDBEFORECHECKOUT: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDPAYMENTREQUEST: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTALREADYVOIDED: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDADDRESS: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_NOPRICEOVERRIDEFORRETURNS: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_NOPRICEOVERRIDEFORGIFTCARDS: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTAMOUNTEXCEEDSGIFTBALANCE: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_NOMORETHANONEOPERATIONWITHAGIFTCARD: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CANNOTADDNONPRODUCTITEMTOCUSTOMERORDER: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_USEEXISTINGSHIFTPERMISSIONDENIED: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_SHIFTNOTFOUND: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CUSTOMERACCOUNTDEPOSITMULTIPLECARTLINESNOTALLOWED: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CUSTOMERACCOUNTNUMBERISNOTSET: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CANNOTPAYFORCUSTOMERACCOUNTDEPOSITWITHCUSTOMERACCOUNTPAYMENTMETHOD: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CUSTOMERACCOUNTDEPOSITCANNOTBEVOIDED: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CUSTOMERACCOUNTDEPOSITCARTTYPEMISMATCH: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_NONDRAWEROPERATIONSONLY: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CANNOTSUSPENDCARTWITHACTIVEGIFTCARDSALESLINES: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_RETURNITEMPRICEEXCEEDED: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_RETURNTRANSACTIONTOTALEXCEEDED: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PROPERTYUPDATENOTALLOWED: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDQUANTITY: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDCUSTOMERORDERMODEFORADDCARTLINE: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDCUSTOMERORDERMODEFORVOIDPRODUCTS: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_REMOTEPRODUCTSNOTSUPPORTEDWITHCURRENTTRANSACTIONTYPE: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_REFUNDAMOUNTMORETHANALLOWED: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_VIEWTIMECLOCKNOTENABLED: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_ITEMQUANTITYEXCEEDED: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_TIMECLOCKNOTENABLED: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDUNITOFMEASURE: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_SETTLEINVOICEFAILED: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_NOPRICEOVERRIDEFORINVOICELINES: string;
        static MICROSOFT_DYNAMICS_SERVER_INTERNAL_ERROR: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CARTNOTFOUND: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CARTNOTACTIVE: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INCOMEEXPENSECARTDOESNOTALLOWSALESLINE: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INCOMEEXPENSECARTDOESNOTALLOWCUSTOMER: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_GIFTCARDUNLOCKFAILED: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_UNLOCKREGISTERFAILED: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_OFFLINEDATABASECHUNKFILENOTFOUND: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CHANGEPASSWORDFAILED: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_RESETPASSWORDFAILED: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CHANNELDATABASECONNECTIONFAILED: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_REALTIMESERVICECONNECTIONFAILED: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_SALESMUSTHAVEQUANTITYGREATERTHANZERO: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_UNABLETOCAPTUREPAYMENT: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_SESSIONEXPIRED: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDAMOUNT: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INVALIDBAGNUMBER: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_BALANCEAMOUNTEXCEEDSMAXIMUMALLOWEDVALUE: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CHANGEBACKISNOTALLOWED: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INCORRECTPAYMENTAMOUNTSIGN: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_OVERTENDERAMOUNTEXCEEDSMAXIMUMALLOWEDVALUE: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEEDSMAXIMUMAMOUNTPERLINE: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEEDSMAXIMUMAMOUNTPERTRANSACTION: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEEDSMINIMUMAMOUNTPERLINE: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTEXCEEDSMINIMUMAMOUNTPERTRANSACTION: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PAYMENTMUSTBEUSEDTOFINALIZETRANSACTION: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PRODUCTISNOTACTIVE: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_PRODUCTISBLOCKED: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CANNOTRETURNMULTIPLETRANSACTIONS: string;
    }
    /**
     * Forward links for device activation errors.
     */
    class DeviceActivationErrorsForwardLinks {
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_CHANNELDATABASECONNECTIONFAILED: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_REALTIMESERVICECONNECTIONFAILED: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_TERMINALNOTASSIGNEDTOSTORE: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_USERNOTASSIGNEDTOSTORE: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_INCORRECTSTAFFIDORPASSWORD: string;
        static MICROSOFT_DYNAMICS_COMMERCE_RUNTIME_DEVICEALREADYACTIVATED: string;
        static SERVER_ERROR: string;
    }
    class ErrorHelper {
        private static AGGREGATED_ERROR_RESOUCEIDS;
        static MICROSOFT_DYNAMICS_SERVER_INTERNAL_ERROR: string;
        static isAggregatedErrorResourceId(errorResourceId: string): boolean;
        /**
         * Map response status code to error.
         *
         * @param {any} Error returned by retail server call.
         */
        static MapResponseStatusCodeToError(errorMessage: string, statusCode: number, err?: any): ProxyError;
        /**
         * Gets whether an error code is present in the error collection or not.
         * @param {string} errorType The error resource identifier.
         * @return {boolean} Whether an error code is present in the error collection or not.
         */
        static hasError(errors: ProxyError[], errorType: string): boolean;
        /**
        * Checks whether all the provided errors are retryable. If no error code is provided or an error is undefined,
        * then the errors will be treated as not retryable.
        *
        * @return {boolean} True if the error codes are retryable, false if the error codes are not retryable or not defined
        */
        static isRetryable(errors: ProxyError[]): boolean;
        /**
         * Gets a string with all error codes.
         * @param {ProxyError[]} errors the error collection.
         * @return {string} a formated string containing all error codes.
         */
        static getErrorResourceIds(errors: ProxyError[]): string;
        /**
         * Gets a string with all error messages.
         * @param {ProxyError[]} errors the error collection.
         * @return {string} a formated string containing all error messages.
         */
        static getErrorMessages(errors: ProxyError[]): string;
    }
}
declare module Commerce.Proxy {
    enum MessageType {
        Info = 0,
        Error = 1,
    }
    enum MessageBoxButtons {
        Default = 0,
        OKCancel = 1,
        YesNo = 2,
        RetryNo = 3,
    }
    enum DialogResult {
        Close = 0,
        OK = 1,
        Cancel = 2,
        Yes = 3,
        No = 4,
    }
    class NotificationHandler {
        /**
         * Display mulitple client filtered error message.
         *
         * @param {ProxyError[]} errors The array of errors.
         * @param {string} titleResourceId The resource id of the error title. (optional)
         * @return {IAsyncResult<DialogResult>} The async dialog result.
         */
        static displayClientErrors(errors: ProxyError[], titleResourceId?: string): IAsyncResult<DialogResult>;
        /**
        * Displays the specified error message.
        *
        * @param {string} resourceId The resource id of the error message.
        * @param {string} params The parameters. (optional)
        * @return {IAsyncResult<DialogResult>} The async dialog result.
        */
        static displayErrorMessage(resourceId: string, ...params: any[]): IAsyncResult<DialogResult>;
        /**
         * Returns the error message.
         *
         * @param {ProxyError[]} errors The error.
         */
        static getErrorMessage(errors: ProxyError): string;
        private static clientError(clientError);
    }
}
declare module Commerce.Proxy {
    /**
     * Error parser class.
     */
    class ErrorParser {
        private static CommerceExceptionType;
        private static DataValidationExceptionType;
        private static CartValidationExceptionType;
        private static StorageExceptionType;
        private static PaymentExceptionType;
        private static BarcodeWithLinkedItemNotSupportedExceptionType;
        private static MissingRequiredReasonCodeExceptionType;
        /**
         * Parses an error message.
         *
         * @param {any} error The error message.
         * @return {ProxyError[]} The collection of error messages.
         */
        static parseErrorMessage(error: any): ProxyError[];
        /**
         * Parses an error message sent from Hardware station.
         *
         * @param {any} error The error message.
         * @retunrs {ProxyError[]} The collection of error messages.
         */
        static parseHardwareStationErrorMessage(error: any): ProxyError[];
        static parseJSONError(errorString: string): ProxyError[];
        private static convertExceptionToErrors(serverException, exceptionType);
        private static getErrorsFromDataValidationFailures(failures);
        /**
         * Parses an error to get the error code and error message.
         *
         * @param {any} error The error message.
         * @retunrs {ProxyError[]} The collection of error messages.
         */
        private static parseError(error);
    }
}
declare module Commerce.Proxy {
    /**
     * Delegate for equality comparers
     */
    interface IEqualityComparer<T> {
        (left: T, right: T): boolean;
    }
    class ArrayExtensions {
        /**
         * Verifies whether the object array has elements.
         *
         * @param {any[]} array The array.
         * @return {boolean} True if the object has elements, false otherwise.
         */
        static hasElements(array: any[]): boolean;
        /**
         * Verifies whether the array has element.
         *
         * @param {T[]} array The array.
         * @param {T} element The element
         * @param {IEqualityComparer<T>} [equalityComparer] An equality comparer to compare values.
         * @return {boolean} True if the object has element, false otherwise.
         */
        static hasElement<T>(array: T[], element: T, equalityComparer?: IEqualityComparer<T>): boolean;
        /**
         * Returns distinct elements from an array.
         *
         * @param {T[]} array An array to remove duplicate elements from.
         * @param {IEqualityComparer<T>} [equalityComparer] An equality comparer to compare values.
         * @return {T[]} An array that contains distinct elements from the source array.
         */
        static distinct<T>(array: T[], equalityComparer?: IEqualityComparer<T>): T[];
        /**
         * Produces the set intersection of two arrays.
         *
         * @param {T[]} left An array whose distinct elements that also appear in right will be returned.
         * @param {T[]} right An array whose distinct elements that also appear in left will be returned.
         * @param {IEqualityComparer<T>} [equalityComparer] An equality comparer to compare values.
         * @return {T[]} An array that contains the elements that form the set intersection of two arrays.
         */
        static intersect<T>(left: T[], right: T[], equalityComparer?: IEqualityComparer<T>): T[];
        /**
         * Produces the set intersection of multiple arrays.
         *
         * @param {IEqualityComparer<T>} equalityComparer An equality comparer to compare values. (null for defaultEqualityComparer '==')
         * @param {...T[]} arrays Arrays whose distinct elements that also appear in all other arrays will be returned.
         * @return {T[]} An array that contains the elements that form the set intersection of arrays.
         */
        static intersectMultiple<T>(equalityComparer: IEqualityComparer<T>, ...arrays: T[][]): T[];
        /**
         * Produces the set difference of two arrays.
         *
         * @param {T[]} left An array whose elements that are not also in second will be returned.
         * @param {T[]} right whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.
         * @param {IEqualityComparer<T>} [equalityComparer] An equality comparer to compare values.
         * @return {T[]} A sequence that contains the set difference of the elements of two sequences.
         */
        static difference<T>(left: T[], right: T[], equalityComparer?: IEqualityComparer<T>): T[];
        /**
         * Produces the set union of two arrays.
         *
         * @param {T[]} left An array whose distinct elements form the first set for the union.
         * @param {T[]} right An array whose distinct elements form the second set for the union.
         * @param {IEqualityComparer<T>} [equalityComparer] An equality comparer to compare values.
         * @return {T[]} An array that contains the elements from both input sequences, excluding duplicates.
         */
        static union<T>(left: T[], right: T[], equalityComparer?: IEqualityComparer<T>): T[];
        /**
         * Produces the symmetrical difference of two arrays.
         *
         * @param {T[]} left An array whose distinct elements form the first set for the symmetric difference.
         * @param {T[]} right An array whose distinct elements form the second set for the symmetric difference.
         * @param {IEqualityComparer<T>} [equalityComparer] An equality comparer to compare values.
         * @return {T[]} An array that contains the elements in either of the arrays and not in their intersection.
         */
        static symmetricDifference<T>(left: T[], right: T[], equalityComparer?: IEqualityComparer<T>): T[];
        /**
         * Returns the first element of an array, or undefined if the sequence contains no elements.
         *
         * @param {T[]} array The array.
         * @param {(element: T) => boolean} [predicate] A function to test each element for a condition.
         * @return {boolean} undefined if array is empty or if no element passes the test specified by predicate; otherwise, the first element in source that passes the test specified by predicate.
         */
        static firstOrUndefined<T>(array: T[], predicate?: (element: T) => boolean): T;
        /**
         * Returns the last element of an array, or undefined if the sequence contains no elements.
         *
         * @param {T[]} array The array.
         * @param {(element: T) => boolean} [predicate] A function to test each element for a condition.
         * @return {boolean} undefined if array is empty or if no element passes the test specified by predicate; otherwise, the last element in source that passes the test specified by predicate.
         */
        static lastOrUndefined<T>(array: T[], predicate?: (element: T) => boolean): T;
        /**
         * Filters an array of values based on a predicate.
         *
         * @param {T[]} array The array.
         * @param {(element: T) => boolean} predicate A function to test each element for a condition.
         * @return {T[]} An array that contains elements from the input sequence that satisfy the condition.
         */
        static where<T>(array: T[], predicate: (element: T) => boolean): T[];
        /**
         * Computes the sum of the array of numeric values that are obtained by invoking a transform function on each element of the array.
         *
         * @param {T[]} array The array.
         * @param {(element: T) => number} selector A transform function to apply to each element.
         * @param {(element: T) => boolean} [predicate] A function to test each element for a condition.
         * @return {number} The sum of the projected values, 0 if array is empty or undefined if selector is not a function.
         */
        static sum<T>(array: T[], selector: (element: T) => number, predicate?: (element: T) => boolean): number;
        private static _differenceOrIntersect<T>(left, right, difference, equalityComparer?);
        private static _getDefaultEqualityComparer<T>();
        private static _getEqualityComparer<T>(equalityComparer?);
    }
}
declare module Commerce.Proxy {
    /**
     * Represents the result of asynchronous calls.
     */
    interface IAsyncResult<T> {
        /**
         * This function should be called when an async call succeeds.
         *
         * @param {(result: T) => void} callback The callback function.
         */
        done(callback: (result: T) => void): IAsyncResult<T>;
        /**
         * This function should be called when an error happens on an async call.
         *
         * @param {(error: ProxyError[]) => void} error The error callback function.
         */
        fail(callback: (error: ProxyError[]) => void): IAsyncResult<T>;
        /**
         * Calls a defined callback function on the result element, and returns a new async result with the mapped result.
         *
         * @param {(value: T) => U} mapFunction The function used to map the async result result from IAsyncResult<T> to IAsyncResult<U>.
         * @return {IAsyncResult<U>} The mapped async result.
         */
        map<U>(mapFunction: (value: T) => U): IAsyncResult<U>;
    }
    /**
     * Represents a null result.
     */
    interface NullResult {
    }
    /**
     * Represents the result of result-less asynchronous calls.
     */
    interface IVoidAsyncResult extends IAsyncResult<NullResult> {
        /**
         * This function should be called when an async call succeeds.
         *
         * @param {() => void} callback The callback function.
         */
        done(callback: () => void): IVoidAsyncResult;
        /**
         * This function should be called when an error happens on an async call.
         *
         * @param {(errors: ProxyError[]) => void} error The error callback function.
         */
        fail(callback: (errors: ProxyError[]) => void): IVoidAsyncResult;
        /**
         * Calls a defined callback function and returns a new async result with the mapped result.
         *
         * @param {() => U} mapFunction The function used to map the async result result from IAsyncResult<T> to IAsyncResult<U>.
         * @return {IAsyncResult<U>} The mapped async result.
         */
        map<U>(mapFunction: () => U): IAsyncResult<U>;
    }
    /**
     * Provides an interface for a cancelable result.
     */
    interface ICancelableResult {
        canceled: boolean;
    }
}
declare module Commerce.Proxy {
    /**
     * Instance of client proxy.
     */
    var Factory: IManagerFactory;
    interface IManagerFactory {
        /**
         * Creates an instance of given entity manager.
         *
         * @param {string} entityManagerInterface The interface name.
         */
        getManager<T>(entityManagerInterface: string): T;
        /**
         * Creates an instance of given entity manager.
         *
         * @param {string} entityManagerInterface The interface name.
         * @param {any} [callerContext] The optional reference to caller object.
         */
        GetManager(entityManagerInterface: string, callerContext?: any): any;
        /**
         * Updates the server Uri of the commerce context.
         *
         * @param {string} serverUri The new URI.
         */
        updateServerUriInCommerceContext(retailServerUri: string): any;
    }
}
declare module Commerce.Proxy {
    /*** IStoreManager ***/
    var IStoreOperationsManagerName: string;
    interface IStoreOperationsManager {
        roundAmountByTenderTypeAsync(amount: number, tenderTypeId: string): IAsyncResult<number>;
        voidSuspendedTransactionsAsync(suspendedCartIds: string[], shiftId: number, shiftTerminalId: string, reasonCodeLines: Entities.ReasonCodeLine[]): IVoidAsyncResult;
        getMerchantPropertiesByServiceAccountIdAsync(serviceAccountIds: string[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.PaymentMerchantInformation[]>;
        getStoreSafesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.StoreSafe[]>;
        getShiftReconciliationLinesAsync(shiftReconciliationLineRetrievalCriteria: Entities.ShiftReconciliationLineRetrievalCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ShiftReconciliationLine[]>;
        reconcileLinesAsync(shiftReconciliationLines: Entities.ShiftReconciliationLine[], description: string): IVoidAsyncResult;
        undoReconciliationAsync(shiftReconciliationLines: Entities.ShiftReconciliationLine[]): IVoidAsyncResult;
        getReceiptMasksAsync(receiptTransactionType: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ReceiptMask[]>;
        getSearchSuggestionsAsync(searchSuggestionCriteria: Entities.SearchSuggestionCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SearchSuggestion[]>;
        startSessionAsync(transactionId: string): IVoidAsyncResult;
        endSessionAsync(transactionId: string): IVoidAsyncResult;
        activateDeviceAsync(deviceNumber: string, terminalId: string, deviceId: string, forceActivate: boolean, deviceType: number): IAsyncResult<Entities.DeviceActivationResult>;
        massActivateDeviceAsync(deviceNumber: string, terminalId: string, deviceId: string, deviceType: number): IAsyncResult<Entities.DeviceActivationResult>;
        deactivateDeviceAsync(transactionId: string): IVoidAsyncResult;
        createHardwareStationTokenAsync(): IAsyncResult<Entities.CreateHardwareStationTokenResult>;
        validateHardwareStationTokenAsync(deviceNumber: string, hardwareStationToken: string): IAsyncResult<Entities.ValidateHardwareStationTokenResult>;
        getBarcodeByIdAsync(barcodeId: string): IAsyncResult<Entities.Barcode>;
        getButtonGridByIdAsync(buttonGridId: string): IAsyncResult<Entities.ButtonGrid>;
        getButtonGridsByIdsAsync(getButtonGridsByIdsCriteria: Entities.GetButtonGridsByIdsCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ButtonGrid[]>;
        getCardTypesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CardTypeInfo[]>;
        resolveCardTypesAsync(cardNumberPrefix: string, cardType: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CardTypeInfo[]>;
        getSupportedPaymentCardTypesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<string[]>;
        getCitiesAsync(countryRegionId: string, stateProvinceId: string, countyId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CityInfo[]>;
        getCountryRegionsForShippingAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CountryRegionInfo[]>;
        getCountryRegionsByLanguageIdAsync(languageId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CountryRegionInfo[]>;
        getCountiesAsync(countryRegionId: string, stateProvinceId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CountyInfo[]>;
        getCreditMemoByIdAsync(creditMemoId: string): IAsyncResult<Entities.CreditMemo>;
        getDownloadIntervalAsync(dataStoreName: string): IAsyncResult<string>;
        getTerminalDataStoreNameAsync(terminalId: string): IAsyncResult<string>;
        getDownloadLinkAsync(dataStoreName: string, downloadSessionId: number): IAsyncResult<string>;
        getDataDownloadParametersByTerminalAsync(terminalDataDownloadRequestInfo: Entities.TerminalDataDownloadRequestInfo): IAsyncResult<Entities.DataDownloadParameters>;
        getDataUploadParametersByTerminalAsync(terminalDataUploadRequestInfo: Entities.TerminalDataUploadRequestInfo): IAsyncResult<Entities.DataUploadParameters>;
        getDownloadSessionsAsync(dataStoreName: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.DownloadSession[]>;
        getInitialDownloadSessionsAsync(dataStoreName: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.DownloadSession[]>;
        getUploadJobDefinitionsAsync(dataStoreName: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<string[]>;
        getUploadIntervalAsync(dataStoreName: string): IAsyncResult<string>;
        postOfflineTransactionsAsync(offlineTransactionForMPOS: string[]): IAsyncResult<boolean>;
        getRetailTrialPlanOfferAsync(): IAsyncResult<boolean>;
        getLatestNumberSequenceAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.NumberSequenceSeedData[]>;
        getReceiptNumberResetInfoAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ReceiptNumberResetInfo[]>;
        getLoyaltyRewardPointActivityTimelineAsync(cardNumber: string, rewardPointId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.LoyaltyRewardPointActivity[]>;
        getLoyaltyRewardPointActivityTimelineForExpiredPointsAsync(cardNumber: string, rewardPointId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.LoyaltyRewardPointActivity[]>;
        calculateTotalCurrencyAmountAsync(currenciesAmount: Entities.CurrencyRequest[]): IAsyncResult<Entities.CurrencyAmount>;
        getDiscountCodeAsync(discountCode: string): IAsyncResult<Entities.DiscountCode>;
        getDiscountCodesByOfferIdAsync(offerId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.DiscountCode[]>;
        getDiscountCodesByKeywordAsync(keyword: string, activeDate: Date, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.DiscountCode[]>;
        getDistrictsAsync(countryRegionId: string, stateProvinceId: string, countyId: string, cityName: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.DistrictInfo[]>;
        getHardwareStationProfilesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.HardwareStationProfile[]>;
        getHardwareProfileByIdAsync(hardwareProfileId: string): IAsyncResult<Entities.HardwareProfile>;
        getLocalizedStringsAsync(languageId: string, textId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.LocalizedString[]>;
        getOperationPermissionByIdAsync(operationId: number): IAsyncResult<Entities.OperationPermission>;
        getReasonCodesByIdAsync(reasonCodeGroupId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ReasonCode[]>;
        searchReportDataSetAsync(reportId: string, parameters: Entities.CommerceProperty[]): IAsyncResult<Entities.ReportDataSet>;
        getReportDataSetByIdAsync(reportId: string): IAsyncResult<Entities.ReportDataSet>;
        getSrsReportDataSetAsync(reportId: string, parameters: Entities.CommerceProperty[]): IAsyncResult<Entities.ReportDataSet>;
        getIncomeExpenseAccountsAsync(incomeExpenseAccountType: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.IncomeExpenseAccount[]>;
        getStateProvincesAsync(countryRegionId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.StateProvinceInfo[]>;
        getZipCodesAsync(countryRegionId: string, stateProvinceId: string, countyId: string, cityName: string, district: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ZipCodeInfo[]>;
        getAddressFromZipCodeAsync(countryRegionId: string, zipPostalCode: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ZipCodeInfo[]>;
        disassembleKitTransactionsAsync(kitTransaction: Entities.KitTransaction): IAsyncResult<Entities.KitTransaction>;
        issueLoyaltyCardAsync(loyaltyCard: Entities.LoyaltyCard): IAsyncResult<Entities.LoyaltyCard>;
        getLoyaltyCardAsync(cardNumber: string): IAsyncResult<Entities.LoyaltyCard>;
        getCustomerLoyaltyCardsAsync(accountNumber: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.LoyaltyCard[]>;
        getLoyaltyCardTransactionsAsync(cardNumber: string, rewardPointId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.LoyaltyCardTransaction[]>;
        getLoyaltyRewardPointsExpiringSoonAsync(cardNumber: string, rewardPointId: string, daysToExpiry: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.LoyaltyRewardPointActivity[]>;
        searchJournalTransactionsAsync(searchCriteria: Entities.TransactionSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Transaction[]>;
        getGiftCardAsync(giftCardId: string, tenderTypeId: string, pin: string, expirationMonth: number, expirationYear: number): IAsyncResult<Entities.GiftCard>;
        getGiftCardInquiryAsync(giftCardId: string): IAsyncResult<Entities.GiftCard>;
        getNonSalesTransactionsAsync(shiftId: string, shiftTerminalId: string, nonSalesTenderTypeValue: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.NonSalesTransaction[]>;
        createNonSalesTransactionAsync(nonSalesTransaction: Entities.NonSalesTransaction): IAsyncResult<Entities.NonSalesTransaction>;
        createDropAndDeclareTransactionAsync(dropAndDeclareTransaction: Entities.DropAndDeclareTransaction): IAsyncResult<Entities.DropAndDeclareTransaction>;
        getTaxOverridesAsync(overrideBy: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.TaxOverride[]>;
        getCustomerBalanceAsync(accountNumber: string, invoiceAccountNumber: string): IAsyncResult<Entities.CustomerBalances>;
        initiateLinkToExistingCustomerAsync(email: string, activationToken: string, emailTemplateId: string, emailProperties: Entities.NameValuePair[]): IAsyncResult<Entities.LinkToExistingCustomerResult>;
        finalizeLinkToExistingCustomerAsync(email: string, activationToken: string): IAsyncResult<Entities.LinkToExistingCustomerResult>;
        unlinkFromExistingCustomerAsync(): IVoidAsyncResult;
        getOfflineSyncStatusAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.OfflineSyncStatsLine[]>;
        getOfflinePendingTransactionCountAsync(): IAsyncResult<number>;
        getOfflinePendingTransactionCountByShiftAsync(shiftId: number, shiftTerminalId: string): IAsyncResult<number>;
        updateDownloadSessionAsync(downloadSession: Entities.DownloadSession): IAsyncResult<boolean>;
        updateApplicationVersionAsync(appVersion: string): IVoidAsyncResult;
        getStorageAccessTokenForUploadAsync(): IAsyncResult<Entities.StorageAccessToken>;
        getBusinessProcessModelLibrariesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Framework[]>;
        getBusinessProcessModelLibraryAsync(businessProcessModelFrameworkLineId: number, hierarchyDepth: number): IAsyncResult<Entities.Framework>;
        searchTaskGuidesByTitleAsync(businessProcessModelFrameworkLineId: number, taskGuideSearchText: string, queryTypeValue: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.TaskGuidesSearchResult[]>;
        generateBusinessProcessModelPackageAsync(taskRecording: Entities.Recording): IAsyncResult<string>;
        downloadRecordingAsync(businessProcessModelLineId: number): IAsyncResult<Entities.Recording>;
        loadRecordingFromFileAsync(recordingUrl: string): IAsyncResult<Entities.Recording>;
        generateRecordingFileAsync(taskRecording: Entities.Recording): IAsyncResult<string>;
        generateTrainingDocumentAsync(taskRecording: Entities.Recording): IAsyncResult<string>;
        generateRecordingBundleAsync(taskRecording: Entities.Recording): IAsyncResult<string>;
        uploadRecordingAsync(taskRecording: Entities.Recording, businessProcessModelLineId: number): IVoidAsyncResult;
        getAttributeDefinitionsAsync(attributeDefinitionCriteria: Entities.AttributeDefinitionCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.AttributeDefinition[]>;
        getAttributeGroupDefinitionsAsync(attributeGroupDefinitionCriteria: Entities.AttributeGroupDefinitionCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.AttributeGroupDefinition[]>;
        saveFiscalTransactionAsync(fiscalTransaction: Entities.FiscalTransaction): IVoidAsyncResult;
        validatePrintReceiptCopyAllowedAsync(salesOrderToPrint: Entities.SalesOrder): IVoidAsyncResult;
        registerAuditEventAsync(auditEvent: Entities.AuditEvent): IVoidAsyncResult;
        registerAndGetAuditEventAsync(auditEvent: Entities.AuditEvent): IAsyncResult<Entities.AuditEvent>;
        getInventoryAvailableToPromiseAsync(productId: number, itemId: string, inventLocationId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.InventoryAvailableToPromise[]>;
        getSalesOrdersWithNoFiscalTransactionsAsync(storeNumber: string, terminalId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SalesOrder[]>;
        getNotificationsAsync(subscribedOperations: number[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.NotificationItem[]>;
        acknowledgeNotificationsAsync(lastPullDateTime: Date): IVoidAsyncResult;
        getFiscalIntegrationFiscalDocumentAsync(hardwareProfileId: string, functionalityProfileGroupId: string, fiscalIntegrationDocumentRetrievalCriteria: Entities.FiscalIntegrationDocumentRetrievalCriteria, connectorType: number): IAsyncResult<Entities.FiscalIntegrationDocument>;
        getFiscalIntegrationNonFiscalDocumentAsync(hardwareProfileId: string, functionalityProfileGroupId: string, fiscalIntegrationDocumentRetrievalCriteria: Entities.FiscalIntegrationDocumentRetrievalCriteria, connectorType: number): IAsyncResult<Entities.FiscalIntegrationDocument>;
        getFiscalIntegrationFiscalServiceSetupDocumentAsync(hardwareProfileId: string, functionalityProfileGroupId: string, connectorType: number): IAsyncResult<Entities.FiscalIntegrationDocument>;
        getFiscalIntegrationFiscalServiceReadDataDocumentAsync(hardwareProfileId: string, functionalityProfileGroupId: string, connectorType: number): IAsyncResult<Entities.FiscalIntegrationDocument>;
        processFiscalIntegrationFiscalServiceReadDataResultAsync(hardwareProfileId: string, functionalityProfileGroupId: string, documentToProcess: string, connectorType: number): IVoidAsyncResult;
        saveFiscalIntegrationRegistrationResultAsync(hardwareProfileId: string, functionalityProfileGroupId: string, registrationResult: Entities.FiscalIntegrationRegistrationResult, connectorType: number): IVoidAsyncResult;
        getFiscalIntegrationRegistrationProcessAsync(): IAsyncResult<Entities.FiscalIntegrationRegistrationProcess>;
        getChannelSupportedFiscalIntegrationEventsByGroupAsync(functionalityProfileGroupId: string): IAsyncResult<Entities.FiscalIntegrationSupportedEvents>;
        getFiscalIntegrationTechnicalProfilesAsync(hardwareProfileId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.FiscalIntegrationTechnicalProfile[]>;
        getFiscalIntegrationTechnicalProfilesByFunctionalityGroupIdsAsync(hardwareProfileId: string, functionalityProfileGroupId: string[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.FiscalIntegrationTechnicalProfile[]>;
        backupFiscalRegistrationProcessContextAsync(terminalId: string, storeNumber: string, channelId: number, fiscalProcessCompleted: boolean, fiscalIntegrationSerializedContext: string): IVoidAsyncResult;
        getActiveFiscalRegistrationProcessContextBackupAsync(terminalId: string, storeNumber: string, channelId: number): IAsyncResult<string>;
        getFiscalIntegrationTechnicalProfilesBySearchCriteriaAsync(hardwareProfileId: string, fiscalIntegrationTechnicalProfileSearchCriteria: Entities.FiscalIntegrationTechnicalProfileSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.FiscalIntegrationTechnicalProfile[]>;
        getFiscalIntegrationServiceStatusAsync(fiscalIntegrationServiceInfo: Entities.FiscalIntegrationServiceInfo): IAsyncResult<Entities.FiscalIntegrationServiceStatus>;
        submitFiscalIntegrationDocumentAsync(documentToSubmit: string, fiscalIntegrationServiceInfo: Entities.FiscalIntegrationServiceInfo): IAsyncResult<Entities.FiscalIntegrationServiceCommunicationResult>;
        getFeatureStatesAsync(featureNames: string[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.FeatureState[]>;
        getLastFiscalIntegrationSequentialSignaturesAsync(sequentialKeys: string[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.FiscalIntegrationSequentialSignatureData[]>;
        getAvailablePromotionsAsync(searchCriteria: Entities.DiscountsSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Promotion[]>;
        createFiscalTransactionAsync(functionalityProfileGroupId: string, registrationResult: Entities.FiscalIntegrationRegistrationResult, connectorType: number): IAsyncResult<Entities.FiscalTransaction>;
        getButtonGridsAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ButtonGrid[]>;
        getButtonGridsByScreenSizeAsync(height: number, width: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ButtonGrid[]>;
        getCashDeclarationsAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CashDeclaration[]>;
        getCountryRegionsAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CountryRegionInfo[]>;
        getCustomerGroupsAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CustomerGroup[]>;
        getDeliveryOptionsAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.DeliveryOption[]>;
        getChannelsByTypeAsync(channelType: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ChannelIdentity[]>;
        getChannelsAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ChannelIdentity[]>;
        getEnvironmentConfigurationAsync(): IAsyncResult<Entities.EnvironmentConfiguration>;
        getSearchConfigurationAsync(): IAsyncResult<Entities.SearchConfiguration>;
        getExtensionPackageDefinitionsAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ExtensionPackageDefinition[]>;
        getExtensionProfileAsync(): IAsyncResult<Entities.ExtensionProfile>;
        getDeviceConfigurationAsync(): IAsyncResult<Entities.DeviceConfiguration>;
        getVisualProfileAsync(): IAsyncResult<Entities.VisualProfile>;
        getLanguagesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SupportedLanguage[]>;
        getAffiliationsAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Affiliation[]>;
        getOperationPermissionsAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.OperationPermission[]>;
        getReasonCodesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ReasonCode[]>;
        getReturnOrderReasonCodesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ReasonCode[]>;
        getSalesTaxGroupsAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SalesTaxGroup[]>;
        getTenderTypesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.TenderType[]>;
        getUnitsOfMeasureAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.UnitOfMeasure[]>;
        getDiscountCodesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.DiscountCode[]>;
        getCurrenciesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Currency[]>;
        getCurrenciesAmountAsync(currencyCode: string, amount: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CurrencyAmount[]>;
        getCommissionSalesGroupsAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CommissionSalesGroup[]>;
        searchCommissionSalesGroupsAsync(searchText: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CommissionSalesGroup[]>;
        getPaymentMerchantInformationAsync(hardwareProfileId: string): IAsyncResult<Entities.PaymentMerchantInformation>;
        getPaymentPropertiesIfModifiedAsync(hardwareProfileId: string, merchantInformationHash: string): IAsyncResult<Entities.PaymentMerchantInformation>;
        getOnlineChannelPublishStatusAsync(): IAsyncResult<number>;
        setOnlineChannelPublishStatusAsync(publishingStatus: number, statusMessage: string): IVoidAsyncResult;
        getInventoryConfigurationAsync(): IAsyncResult<Entities.ChannelInventoryConfiguration>;
        getAvailableDevicesAsync(deviceType: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Device[]>;
        getImageBlobAsync(imageId: number): IAsyncResult<Entities.MediaBlob>;
        getExtensibleEnumerationsAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ExtensibleEnumerationContainer[]>;
        getAddressPurposesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.AddressPurpose[]>;
        getReturnPolicyAsync(): IAsyncResult<Entities.ReturnPolicy>;
    }
    /*** ICategoryManager ***/
    var ICategoryManagerName: string;
    interface ICategoryManager {
        createAsync(entity: Entities.Category): IAsyncResult<Entities.Category>;
        readAsync(recordId: number): IAsyncResult<Entities.Category>;
        readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Category[]>;
        updateAsync(entity: Entities.Category): IAsyncResult<Entities.Category>;
        deleteAsync(entity: Entities.Category): IVoidAsyncResult;
        getCategoriesAsync(channelId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Category[]>;
        getAttributesAsync(categoryId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.AttributeCategory[]>;
        getChildrenAsync(channelId: number, categoryId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Category[]>;
    }
    /*** ICartManager ***/
    var ICartManagerName: string;
    interface ICartManager {
        createAsync(entity: Entities.Cart): IAsyncResult<Entities.Cart>;
        readAsync(id: string): IAsyncResult<Entities.Cart>;
        readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Cart[]>;
        updateAsync(entity: Entities.Cart): IAsyncResult<Entities.Cart>;
        deleteAsync(entity: Entities.Cart): IVoidAsyncResult;
        checkoutAsync(id: string, receiptEmail: string, tokenizedPaymentCard: Entities.TokenizedPaymentCard, receiptNumberSequence: string, cartTenderLines: Entities.CartTenderLine[], cartVersion: number): IAsyncResult<Entities.SalesOrder>;
        getMaxLoyaltyPointsToRedeemForTransactionBalanceAsync(id: string, loyaltyCardId: string, currencyCode: string): IAsyncResult<Entities.LoyaltyPointRedemptionEstimate>;
        getPaymentsHistoryAsync(id: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.TenderLine[]>;
        getLineDeliveryOptionsByChannelIdAsync(id: string, lineShippingAddresses: Entities.LineShippingAddress[], channelId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SalesLineDeliveryOption[]>;
        getLineDeliveryOptionsAsync(id: string, lineShippingAddresses: Entities.LineShippingAddress[], filterOption: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SalesLineDeliveryOption[]>;
        getDeliveryPreferencesAsync(id: string): IAsyncResult<Entities.CartDeliveryPreferences>;
        getDeliveryOptionsAsync(id: string, shippingAddress: Entities.Address, cartLineIds: string[], filterOption: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.DeliveryOption[]>;
        updateLineDeliverySpecificationsAsync(id: string, lineDeliverySpecifications: Entities.LineDeliverySpecification[]): IAsyncResult<Entities.Cart>;
        updateDeliverySpecificationAsync(id: string, deliverySpecification: Entities.DeliverySpecification): IAsyncResult<Entities.Cart>;
        addChargeAsync(id: string, moduleTypeValue: number, chargeCode: string, amount: number): IAsyncResult<Entities.Cart>;
        overrideChargeAsync(id: string, chargeLineId: string, amount: number, reasonCodeLines: Entities.ReasonCodeLine[]): IAsyncResult<Entities.Cart>;
        addCartLineChargeAsync(id: string, cartLineId: string, moduleTypeValue: number, chargeCode: string, amount: number): IAsyncResult<Entities.Cart>;
        overrideCartLineChargeAsync(id: string, cartLineId: string, chargeLineId: string, amount: number, reasonCodeLines: Entities.ReasonCodeLine[]): IAsyncResult<Entities.Cart>;
        voidAsync(id: string, reasonCodeLines: Entities.ReasonCodeLine[], cartVersion: number): IAsyncResult<Entities.SalesOrder>;
        addCartLinesAsync(id: string, cartLines: Entities.CartLine[], cartVersion: number): IAsyncResult<Entities.Cart>;
        updateCartLinesAsync(id: string, cartLines: Entities.CartLine[], cartVersion: number): IAsyncResult<Entities.Cart>;
        voidCartLinesAsync(id: string, cartLines: Entities.CartLine[]): IAsyncResult<Entities.Cart>;
        removeCartLinesAsync(id: string, cartLineIds: string[]): IAsyncResult<Entities.Cart>;
        addTenderLineAsync(id: string, cartTenderLine: Entities.CartTenderLine, cartVersion: number): IAsyncResult<Entities.Cart>;
        calculateTenderDiscountAsync(id: string, tenderLine: Entities.TenderLine, cartVersion: number): IAsyncResult<Entities.TenderDiscountLine>;
        addPreprocessedTenderLineAsync(id: string, preprocessedTenderLine: Entities.TenderLine, cartVersion: number): IAsyncResult<Entities.Cart>;
        validateTenderLineForAddAsync(id: string, tenderLine: Entities.TenderLine): IVoidAsyncResult;
        updateTenderLineSignatureAsync(id: string, tenderLineId: string, signatureData: string): IAsyncResult<Entities.Cart>;
        getDeclinedOrVoidedCardReceiptsAsync(id: string, preprocessedTenderLine: Entities.TenderLine, receiptRetrievalCriteria: Entities.ReceiptRetrievalCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Receipt[]>;
        copyAsync(id: string, targetCartType: number): IAsyncResult<Entities.Cart>;
        addInvoicedSalesLinesToCartAsync(transactionId: string, invoicedSalesLinesIds: number[]): IAsyncResult<Entities.Cart>;
        voidTenderLineAsync(id: string, tenderLineId: string, reasonCodeLines: Entities.ReasonCodeLine[], isPreprocessed: boolean, forceVoid: boolean): IAsyncResult<Entities.Cart>;
        issueGiftCardAsync(id: string, giftCardId: string, amount: number, currencyCode: string, lineDescription: string, tenderTypeId: string): IAsyncResult<Entities.Cart>;
        refillGiftCardAsync(id: string, giftCardId: string, amount: number, currencyCode: string, lineDescription: string, tenderTypeId: string): IAsyncResult<Entities.Cart>;
        cashOutGiftCardAsync(id: string, giftCardId: string, amount: number, currencyCode: string, lineDescription: string, tenderTypeId: string): IAsyncResult<Entities.Cart>;
        suspendAsync(id: string): IAsyncResult<Entities.Cart>;
        suspendWithJournalAsync(id: string, journalCartId: string, receiptNumberSequence: string): IAsyncResult<Entities.Cart>;
        resumeAsync(id: string): IAsyncResult<Entities.Cart>;
        resumeFromReceiptIdAsync(receiptId: string): IAsyncResult<Entities.Cart>;
        removeDiscountCodesAsync(id: string, discountCodes: string[]): IAsyncResult<Entities.Cart>;
        getSuspendedAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Cart[]>;
        searchAsync(cartSearchCriteria: Entities.CartSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Cart[]>;
        overrideCartLinePriceAsync(id: string, cartLineId: string, price: number): IAsyncResult<Entities.Cart>;
        getCardPaymentAcceptPointAsync(id: string, cardPaymentAcceptSettings: Entities.CardPaymentAcceptSettings, extensionProperties: Entities.CommerceProperty[]): IAsyncResult<Entities.CardPaymentAcceptPoint>;
        retrieveCardPaymentAcceptResultAsync(resultAccessCode: string, extensionProperties: Entities.CommerceProperty[], cartId: string, settings: Entities.RetrievePaymentResultSettings): IAsyncResult<Entities.CardPaymentAcceptResult>;
        recallOrderAsync(transactionId: string, salesId: string): IAsyncResult<Entities.Cart>;
        recallQuoteAsync(transactionId: string, quoteId: string): IAsyncResult<Entities.Cart>;
        recalculateOrderAsync(id: string): IAsyncResult<Entities.Cart>;
        resetAllChargesAsync(id: string): IAsyncResult<Entities.Cart>;
        getPromotionsAsync(id: string): IAsyncResult<Entities.CartPromotions>;
        getAvailablePromotionsAsync(id: string, cartLineIds: string[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CartPromotionLine[]>;
        recallSalesInvoiceAsync(transactionId: string, invoiceId: string): IAsyncResult<Entities.Cart>;
        addOrderInvoiceAsync(id: string, invoiceId: string, lineDescription: string): IAsyncResult<Entities.Cart>;
        addInvoicesAsync(id: string, invoiceIds: string[]): IAsyncResult<Entities.Cart>;
        updateCommissionSalesGroupAsync(transactionId: string, cartLineId: string, commissionSalesGroup: string, isUserInitiated: boolean): IAsyncResult<Entities.Cart>;
        addCouponsAsync(id: string, couponCodes: string[], isLegacyDiscountCode: boolean): IAsyncResult<Entities.Cart>;
        removeCouponsAsync(id: string, couponCodes: string[]): IAsyncResult<Entities.Cart>;
        getChargeCodesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ChargeCode[]>;
        addDiscountCodeAsync(id: string, discountCode: string): IAsyncResult<Entities.Cart>;
        getReturnOptionsAsync(id: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.TenderTypeAmount[]>;
        validateForCheckoutAsync(id: string, cartVersion: number): IAsyncResult<Entities.CartLineValidationResults>;
    }
    /*** ICustomerManager ***/
    var ICustomerManagerName: string;
    interface ICustomerManager {
        createAsync(entity: Entities.Customer): IAsyncResult<Entities.Customer>;
        readAsync(accountNumber: string): IAsyncResult<Entities.Customer>;
        readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Customer[]>;
        updateAsync(entity: Entities.Customer): IAsyncResult<Entities.Customer>;
        deleteAsync(entity: Entities.Customer): IVoidAsyncResult;
        searchAsync(customerSearchCriteria: Entities.CustomerSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.GlobalCustomer[]>;
        searchByFieldsAsync(customerSearchByFieldCriteria: Entities.CustomerSearchByFieldCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.GlobalCustomer[]>;
        getByAccountNumbersAsync(accountNumbers: string[], searchLocationValue: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Customer[]>;
        createCustomerTimelineItemAsync(customerTimelineItem: Entities.CustomerTimelineItem): IAsyncResult<Entities.CustomerTimelineItem>;
        updateCustomerTimelineItemAsync(customerTimelineItem: Entities.CustomerTimelineItem): IAsyncResult<Entities.CustomerTimelineItem>;
        getOrderHistoryAsync(accountNumber: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SalesOrder[]>;
        getOrderShipmentsHistoryAsync(accountNumber: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.OrderShipments[]>;
        postNonTransactionalActivityLoyaltyPointsAsync(loyaltyCardId: string, channelId: number, affiliationId: number, activityTypeId: string): IVoidAsyncResult;
        getPurchaseHistoryAsync(accountNumber: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.PurchaseHistory[]>;
        getCustomerSearchFieldsAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CustomerSearchField[]>;
        getCustomerTimelineItemTypesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CustomerTimelineItemTypeMap[]>;
        getCustomerTimelineItemsAsync(accountNumber: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CustomerTimelineItem[]>;
        getCustomerTimelineRefinersAsync(accountNumber: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CustomerTimelineRefiner[]>;
        getTitlesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CustomerTitle[]>;
    }
    /*** IEmployeeManager ***/
    var IEmployeeManagerName: string;
    interface IEmployeeManager {
        createAsync(entity: Entities.Employee): IAsyncResult<Entities.Employee>;
        readAsync(staffId: string): IAsyncResult<Entities.Employee>;
        readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Employee[]>;
        updateAsync(entity: Entities.Employee): IAsyncResult<Entities.Employee>;
        deleteAsync(entity: Entities.Employee): IVoidAsyncResult;
        getActivitiesAsync(employeeActivitySearchCriteria: Entities.EmployeeActivitySearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.EmployeeActivity[]>;
        getManagerActivityViewAsync(employeeActivitySearchCriteria: Entities.EmployeeActivitySearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.EmployeeActivity[]>;
        registerActivityAsync(staffId: string, employeeActivityType: number): IAsyncResult<Date>;
        getAccessibleOrgUnitsAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.OrgUnit[]>;
        getLatestActivityAsync(): IAsyncResult<Entities.EmployeeActivity>;
        searchClientBookCustomersAsync(clientBookCustomerSearchCriteria: Entities.ClientBookCustomerSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ClientBookCustomer[]>;
        getClientBookSearchRefinersAsync(refinerSourceTypes: number[], searchCriteria: Entities.ClientBookCustomerSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ClientBookRefiner[]>;
        updateClientBookAsync(clientBookChanges: Entities.ClientBookChanges): IVoidAsyncResult;
        getCurrentEmployeeAsync(): IAsyncResult<Entities.Employee>;
    }
    /*** IChecklistManager ***/
    var IChecklistManagerName: string;
    interface IChecklistManager {
        createAsync(entity: Entities.Checklist): IAsyncResult<Entities.Checklist>;
        readAsync(recordId: number): IAsyncResult<Entities.Checklist>;
        readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Checklist[]>;
        updateAsync(entity: Entities.Checklist): IAsyncResult<Entities.Checklist>;
        deleteAsync(entity: Entities.Checklist): IVoidAsyncResult;
        searchChecklistsAsync(checklistSearchCriteria: Entities.ChecklistSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Checklist[]>;
        searchTasksAsync(taskSearchCriteria: Entities.TaskSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ChecklistTask[]>;
        createTaskAsync(createTask: Entities.ChecklistTask): IAsyncResult<Entities.ChecklistTask>;
        updateChecklistsAsync(updateChecklists: Entities.Checklist[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Checklist[]>;
        updateTasksAsync(updateTasks: Entities.ChecklistTask[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ChecklistTask[]>;
    }
    /*** ISalesOrderManager ***/
    var ISalesOrderManagerName: string;
    interface ISalesOrderManager {
        createAsync(entity: Entities.SalesOrder): IAsyncResult<Entities.SalesOrder>;
        readAsync(id: string): IAsyncResult<Entities.SalesOrder>;
        readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SalesOrder[]>;
        updateAsync(entity: Entities.SalesOrder): IAsyncResult<Entities.SalesOrder>;
        deleteAsync(entity: Entities.SalesOrder): IVoidAsyncResult;
        searchSalesTransactionsByReceiptIdAsync(receiptId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SalesOrder[]>;
        searchAsync(salesOrderSearchCriteria: Entities.SalesOrderSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SalesOrder[]>;
        searchOrdersAsync(orderSearchCriteria: Entities.OrderSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SalesOrder[]>;
        getReceiptsAsync(id: string, receiptRetrievalCriteria: Entities.ReceiptRetrievalCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Receipt[]>;
        sendReceiptAsync(searchCriteria: Entities.SearchReceiptCriteria, recipientAddresses: Entities.ElectronicAddress[]): IVoidAsyncResult;
        getGiftReceiptsAsync(id: string, salesLineNumbers: number[], receiptRetrievalCriteria: Entities.ReceiptRetrievalCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Receipt[]>;
        getByReceiptIdAsync(receiptId: string, orderStoreNumber: string, orderTerminalId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SalesOrder[]>;
        getSalesOrderDetailsByTransactionIdAsync(transactionId: string, searchLocationValue: number): IAsyncResult<Entities.SalesOrder>;
        getSalesOrderDetailsBySalesIdAsync(salesId: string): IAsyncResult<Entities.SalesOrder>;
        getSalesOrderDetailsByQuotationIdAsync(quotationId: string): IAsyncResult<Entities.SalesOrder>;
        shipFulfillmentLinesAsync(shipFulfillmentLines: Entities.ShipFulfillmentLine[]): IVoidAsyncResult;
        acceptFulfillmentLinesAsync(fulfillmentLineParameter: Entities.FulfillmentLineParameter[]): IVoidAsyncResult;
        pickFulfillmentLinesAsync(fulfillmentLineParameter: Entities.FulfillmentLineParameter[]): IVoidAsyncResult;
        packFulfillmentLinesAsync(fulfillmentLineParameter: Entities.FulfillmentLineParameter[]): IVoidAsyncResult;
        markFulfillmentLinesAsPackedAsync(fulfillmentLineParameter: Entities.FulfillmentLineParameter[]): IAsyncResult<string>;
        markAsPickedAsync(fulfillmentLineParameter: Entities.FulfillmentLineParameter[]): IVoidAsyncResult;
        getFulfillmentPickingListsAsync(pickingListFulfillmentLine: Entities.FulfillmentLineParameter[], hardwareProfileId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Receipt[]>;
        getFulfillmentLinesAsync(fulfillmentLineSearchCriteria: Entities.FulfillmentLineSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.FulfillmentLine[]>;
        getFulfillmentPackingSlipsAsync(packFulfillmentLines: Entities.FulfillmentLineParameter[], hardwareProfileId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Receipt[]>;
        getFulfillmentPackingSlipsByIdAsync(salesId: string, packingSlipId: string, hardwareProfileId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Receipt[]>;
        rejectFulfillmentLinesAsync(rejectFulfillmentLines: Entities.RejectFulfillmentLine[]): IVoidAsyncResult;
        getInvoicesBySalesIdAsync(salesId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SalesInvoice[]>;
        getOrderInvoicesAsync(customerId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.OrderInvoice[]>;
        getInvoicesAsync(invoiceSearchCriteria: Entities.InvoiceSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.OrderInvoice[]>;
        getInvoicedSalesLinesBySalesIdsAsync(salesIds: string[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SalesLine[]>;
        createPickingListAsync(salesId: string): IVoidAsyncResult;
        createPickingListForItemsAsync(salesId: string, pickAndPackSalesLineParameters: Entities.PickAndPackSalesLineParameter[]): IAsyncResult<string>;
        getPickingListsAsync(id: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.PickingList[]>;
        createPackingSlipAsync(salesId: string): IVoidAsyncResult;
        getPackingSlipsDataAsync(salesId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.PackingSlipData[]>;
    }
    /*** IShiftManager ***/
    var IShiftManagerName: string;
    interface IShiftManager {
        createAsync(entity: Entities.Shift): IAsyncResult<Entities.Shift>;
        readAsync(shiftId: number, terminalId: string): IAsyncResult<Entities.Shift>;
        readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Shift[]>;
        updateAsync(entity: Entities.Shift): IAsyncResult<Entities.Shift>;
        deleteAsync(entity: Entities.Shift): IVoidAsyncResult;
        upsertShiftsAsync(shifts: Entities.Shift[]): IAsyncResult<boolean>;
        upsertAndValidateShiftsAsync(shiftId: number, terminalId: string, shifts: Entities.Shift[]): IAsyncResult<boolean>;
        deleteShiftsAsync(): IAsyncResult<boolean>;
        openAsync(shiftId: number, cashDrawer: string, isShared: boolean): IAsyncResult<Entities.Shift>;
        closeAsync(shiftId: number, terminalId: string, transactionId: string, forceClose: boolean, hasOfflinePendingTransactions: boolean): IAsyncResult<Entities.Shift>;
        getSuspendedCartsByShiftAsync(shiftTerminalId: string, shiftId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SuspendedCart[]>;
        voidSuspendedCartsAsync(shiftId: number, terminalId: string): IVoidAsyncResult;
        saveTenderLinesAsync(shiftId: number, terminalId: string, tenderLines: Entities.ShiftTenderLine[]): IVoidAsyncResult;
        blindCloseAsync(shiftId: number, terminalId: string, transactionId: string, forceClose: boolean): IAsyncResult<Entities.Shift>;
        forceDeleteAsync(shiftId: number, terminalId: string, transactionId: string): IVoidAsyncResult;
        resumeAsync(shiftId: number, terminalId: string, cashDrawer: string): IAsyncResult<Entities.Shift>;
        useAsync(shiftId: number, terminalId: string): IAsyncResult<Entities.Shift>;
        suspendAsync(shiftId: number, terminalId: string, transactionId: string): IAsyncResult<Entities.Shift>;
        getByStatusAsync(statusValue: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Shift[]>;
        getByStatusFilterByUserRoleAsync(statusValue: number, filterByUserRole: boolean, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Shift[]>;
        getByRetrievalCriteriaAsync(shiftRetrievalCriteria: Entities.ShiftRetrievalCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Shift[]>;
        getXReportAsync(shiftId: number, terminalId: string, transactionId: string, hardwareProfileId: string): IAsyncResult<Entities.Receipt>;
        getZReportAsync(transactionId: string, hardwareProfileId: string): IAsyncResult<Entities.Receipt>;
        getOpenTenderLinesAsync(shiftId: number, terminalId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ShiftTenderLine[]>;
        validateCashDrawerLimitAsync(shiftTerminalId: string, shiftId: number): IVoidAsyncResult;
    }
    /*** IStockCountJournalManager ***/
    var IStockCountJournalManagerName: string;
    interface IStockCountJournalManager {
        createAsync(entity: Entities.StockCountJournal): IAsyncResult<Entities.StockCountJournal>;
        readAsync(journalId: string): IAsyncResult<Entities.StockCountJournal>;
        readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.StockCountJournal[]>;
        updateAsync(entity: Entities.StockCountJournal): IAsyncResult<Entities.StockCountJournal>;
        deleteAsync(entity: Entities.StockCountJournal): IVoidAsyncResult;
        syncAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.StockCountJournal[]>;
        syncTransactionsAsync(journalId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.StockCountJournalTransaction[]>;
        calculateEstimatedOnHandInventoryAsync(journalId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.StockCountJournalTransaction[]>;
        removeJournalAsync(journalId: string): IVoidAsyncResult;
        removeTransactionAsync(journalId: string, itemId: string, inventSizeId: string, inventColorId: string, inventStyleId: string, configurationId: string): IVoidAsyncResult;
        removeStockCountLineByLineIdAsync(journalId: string, stockCountLineId: number): IVoidAsyncResult;
        removeStockCountLineByProductRecIdAsync(journalId: string, productId: number): IVoidAsyncResult;
        commitAsync(journalId: string): IVoidAsyncResult;
    }
    /*** IOrgUnitManager ***/
    var IOrgUnitManagerName: string;
    interface IOrgUnitManager {
        createAsync(entity: Entities.OrgUnit): IAsyncResult<Entities.OrgUnit>;
        readAsync(orgUnitNumber: string): IAsyncResult<Entities.OrgUnit>;
        readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.OrgUnit[]>;
        updateAsync(entity: Entities.OrgUnit): IAsyncResult<Entities.OrgUnit>;
        deleteAsync(entity: Entities.OrgUnit): IVoidAsyncResult;
        getTillLayoutAsync(height: number, width: number): IAsyncResult<Entities.TillLayout>;
        searchAsync(storeSearchCriteria: Entities.SearchStoreCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.OrgUnit[]>;
        getOrgUnitLocationsByAreaAsync(searchArea: Entities.SearchArea, deliveryModeTypeFilter: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.OrgUnitLocation[]>;
        searchOrgUnitLocationsAsync(orgUnitLocationSearchCriteria: Entities.OrgUnitLocationSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.OrgUnitLocation[]>;
        getOrgUnitConfigurationAsync(): IAsyncResult<Entities.ChannelConfiguration>;
        getStoreHoursAsync(storeNumber: string): IAsyncResult<Entities.StoreHours>;
        getAvailableInventoryAsync(itemId: string, variantId: string, barcode: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.OrgUnitAvailability[]>;
        getAvailableInventoryNearbyAsync(itemIds: Entities.ItemUnit[], searchArea: Entities.SearchArea, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.OrgUnitAvailability[]>;
        getProductAvailabilityByDimensionsAsync(inventLocationIds: string[], productId: number, productDimensionCombinations: Entities.ProductDimensionCombination[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.OrgUnitAvailability[]>;
        searchProductAvailabilityAsync(productId: number, orgUnitAvailabilitySearchCriteria: Entities.OrgUnitAvailabilitySearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.OrgUnitAvailability[]>;
        getTerminalInfoAsync(orgUnitNumber: string, deviceType: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.TerminalInfo[]>;
        getProductAvailabilityAsync(productId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.OrgUnitAvailability[]>;
    }
    /*** IProductManager ***/
    var IProductManagerName: string;
    interface IProductManager {
        createAsync(entity: Entities.Product): IAsyncResult<Entities.Product>;
        readAsync(recordId: number): IAsyncResult<Entities.Product>;
        readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Product[]>;
        updateAsync(entity: Entities.Product): IAsyncResult<Entities.Product>;
        deleteAsync(entity: Entities.Product): IVoidAsyncResult;
        getDimensionValuesAsync(recordId: number, channelId: number, dimension: number, matchingDimensionValues: Entities.ProductDimension[], kitVariantResolutionContext: Entities.ProductVariantResolutionOnKitSelectionContext, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductDimensionValue[]>;
        getVariantsByDimensionValuesAsync(recordId: number, channelId: number, matchingDimensionValues: Entities.ProductDimension[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SimpleProduct[]>;
        getVariantsByComponentsInSlotsAsync(recordId: number, channelId: number, matchingSlotToComponentRelationship: Entities.ComponentInSlotRelation[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SimpleProduct[]>;
        getByIdsAsync(channelId: number, productIds: number[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SimpleProduct[]>;
        compareAsync(channelId: number, catalogId: number, productIds: number[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductComparisonLine[]>;
        getRecommendedProductsAsync(productIds: number[], customerId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductSearchResult[]>;
        refineSearchByCategoryAsync(channelId: number, catalogId: number, categoryId: number, refinementCriteria: Entities.ProductRefinerValue[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductSearchResult[]>;
        refineSearchByTextAsync(channelId: number, catalogId: number, searchText: string, refinementCriteria: Entities.ProductRefinerValue[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductSearchResult[]>;
        getProductSearchRefinersAsync(searchCriteria: Entities.ProductSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductRefiner[]>;
        searchAsync(productSearchCriteria: Entities.ProductSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Product[]>;
        getRefinersAsync(productSearchCriteria: Entities.ProductSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductRefiner[]>;
        changesAsync(productSearchCriteria: Entities.ChangedProductsSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Product[]>;
        beginReadChangedProductsAsync(changedProductSearchCriteria: Entities.ChangedProductsSearchCriteria): IAsyncResult<Entities.ReadChangedProductsSession>;
        readChangedProductsAsync(productSearchCriteria: Entities.ChangedProductsSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Product[]>;
        getDeletedListingsAsync(catalogId: number, skip: number, top: number): IAsyncResult<Entities.DeletedListingsResult>;
        getDeletedCatalogsAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<number[]>;
        getDeletedLanguagesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<string[]>;
        getProductRatingsAsync(productIds: number[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductRating[]>;
        getProductAssortmentIntervalsAsync(productIds: number[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductAssortmentInterval[]>;
        getDeliveryOptionsAsync(productIds: number[], address: Entities.Address, filterOption: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductDeliveryOptions[]>;
        deleteListingsByCatalogsAsync(catalogIds: number[]): IVoidAsyncResult;
        deleteListingsByLanguagesAsync(languages: string[]): IVoidAsyncResult;
        endReadChangedProductsAsync(session: Entities.ReadChangedProductsSession): IVoidAsyncResult;
        updateListingPublishingStatusAsync(publishingStatuses: Entities.ListingPublishStatus[]): IVoidAsyncResult;
        getPricesAsync(itemId: string, inventoryDimensionId: string, barcode: string, customerAccountNumber: string, unitOfMeasureSymbol: string, quantity: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductPrice[]>;
        getProductAvailabilitiesAsync(itemIds: number[], channelId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductAvailableQuantity[]>;
        getActivePricesAsync(projectDomain: Entities.ProjectionDomain, productIds: number[], activeDate: Date, customerId: string, affiliationLoyaltyTiers: Entities.AffiliationLoyaltyTier[], includeSimpleDiscountsInContextualPrice: boolean, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductPrice[]>;
        getFilteredSlotComponentsAsync(recordId: number, channelId: number, slotId: number, selectedComponents: Entities.ComponentInSlotRelation[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductComponent[]>;
        getComponentByProductSlotRelationAsync(channelId: number, componentRelation: Entities.ComponentInSlotRelation): IAsyncResult<Entities.ProductComponent>;
        getCategoryPathsAsync(channelId: number, catalogId: number, categoryPathLookups: Entities.CategoryPathLookup[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CategoryPathResult[]>;
        searchByCategoryAsync(channelId: number, catalogId: number, categoryId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductSearchResult[]>;
        searchByTextAsync(channelId: number, catalogId: number, searchText: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductSearchResult[]>;
        searchByCriteriaAsync(searchCriteria: Entities.ProductSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductSearchResult[]>;
        getByLookupClausesAsync(channelId: number, productLookupClauses: Entities.ProductLookupClause[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SimpleProduct[]>;
        getSearchSuggestionsAsync(channelId: number, catalogId: number, searchText: string, hitPrefix: string, hitSuffix: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SearchSuggestion[]>;
        getRefinersByCategoryAsync(catalogId: number, categoryId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductRefiner[]>;
        getRefinersByTextAsync(catalogId: number, searchText: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductRefiner[]>;
        getRefinerValuesByCategoryAsync(catalogId: number, categoryId: number, refinerId: number, refinerSourceValue: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductRefinerValue[]>;
        getRefinerValuesByTextAsync(catalogId: number, searchText: string, refinerId: number, refinerSourceValue: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductRefinerValue[]>;
        getChannelProductAttributesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.AttributeProduct[]>;
        getByIdAsync(recordId: number, channelId: number): IAsyncResult<Entities.SimpleProduct>;
        getAttributeValuesAsync(recordId: number, channelId: number, catalogId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.AttributeValue[]>;
        getMediaLocationsAsync(recordId: number, channelId: number, catalogId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.MediaLocation[]>;
        getMediaBlobsAsync(recordId: number, channelId: number, catalogId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.MediaBlob[]>;
        getDefaultComponentsAsync(recordId: number, channelId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductComponent[]>;
        getSlotComponentsAsync(recordId: number, channelId: number, slotId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductComponent[]>;
        getAllRelationTypesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductRelationType[]>;
        getRelationTypesAsync(recordId: number, channelId: number, catalogId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductRelationType[]>;
        getRelatedProductsAsync(recordId: number, channelId: number, catalogId: number, relationTypeId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductSearchResult[]>;
        getUnitsOfMeasureAsync(recordId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.UnitOfMeasure[]>;
        getApplicableWarrantiesAsync(catalogId: number, warrantableProductIds: number[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductWarrantiesMapping[]>;
        getPriceAsync(recordId: number, customerAccountNumber: string, unitOfMeasureSymbol: string): IAsyncResult<Entities.ProductPrice>;
        calculateProductPriceAsync(recordId: number, customerAccountNumber: string, unitOfMeasureSymbol: string, loyaltyCardId: string, affiliationLoyaltyTiers: Entities.AffiliationLoyaltyTier[]): IAsyncResult<Entities.ProductPrice>;
        getEstimatedProductWarehouseAvailabilityAsync(productWarehouses: Entities.ProductWarehouse[]): IAsyncResult<Entities.ProductWarehouseInventoryInformation>;
        getEstimatedAvailabilityAsync(searchCriteria: Entities.InventoryAvailabilitySearchCriteria): IAsyncResult<Entities.ProductWarehouseInventoryInformation>;
    }
    /*** IProductCatalogManager ***/
    var IProductCatalogManagerName: string;
    interface IProductCatalogManager {
        createAsync(entity: Entities.ProductCatalog): IAsyncResult<Entities.ProductCatalog>;
        readAsync(recordId: number): IAsyncResult<Entities.ProductCatalog>;
        readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductCatalog[]>;
        updateAsync(entity: Entities.ProductCatalog): IAsyncResult<Entities.ProductCatalog>;
        deleteAsync(entity: Entities.ProductCatalog): IVoidAsyncResult;
        getCatalogsAsync(channelId: number, activeOnly: boolean, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductCatalog[]>;
    }
    /*** ICommerceListManager ***/
    var ICommerceListManagerName: string;
    interface ICommerceListManager {
        createAsync(entity: Entities.CommerceList): IAsyncResult<Entities.CommerceList>;
        readAsync(id: number): IAsyncResult<Entities.CommerceList>;
        readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CommerceList[]>;
        updateAsync(entity: Entities.CommerceList): IAsyncResult<Entities.CommerceList>;
        deleteAsync(entity: Entities.CommerceList): IVoidAsyncResult;
        getByCustomerAsync(customerId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CommerceList[]>;
        addLinesAsync(id: number, commerceListLines: Entities.CommerceListLine[]): IAsyncResult<Entities.CommerceList>;
        updateLinesAsync(id: number, commerceListLines: Entities.CommerceListLine[]): IAsyncResult<Entities.CommerceList>;
        removeLinesAsync(id: number, commerceListLines: Entities.CommerceListLine[]): IAsyncResult<Entities.CommerceList>;
        moveLinesAsync(commerceListLines: Entities.CommerceListLine[], destinationId: number): IAsyncResult<Entities.CommerceList>;
        copyLinesAsync(commerceListLines: Entities.CommerceListLine[], destinationId: number): IAsyncResult<Entities.CommerceList>;
        addContributorsAsync(id: number, commerceListContributors: Entities.CommerceListContributor[]): IAsyncResult<Entities.CommerceList>;
        removeContributorsAsync(id: number, commerceListContributors: Entities.CommerceListContributor[]): IAsyncResult<Entities.CommerceList>;
        createInvitationsAsync(id: number, commerceListInvitations: Entities.CommerceListInvitation[]): IAsyncResult<Entities.CommerceList>;
        acceptInvitationAsync(invitationToken: string, customerId: string): IVoidAsyncResult;
    }
    /*** IProductListManager ***/
    var IProductListManagerName: string;
    interface IProductListManager {
        createAsync(entity: Entities.ProductList): IAsyncResult<Entities.ProductList>;
        readAsync(id: string): IAsyncResult<Entities.ProductList>;
        readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductList[]>;
        updateAsync(entity: Entities.ProductList): IAsyncResult<Entities.ProductList>;
        deleteAsync(entity: Entities.ProductList): IVoidAsyncResult;
        searchAsync(searchCriteria: Entities.ProductListSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductList[]>;
        getProductListLinesAsync(id: string, searchText: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductListLine[]>;
        addProductListLinesAsync(id: string, productListLines: Entities.ProductListLine[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductListLine[]>;
        updateProductListLinesAsync(id: string, productListLines: Entities.ProductListLine[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductListLine[]>;
        removeProductListLinesAsync(id: string, productListLines: Entities.ProductListLine[]): IVoidAsyncResult;
        copyCartToProductListAsync(id: string, cartId: string, isRewrite: boolean, isQuantityAggregate: boolean): IAsyncResult<Entities.ProductList>;
    }
    /*** IRecommendationManager ***/
    var IRecommendationManagerName: string;
    interface IRecommendationManager {
        createAsync(entity: Entities.Recommendation): IAsyncResult<Entities.Recommendation>;
        readAsync(id: string): IAsyncResult<Entities.Recommendation>;
        readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Recommendation[]>;
        updateAsync(entity: Entities.Recommendation): IAsyncResult<Entities.Recommendation>;
        deleteAsync(entity: Entities.Recommendation): IVoidAsyncResult;
        getElementsAsync(id: string, recommendationCriteria: Entities.RecommendationCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.RecommendedElement[]>;
    }
    /*** ITransferOrderManager ***/
    var ITransferOrderManagerName: string;
    interface ITransferOrderManager {
        createAsync(entity: Entities.TransferOrder): IAsyncResult<Entities.TransferOrder>;
        readAsync(orderId: string): IAsyncResult<Entities.TransferOrder>;
        readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.TransferOrder[]>;
        updateAsync(entity: Entities.TransferOrder): IAsyncResult<Entities.TransferOrder>;
        deleteAsync(entity: Entities.TransferOrder): IVoidAsyncResult;
        commitAsync(orderId: string, skipNotValidLines: boolean): IVoidAsyncResult;
        getTransferOrderLinesAsync(orderId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.TransferOrderLine[]>;
        createTransferOrderLinesAsync(orderId: string, transferOrderLines: Entities.TransferOrderLine[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.TransferOrderLine[]>;
        updateTransferOrderLinesAsync(orderId: string, transferOrderLines: Entities.TransferOrderLine[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.TransferOrderLine[]>;
        getTransferOrderCommentsAsync(orderId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Comment[]>;
        addTransferOrderCommentAsync(orderId: string, authorStaffId: string, commentText: string): IAsyncResult<Entities.Comment>;
        deleteTransferOrderLinesAsync(orderId: string, transferOrderLines: Entities.TransferOrderLine[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.TransferOrderLine[]>;
        getTransferOrderJournalsAsync(orderId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.TransferOrderJournal[]>;
        getTransferPackingSlipAsync(orderId: string, voucherId: string, receiptRetrievalCriteria: Entities.ReceiptRetrievalCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Receipt[]>;
    }
    /*** IPurchaseOrderManager ***/
    var IPurchaseOrderManagerName: string;
    interface IPurchaseOrderManager {
        createAsync(entity: Entities.PurchaseOrder): IAsyncResult<Entities.PurchaseOrder>;
        readAsync(orderId: string): IAsyncResult<Entities.PurchaseOrder>;
        readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.PurchaseOrder[]>;
        updateAsync(entity: Entities.PurchaseOrder): IAsyncResult<Entities.PurchaseOrder>;
        deleteAsync(entity: Entities.PurchaseOrder): IVoidAsyncResult;
        commitAsync(orderId: string): IVoidAsyncResult;
    }
    /*** IPickingListManager ***/
    var IPickingListManagerName: string;
    interface IPickingListManager {
        createAsync(entity: Entities.PickingList): IAsyncResult<Entities.PickingList>;
        readAsync(orderId: string): IAsyncResult<Entities.PickingList>;
        readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.PickingList[]>;
        updateAsync(entity: Entities.PickingList): IAsyncResult<Entities.PickingList>;
        deleteAsync(entity: Entities.PickingList): IVoidAsyncResult;
        commitAsync(orderId: string): IVoidAsyncResult;
    }
    /*** IWarehouseManager ***/
    var IWarehouseManagerName: string;
    interface IWarehouseManager {
        createAsync(entity: Entities.Warehouse): IAsyncResult<Entities.Warehouse>;
        readAsync(inventLocation: string): IAsyncResult<Entities.Warehouse>;
        readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Warehouse[]>;
        updateAsync(entity: Entities.Warehouse): IAsyncResult<Entities.Warehouse>;
        deleteAsync(entity: Entities.Warehouse): IVoidAsyncResult;
        searchWarehouseLocationsAsyncAsync(searchCriteria: Entities.WarehouseLocationSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.WarehouseLocation[]>;
        getWarehouseByIdAsync(inventLocation: string): IAsyncResult<Entities.Warehouse>;
        searchWarehousesAsync(searchText: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Warehouse[]>;
        getLocationsAsync(inventLocation: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.WarehouseLocation[]>;
        searchLocationsAsync(inventLocation: string, searchText: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.WarehouseLocation[]>;
        getAvailableFulfillmentLocationsAsync(deliveryModeTypeFilter: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Warehouse[]>;
    }
    /*** IScanResultManager ***/
    var IScanResultManagerName: string;
    interface IScanResultManager {
        createAsync(entity: Entities.ScanResult): IAsyncResult<Entities.ScanResult>;
        readAsync(scannedText: string): IAsyncResult<Entities.ScanResult>;
        readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ScanResult[]>;
        updateAsync(entity: Entities.ScanResult): IAsyncResult<Entities.ScanResult>;
        deleteAsync(entity: Entities.ScanResult): IVoidAsyncResult;
    }
    /*** ISalesOrderContextualOperationsMapManager ***/
    var ISalesOrderContextualOperationsMapManagerName: string;
    interface ISalesOrderContextualOperationsMapManager {
        createAsync(entity: Entities.SalesOrderContextualOperationsMap): IAsyncResult<Entities.SalesOrderContextualOperationsMap>;
        readAsync(id: string): IAsyncResult<Entities.SalesOrderContextualOperationsMap>;
        readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SalesOrderContextualOperationsMap[]>;
        updateAsync(entity: Entities.SalesOrderContextualOperationsMap): IAsyncResult<Entities.SalesOrderContextualOperationsMap>;
        deleteAsync(entity: Entities.SalesOrderContextualOperationsMap): IVoidAsyncResult;
        getOrdersAsync(orderSearchCriteria: Entities.OrderSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SalesOrderContextualOperationsMap[]>;
        getFulfillmentLinesAsync(fulfillmentLineSearchCriteria: Entities.FulfillmentLineSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.FulfillmentLineContextualOperationsMap[]>;
    }
    /*** IInventoryInboundOutboundDocumentManager ***/
    var IInventoryInboundOutboundDocumentManagerName: string;
    interface IInventoryInboundOutboundDocumentManager {
        createAsync(entity: Entities.InventoryInboundOutboundDocument): IAsyncResult<Entities.InventoryInboundOutboundDocument>;
        readAsync(workDocumentId: string): IAsyncResult<Entities.InventoryInboundOutboundDocument>;
        readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.InventoryInboundOutboundDocument[]>;
        updateAsync(entity: Entities.InventoryInboundOutboundDocument): IAsyncResult<Entities.InventoryInboundOutboundDocument>;
        deleteAsync(entity: Entities.InventoryInboundOutboundDocument): IVoidAsyncResult;
        updateStatusAsync(workDocumentId: string, documentStatus: number, documentVersion: number): IAsyncResult<Entities.InventoryInboundOutboundDocument>;
        updateLinesByCriteriaAsync(workDocumentId: string, filterCriteria: Entities.InventoryDocumentLineFilterCriteria, updateLinesAction: Entities.InventoryDocumentUpdateLinesAction, returnUpdatedLinesPolicy: Entities.InventoryDocumentLineOperationResultSettings): IAsyncResult<Entities.InventoryInboundOutboundDocumentUpdateLinesByCriteriaResult>;
        updateLineAsync(workDocumentId: string, documentLine: Entities.InventoryInboundOutboundDocumentLine): IAsyncResult<Entities.InventoryInboundOutboundDocumentLine>;
        updateWorkingTerminalAsync(workDocumentId: string, documentVersion: number): IAsyncResult<Entities.InventoryInboundOutboundDocument>;
        updateNoteAsync(workDocumentId: string, documentNote: string, documentVersion: number): IAsyncResult<Entities.InventoryInboundOutboundDocument>;
        updateReceiptIdAsync(workDocumentId: string, documentReceiptId: string, documentVersion: number): IAsyncResult<Entities.InventoryInboundOutboundDocument>;
        commitAsync(workDocumentId: string, documentVersion: number): IAsyncResult<Entities.InventoryInboundOutboundDocument>;
        refreshOperationStatusAsync(workDocumentId: string): IAsyncResult<Entities.InventoryInboundOutboundDocument>;
        startAsync(sourceDocumentId: string, sourceDocumentType: number): IAsyncResult<Entities.InventoryInboundOutboundDocument>;
        addLineAsync(workDocumentId: string, documentLine: Entities.InventoryInboundOutboundDocumentLine): IAsyncResult<Entities.InventoryInboundOutboundDocumentLine>;
        deleteLineAsync(workDocumentId: string, documentLineId: string, documentLineVersion: number): IVoidAsyncResult;
        searchSerialNumberLinesAsync(workDocumentId: string, searchCriteria: Entities.InventoryDocumentSerialNumberLineSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.InventoryDocumentSerialNumberLine[]>;
        validateAsync(workDocumentId: string, documentVersion: number): IAsyncResult<Entities.InventoryDocumentValidationResultSummary>;
        searchValidationResultLinesAsync(searchCriteria: Entities.InventoryDocumentValidationResultSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.InventoryDocumentValidationResultLine[]>;
        syncSourceDocumentAsync(sourceDocumentId: string, sourceDocumentType: number): IVoidAsyncResult;
        searchInboundDocumentsAsync(searchCriteria: Entities.InventoryDocumentSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.InventoryInboundOutboundDocument[]>;
        searchOutboundDocumentsAsync(searchCriteria: Entities.InventoryDocumentSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.InventoryInboundOutboundDocument[]>;
        searchLinesAsync(searchCriteria: Entities.InventoryDocumentLineSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.InventoryInboundOutboundDocumentLine[]>;
        resetSerialNumberLineAsync(workDocumentId: string, resetSerialNumberLineAction: Entities.InventoryDocumentSerialNumberLineResetAction): IAsyncResult<Entities.InventoryDocumentSerialNumberLine>;
        updateSerialNumberLineAsync(workDocumentId: string, updateSerialNumberLineAction: Entities.InventoryDocumentSerialNumberLineUpdateAction): IAsyncResult<Entities.InventoryDocumentSerialNumberLine>;
        getLinesSummaryAsync(workDocumentId: string): IAsyncResult<Entities.InventoryInboundOutboundDocumentLinesSummary>;
        getSerialNumberLinesSummaryAsync(workDocumentId: string, documentLineId: string): IAsyncResult<Entities.InventoryDocumentSerialNumberLinesSummary>;
    }
    /*** IBusinessPartnerManager ***/
    var IBusinessPartnerManagerName: string;
    interface IBusinessPartnerManager {
        createAsync(entity: Entities.BusinessPartner): IAsyncResult<Entities.BusinessPartner>;
        readAsync(businessPartnerId: string): IAsyncResult<Entities.BusinessPartner>;
        readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.BusinessPartner[]>;
        updateAsync(entity: Entities.BusinessPartner): IAsyncResult<Entities.BusinessPartner>;
        deleteAsync(entity: Entities.BusinessPartner): IVoidAsyncResult;
        createProspectAsync(businessPartnerProspect: Entities.BusinessPartnerProspect): IAsyncResult<Entities.BusinessPartnerProspect>;
        getCurrentAsync(): IAsyncResult<Entities.BusinessPartner>;
        getUsersAsync(businessPartnerId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.BusinessPartnerUser[]>;
    }
    /*** IBusinessPartnerUserManager ***/
    var IBusinessPartnerUserManagerName: string;
    interface IBusinessPartnerUserManager {
        createAsync(entity: Entities.BusinessPartnerUser): IAsyncResult<Entities.BusinessPartnerUser>;
        readAsync(email: string): IAsyncResult<Entities.BusinessPartnerUser>;
        readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.BusinessPartnerUser[]>;
        updateAsync(entity: Entities.BusinessPartnerUser): IAsyncResult<Entities.BusinessPartnerUser>;
        deleteAsync(entity: Entities.BusinessPartnerUser): IVoidAsyncResult;
    }
    /*** ISuspendedCartManager ***/
    var ISuspendedCartManagerName: string;
    interface ISuspendedCartManager {
        createAsync(entity: Entities.SuspendedCart): IAsyncResult<Entities.SuspendedCart>;
        readAsync(id: string): IAsyncResult<Entities.SuspendedCart>;
        readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SuspendedCart[]>;
        updateAsync(entity: Entities.SuspendedCart): IAsyncResult<Entities.SuspendedCart>;
        deleteAsync(entity: Entities.SuspendedCart): IVoidAsyncResult;
        getAllSuspendedCartsAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SuspendedCart[]>;
    }
}
declare module Commerce.Proxy {
    /**
     * Class represents retail server request factory.
     */
    class RetailServerRequestFactory implements Common.IDataServiceRequestFactory {
        locale: string;
        private _serverUri;
        private _operatingUnitNumber;
        private _authToken;
        constructor(serverUri: string, operatingUnitNumber: string, authToken: string);
        /**
         * Create a request.
         * @param {IDataServiceQueryInternal} dataServiceQuery The data service query.
         * @return {IDataServiceRequest} The data service request.
         */
        create(dataServiceQuery: Common.IDataServiceQueryInternal): Common.IDataServiceRequest;
    }
}
declare module Commerce.Proxy {
    class XhrHelper {
        private static ODATA_TOTAL_COUNT_PROPERTY;
        private static ODATA_HAS_NEXT_PAGE_PROPERTY;
        /**
         * Sets up jquery ajax call parameters.
         */
        static SetupAjaxParameters(): void;
        /**
         * Sets up the Odata's default http client using CORS-ready jquery calls.
         */
        static SetupODataParameters(): void;
        /**
         * Parses the odata result returned from server.
         *
         * @param {any} data The result returned from server.
         * @param {any} resultType The entity type to parse the result as.
         */
        static parseOdataResult(data: any, resultType: any): any;
    }
}
declare module Commerce.Proxy {
    class ManagerFactory implements Commerce.Proxy.IManagerFactory {
        private _commerceContext;
        private _odataEndpoint;
        private _operatingUnitNumber;
        private _authToken;
        private _locale;
        constructor(retailServerUrl: string, operatingUnitNumber?: string, authToken?: string, locale?: string);
        /**
         * Updates the server Uri of the commerce context.
         *
         * @param {string} serverUri The new URI.
         */
        updateServerUriInCommerceContext(retailServerUri: string): void;
        /**
         * Updates the locale of the commerce context.
         * @param {string} locale The new locale.
         */
        updateLocaleInCommerceContext(locale: string): void;
        /**
         * Creates an instance of given entity manager.
         *
         * @param {string} entityManagerInterface The interface name.
         */
        getManager<T>(entityManagerInterface: string): T;
        /**
         * Creates an instance of given entity manager.
         *
         * @param {string} entityManagerInterface The interface name.
         * @param {any} [callerContext] The optional reference to caller object.
         */
        GetManager(entityManagerInterface: string, callerContext?: any): any;
        private createDataServiceFactory();
    }
}
declare module Commerce.Proxy {
    /*** StoreOperationsManager ***/
    class StoreOperationsManager implements Commerce.Proxy.IStoreOperationsManager {
        private _commerceContext;
        private _callerContext;
        constructor(commerceContext: Commerce.Proxy.CommerceContext, callerContext: any);
        roundAmountByTenderTypeAsync(amount: number, tenderTypeId: string): IAsyncResult<number>;
        voidSuspendedTransactionsAsync(suspendedCartIds: string[], shiftId: number, shiftTerminalId: string, reasonCodeLines: Entities.ReasonCodeLine[]): IVoidAsyncResult;
        getMerchantPropertiesByServiceAccountIdAsync(serviceAccountIds: string[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.PaymentMerchantInformation[]>;
        getStoreSafesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.StoreSafe[]>;
        getShiftReconciliationLinesAsync(shiftReconciliationLineRetrievalCriteria: Entities.ShiftReconciliationLineRetrievalCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ShiftReconciliationLine[]>;
        reconcileLinesAsync(shiftReconciliationLines: Entities.ShiftReconciliationLine[], description: string): IVoidAsyncResult;
        undoReconciliationAsync(shiftReconciliationLines: Entities.ShiftReconciliationLine[]): IVoidAsyncResult;
        getReceiptMasksAsync(receiptTransactionType: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ReceiptMask[]>;
        getSearchSuggestionsAsync(searchSuggestionCriteria: Entities.SearchSuggestionCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SearchSuggestion[]>;
        startSessionAsync(transactionId: string): IVoidAsyncResult;
        endSessionAsync(transactionId: string): IVoidAsyncResult;
        activateDeviceAsync(deviceNumber: string, terminalId: string, deviceId: string, forceActivate: boolean, deviceType: number): IAsyncResult<Entities.DeviceActivationResult>;
        massActivateDeviceAsync(deviceNumber: string, terminalId: string, deviceId: string, deviceType: number): IAsyncResult<Entities.DeviceActivationResult>;
        deactivateDeviceAsync(transactionId: string): IVoidAsyncResult;
        createHardwareStationTokenAsync(): IAsyncResult<Entities.CreateHardwareStationTokenResult>;
        validateHardwareStationTokenAsync(deviceNumber: string, hardwareStationToken: string): IAsyncResult<Entities.ValidateHardwareStationTokenResult>;
        getBarcodeByIdAsync(barcodeId: string): IAsyncResult<Entities.Barcode>;
        getButtonGridByIdAsync(buttonGridId: string): IAsyncResult<Entities.ButtonGrid>;
        getButtonGridsByIdsAsync(getButtonGridsByIdsCriteria: Entities.GetButtonGridsByIdsCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ButtonGrid[]>;
        getCardTypesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CardTypeInfo[]>;
        resolveCardTypesAsync(cardNumberPrefix: string, cardType: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CardTypeInfo[]>;
        getSupportedPaymentCardTypesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<string[]>;
        getCitiesAsync(countryRegionId: string, stateProvinceId: string, countyId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CityInfo[]>;
        getCountryRegionsForShippingAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CountryRegionInfo[]>;
        getCountryRegionsByLanguageIdAsync(languageId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CountryRegionInfo[]>;
        getCountiesAsync(countryRegionId: string, stateProvinceId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CountyInfo[]>;
        getCreditMemoByIdAsync(creditMemoId: string): IAsyncResult<Entities.CreditMemo>;
        getDownloadIntervalAsync(dataStoreName: string): IAsyncResult<string>;
        getTerminalDataStoreNameAsync(terminalId: string): IAsyncResult<string>;
        getDownloadLinkAsync(dataStoreName: string, downloadSessionId: number): IAsyncResult<string>;
        getDataDownloadParametersByTerminalAsync(terminalDataDownloadRequestInfo: Entities.TerminalDataDownloadRequestInfo): IAsyncResult<Entities.DataDownloadParameters>;
        getDataUploadParametersByTerminalAsync(terminalDataUploadRequestInfo: Entities.TerminalDataUploadRequestInfo): IAsyncResult<Entities.DataUploadParameters>;
        getDownloadSessionsAsync(dataStoreName: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.DownloadSession[]>;
        getInitialDownloadSessionsAsync(dataStoreName: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.DownloadSession[]>;
        getUploadJobDefinitionsAsync(dataStoreName: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<string[]>;
        getUploadIntervalAsync(dataStoreName: string): IAsyncResult<string>;
        postOfflineTransactionsAsync(offlineTransactionForMPOS: string[]): IAsyncResult<boolean>;
        getRetailTrialPlanOfferAsync(): IAsyncResult<boolean>;
        getLatestNumberSequenceAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.NumberSequenceSeedData[]>;
        getReceiptNumberResetInfoAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ReceiptNumberResetInfo[]>;
        getLoyaltyRewardPointActivityTimelineAsync(cardNumber: string, rewardPointId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.LoyaltyRewardPointActivity[]>;
        getLoyaltyRewardPointActivityTimelineForExpiredPointsAsync(cardNumber: string, rewardPointId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.LoyaltyRewardPointActivity[]>;
        calculateTotalCurrencyAmountAsync(currenciesAmount: Entities.CurrencyRequest[]): IAsyncResult<Entities.CurrencyAmount>;
        getDiscountCodeAsync(discountCode: string): IAsyncResult<Entities.DiscountCode>;
        getDiscountCodesByOfferIdAsync(offerId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.DiscountCode[]>;
        getDiscountCodesByKeywordAsync(keyword: string, activeDate: Date, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.DiscountCode[]>;
        getDistrictsAsync(countryRegionId: string, stateProvinceId: string, countyId: string, cityName: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.DistrictInfo[]>;
        getHardwareStationProfilesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.HardwareStationProfile[]>;
        getHardwareProfileByIdAsync(hardwareProfileId: string): IAsyncResult<Entities.HardwareProfile>;
        getLocalizedStringsAsync(languageId: string, textId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.LocalizedString[]>;
        getOperationPermissionByIdAsync(operationId: number): IAsyncResult<Entities.OperationPermission>;
        getReasonCodesByIdAsync(reasonCodeGroupId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ReasonCode[]>;
        searchReportDataSetAsync(reportId: string, parameters: Entities.CommerceProperty[]): IAsyncResult<Entities.ReportDataSet>;
        getReportDataSetByIdAsync(reportId: string): IAsyncResult<Entities.ReportDataSet>;
        getSrsReportDataSetAsync(reportId: string, parameters: Entities.CommerceProperty[]): IAsyncResult<Entities.ReportDataSet>;
        getIncomeExpenseAccountsAsync(incomeExpenseAccountType: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.IncomeExpenseAccount[]>;
        getStateProvincesAsync(countryRegionId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.StateProvinceInfo[]>;
        getZipCodesAsync(countryRegionId: string, stateProvinceId: string, countyId: string, cityName: string, district: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ZipCodeInfo[]>;
        getAddressFromZipCodeAsync(countryRegionId: string, zipPostalCode: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ZipCodeInfo[]>;
        disassembleKitTransactionsAsync(kitTransaction: Entities.KitTransaction): IAsyncResult<Entities.KitTransaction>;
        issueLoyaltyCardAsync(loyaltyCard: Entities.LoyaltyCard): IAsyncResult<Entities.LoyaltyCard>;
        getLoyaltyCardAsync(cardNumber: string): IAsyncResult<Entities.LoyaltyCard>;
        getCustomerLoyaltyCardsAsync(accountNumber: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.LoyaltyCard[]>;
        getLoyaltyCardTransactionsAsync(cardNumber: string, rewardPointId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.LoyaltyCardTransaction[]>;
        getLoyaltyRewardPointsExpiringSoonAsync(cardNumber: string, rewardPointId: string, daysToExpiry: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.LoyaltyRewardPointActivity[]>;
        searchJournalTransactionsAsync(searchCriteria: Entities.TransactionSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Transaction[]>;
        getGiftCardAsync(giftCardId: string, tenderTypeId: string, pin: string, expirationMonth: number, expirationYear: number): IAsyncResult<Entities.GiftCard>;
        getGiftCardInquiryAsync(giftCardId: string): IAsyncResult<Entities.GiftCard>;
        getNonSalesTransactionsAsync(shiftId: string, shiftTerminalId: string, nonSalesTenderTypeValue: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.NonSalesTransaction[]>;
        createNonSalesTransactionAsync(nonSalesTransaction: Entities.NonSalesTransaction): IAsyncResult<Entities.NonSalesTransaction>;
        createDropAndDeclareTransactionAsync(dropAndDeclareTransaction: Entities.DropAndDeclareTransaction): IAsyncResult<Entities.DropAndDeclareTransaction>;
        getTaxOverridesAsync(overrideBy: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.TaxOverride[]>;
        getCustomerBalanceAsync(accountNumber: string, invoiceAccountNumber: string): IAsyncResult<Entities.CustomerBalances>;
        initiateLinkToExistingCustomerAsync(email: string, activationToken: string, emailTemplateId: string, emailProperties: Entities.NameValuePair[]): IAsyncResult<Entities.LinkToExistingCustomerResult>;
        finalizeLinkToExistingCustomerAsync(email: string, activationToken: string): IAsyncResult<Entities.LinkToExistingCustomerResult>;
        unlinkFromExistingCustomerAsync(): IVoidAsyncResult;
        getOfflineSyncStatusAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.OfflineSyncStatsLine[]>;
        getOfflinePendingTransactionCountAsync(): IAsyncResult<number>;
        getOfflinePendingTransactionCountByShiftAsync(shiftId: number, shiftTerminalId: string): IAsyncResult<number>;
        updateDownloadSessionAsync(downloadSession: Entities.DownloadSession): IAsyncResult<boolean>;
        updateApplicationVersionAsync(appVersion: string): IVoidAsyncResult;
        getStorageAccessTokenForUploadAsync(): IAsyncResult<Entities.StorageAccessToken>;
        getBusinessProcessModelLibrariesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Framework[]>;
        getBusinessProcessModelLibraryAsync(businessProcessModelFrameworkLineId: number, hierarchyDepth: number): IAsyncResult<Entities.Framework>;
        searchTaskGuidesByTitleAsync(businessProcessModelFrameworkLineId: number, taskGuideSearchText: string, queryTypeValue: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.TaskGuidesSearchResult[]>;
        generateBusinessProcessModelPackageAsync(taskRecording: Entities.Recording): IAsyncResult<string>;
        downloadRecordingAsync(businessProcessModelLineId: number): IAsyncResult<Entities.Recording>;
        loadRecordingFromFileAsync(recordingUrl: string): IAsyncResult<Entities.Recording>;
        generateRecordingFileAsync(taskRecording: Entities.Recording): IAsyncResult<string>;
        generateTrainingDocumentAsync(taskRecording: Entities.Recording): IAsyncResult<string>;
        generateRecordingBundleAsync(taskRecording: Entities.Recording): IAsyncResult<string>;
        uploadRecordingAsync(taskRecording: Entities.Recording, businessProcessModelLineId: number): IVoidAsyncResult;
        getAttributeDefinitionsAsync(attributeDefinitionCriteria: Entities.AttributeDefinitionCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.AttributeDefinition[]>;
        getAttributeGroupDefinitionsAsync(attributeGroupDefinitionCriteria: Entities.AttributeGroupDefinitionCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.AttributeGroupDefinition[]>;
        saveFiscalTransactionAsync(fiscalTransaction: Entities.FiscalTransaction): IVoidAsyncResult;
        validatePrintReceiptCopyAllowedAsync(salesOrderToPrint: Entities.SalesOrder): IVoidAsyncResult;
        registerAuditEventAsync(auditEvent: Entities.AuditEvent): IVoidAsyncResult;
        registerAndGetAuditEventAsync(auditEvent: Entities.AuditEvent): IAsyncResult<Entities.AuditEvent>;
        getInventoryAvailableToPromiseAsync(productId: number, itemId: string, inventLocationId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.InventoryAvailableToPromise[]>;
        getSalesOrdersWithNoFiscalTransactionsAsync(storeNumber: string, terminalId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SalesOrder[]>;
        getNotificationsAsync(subscribedOperations: number[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.NotificationItem[]>;
        acknowledgeNotificationsAsync(lastPullDateTime: Date): IVoidAsyncResult;
        getFiscalIntegrationFiscalDocumentAsync(hardwareProfileId: string, functionalityProfileGroupId: string, fiscalIntegrationDocumentRetrievalCriteria: Entities.FiscalIntegrationDocumentRetrievalCriteria, connectorType: number): IAsyncResult<Entities.FiscalIntegrationDocument>;
        getFiscalIntegrationNonFiscalDocumentAsync(hardwareProfileId: string, functionalityProfileGroupId: string, fiscalIntegrationDocumentRetrievalCriteria: Entities.FiscalIntegrationDocumentRetrievalCriteria, connectorType: number): IAsyncResult<Entities.FiscalIntegrationDocument>;
        getFiscalIntegrationFiscalServiceSetupDocumentAsync(hardwareProfileId: string, functionalityProfileGroupId: string, connectorType: number): IAsyncResult<Entities.FiscalIntegrationDocument>;
        getFiscalIntegrationFiscalServiceReadDataDocumentAsync(hardwareProfileId: string, functionalityProfileGroupId: string, connectorType: number): IAsyncResult<Entities.FiscalIntegrationDocument>;
        processFiscalIntegrationFiscalServiceReadDataResultAsync(hardwareProfileId: string, functionalityProfileGroupId: string, documentToProcess: string, connectorType: number): IVoidAsyncResult;
        saveFiscalIntegrationRegistrationResultAsync(hardwareProfileId: string, functionalityProfileGroupId: string, registrationResult: Entities.FiscalIntegrationRegistrationResult, connectorType: number): IVoidAsyncResult;
        getFiscalIntegrationRegistrationProcessAsync(): IAsyncResult<Entities.FiscalIntegrationRegistrationProcess>;
        getChannelSupportedFiscalIntegrationEventsByGroupAsync(functionalityProfileGroupId: string): IAsyncResult<Entities.FiscalIntegrationSupportedEvents>;
        getFiscalIntegrationTechnicalProfilesAsync(hardwareProfileId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.FiscalIntegrationTechnicalProfile[]>;
        getFiscalIntegrationTechnicalProfilesByFunctionalityGroupIdsAsync(hardwareProfileId: string, functionalityProfileGroupId: string[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.FiscalIntegrationTechnicalProfile[]>;
        backupFiscalRegistrationProcessContextAsync(terminalId: string, storeNumber: string, channelId: number, fiscalProcessCompleted: boolean, fiscalIntegrationSerializedContext: string): IVoidAsyncResult;
        getActiveFiscalRegistrationProcessContextBackupAsync(terminalId: string, storeNumber: string, channelId: number): IAsyncResult<string>;
        getFiscalIntegrationTechnicalProfilesBySearchCriteriaAsync(hardwareProfileId: string, fiscalIntegrationTechnicalProfileSearchCriteria: Entities.FiscalIntegrationTechnicalProfileSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.FiscalIntegrationTechnicalProfile[]>;
        getFiscalIntegrationServiceStatusAsync(fiscalIntegrationServiceInfo: Entities.FiscalIntegrationServiceInfo): IAsyncResult<Entities.FiscalIntegrationServiceStatus>;
        submitFiscalIntegrationDocumentAsync(documentToSubmit: string, fiscalIntegrationServiceInfo: Entities.FiscalIntegrationServiceInfo): IAsyncResult<Entities.FiscalIntegrationServiceCommunicationResult>;
        getFeatureStatesAsync(featureNames: string[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.FeatureState[]>;
        getLastFiscalIntegrationSequentialSignaturesAsync(sequentialKeys: string[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.FiscalIntegrationSequentialSignatureData[]>;
        getAvailablePromotionsAsync(searchCriteria: Entities.DiscountsSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Promotion[]>;
        createFiscalTransactionAsync(functionalityProfileGroupId: string, registrationResult: Entities.FiscalIntegrationRegistrationResult, connectorType: number): IAsyncResult<Entities.FiscalTransaction>;
        getButtonGridsAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ButtonGrid[]>;
        getButtonGridsByScreenSizeAsync(height: number, width: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ButtonGrid[]>;
        getCashDeclarationsAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CashDeclaration[]>;
        getCountryRegionsAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CountryRegionInfo[]>;
        getCustomerGroupsAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CustomerGroup[]>;
        getDeliveryOptionsAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.DeliveryOption[]>;
        getChannelsByTypeAsync(channelType: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ChannelIdentity[]>;
        getChannelsAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ChannelIdentity[]>;
        getEnvironmentConfigurationAsync(): IAsyncResult<Entities.EnvironmentConfiguration>;
        getSearchConfigurationAsync(): IAsyncResult<Entities.SearchConfiguration>;
        getExtensionPackageDefinitionsAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ExtensionPackageDefinition[]>;
        getExtensionProfileAsync(): IAsyncResult<Entities.ExtensionProfile>;
        getDeviceConfigurationAsync(): IAsyncResult<Entities.DeviceConfiguration>;
        getVisualProfileAsync(): IAsyncResult<Entities.VisualProfile>;
        getLanguagesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SupportedLanguage[]>;
        getAffiliationsAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Affiliation[]>;
        getOperationPermissionsAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.OperationPermission[]>;
        getReasonCodesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ReasonCode[]>;
        getReturnOrderReasonCodesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ReasonCode[]>;
        getSalesTaxGroupsAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SalesTaxGroup[]>;
        getTenderTypesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.TenderType[]>;
        getUnitsOfMeasureAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.UnitOfMeasure[]>;
        getDiscountCodesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.DiscountCode[]>;
        getCurrenciesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Currency[]>;
        getCurrenciesAmountAsync(currencyCode: string, amount: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CurrencyAmount[]>;
        getCommissionSalesGroupsAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CommissionSalesGroup[]>;
        searchCommissionSalesGroupsAsync(searchText: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CommissionSalesGroup[]>;
        getPaymentMerchantInformationAsync(hardwareProfileId: string): IAsyncResult<Entities.PaymentMerchantInformation>;
        getPaymentPropertiesIfModifiedAsync(hardwareProfileId: string, merchantInformationHash: string): IAsyncResult<Entities.PaymentMerchantInformation>;
        getOnlineChannelPublishStatusAsync(): IAsyncResult<number>;
        setOnlineChannelPublishStatusAsync(publishingStatus: number, statusMessage: string): IVoidAsyncResult;
        getInventoryConfigurationAsync(): IAsyncResult<Entities.ChannelInventoryConfiguration>;
        getAvailableDevicesAsync(deviceType: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Device[]>;
        getImageBlobAsync(imageId: number): IAsyncResult<Entities.MediaBlob>;
        getExtensibleEnumerationsAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ExtensibleEnumerationContainer[]>;
        getAddressPurposesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.AddressPurpose[]>;
        getReturnPolicyAsync(): IAsyncResult<Entities.ReturnPolicy>;
    }
    /*** CategoryManager ***/
    class CategoryManager implements Commerce.Proxy.ICategoryManager {
        private _commerceContext;
        private _callerContext;
        constructor(commerceContext: Commerce.Proxy.CommerceContext, callerContext: any);
        createAsync(entity: Entities.Category): IAsyncResult<Entities.Category>;
        readAsync(recordId: number): IAsyncResult<Entities.Category>;
        readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Category[]>;
        updateAsync(entity: Entities.Category): IAsyncResult<Entities.Category>;
        deleteAsync(entity: Entities.Category): IVoidAsyncResult;
        getCategoriesAsync(channelId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Category[]>;
        getAttributesAsync(categoryId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.AttributeCategory[]>;
        getChildrenAsync(channelId: number, categoryId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Category[]>;
    }
    /*** CartManager ***/
    class CartManager implements Commerce.Proxy.ICartManager {
        private _commerceContext;
        private _callerContext;
        constructor(commerceContext: Commerce.Proxy.CommerceContext, callerContext: any);
        createAsync(entity: Entities.Cart): IAsyncResult<Entities.Cart>;
        readAsync(id: string): IAsyncResult<Entities.Cart>;
        readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Cart[]>;
        updateAsync(entity: Entities.Cart): IAsyncResult<Entities.Cart>;
        deleteAsync(entity: Entities.Cart): IVoidAsyncResult;
        checkoutAsync(id: string, receiptEmail: string, tokenizedPaymentCard: Entities.TokenizedPaymentCard, receiptNumberSequence: string, cartTenderLines: Entities.CartTenderLine[], cartVersion: number): IAsyncResult<Entities.SalesOrder>;
        getMaxLoyaltyPointsToRedeemForTransactionBalanceAsync(id: string, loyaltyCardId: string, currencyCode: string): IAsyncResult<Entities.LoyaltyPointRedemptionEstimate>;
        getPaymentsHistoryAsync(id: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.TenderLine[]>;
        getLineDeliveryOptionsByChannelIdAsync(id: string, lineShippingAddresses: Entities.LineShippingAddress[], channelId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SalesLineDeliveryOption[]>;
        getLineDeliveryOptionsAsync(id: string, lineShippingAddresses: Entities.LineShippingAddress[], filterOption: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SalesLineDeliveryOption[]>;
        getDeliveryPreferencesAsync(id: string): IAsyncResult<Entities.CartDeliveryPreferences>;
        getDeliveryOptionsAsync(id: string, shippingAddress: Entities.Address, cartLineIds: string[], filterOption: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.DeliveryOption[]>;
        updateLineDeliverySpecificationsAsync(id: string, lineDeliverySpecifications: Entities.LineDeliverySpecification[]): IAsyncResult<Entities.Cart>;
        updateDeliverySpecificationAsync(id: string, deliverySpecification: Entities.DeliverySpecification): IAsyncResult<Entities.Cart>;
        addChargeAsync(id: string, moduleTypeValue: number, chargeCode: string, amount: number): IAsyncResult<Entities.Cart>;
        overrideChargeAsync(id: string, chargeLineId: string, amount: number, reasonCodeLines: Entities.ReasonCodeLine[]): IAsyncResult<Entities.Cart>;
        addCartLineChargeAsync(id: string, cartLineId: string, moduleTypeValue: number, chargeCode: string, amount: number): IAsyncResult<Entities.Cart>;
        overrideCartLineChargeAsync(id: string, cartLineId: string, chargeLineId: string, amount: number, reasonCodeLines: Entities.ReasonCodeLine[]): IAsyncResult<Entities.Cart>;
        voidAsync(id: string, reasonCodeLines: Entities.ReasonCodeLine[], cartVersion: number): IAsyncResult<Entities.SalesOrder>;
        addCartLinesAsync(id: string, cartLines: Entities.CartLine[], cartVersion: number): IAsyncResult<Entities.Cart>;
        updateCartLinesAsync(id: string, cartLines: Entities.CartLine[], cartVersion: number): IAsyncResult<Entities.Cart>;
        voidCartLinesAsync(id: string, cartLines: Entities.CartLine[]): IAsyncResult<Entities.Cart>;
        removeCartLinesAsync(id: string, cartLineIds: string[]): IAsyncResult<Entities.Cart>;
        addTenderLineAsync(id: string, cartTenderLine: Entities.CartTenderLine, cartVersion: number): IAsyncResult<Entities.Cart>;
        calculateTenderDiscountAsync(id: string, tenderLine: Entities.TenderLine, cartVersion: number): IAsyncResult<Entities.TenderDiscountLine>;
        addPreprocessedTenderLineAsync(id: string, preprocessedTenderLine: Entities.TenderLine, cartVersion: number): IAsyncResult<Entities.Cart>;
        validateTenderLineForAddAsync(id: string, tenderLine: Entities.TenderLine): IVoidAsyncResult;
        updateTenderLineSignatureAsync(id: string, tenderLineId: string, signatureData: string): IAsyncResult<Entities.Cart>;
        getDeclinedOrVoidedCardReceiptsAsync(id: string, preprocessedTenderLine: Entities.TenderLine, receiptRetrievalCriteria: Entities.ReceiptRetrievalCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Receipt[]>;
        copyAsync(id: string, targetCartType: number): IAsyncResult<Entities.Cart>;
        addInvoicedSalesLinesToCartAsync(transactionId: string, invoicedSalesLinesIds: number[]): IAsyncResult<Entities.Cart>;
        voidTenderLineAsync(id: string, tenderLineId: string, reasonCodeLines: Entities.ReasonCodeLine[], isPreprocessed: boolean, forceVoid: boolean): IAsyncResult<Entities.Cart>;
        issueGiftCardAsync(id: string, giftCardId: string, amount: number, currencyCode: string, lineDescription: string, tenderTypeId: string): IAsyncResult<Entities.Cart>;
        refillGiftCardAsync(id: string, giftCardId: string, amount: number, currencyCode: string, lineDescription: string, tenderTypeId: string): IAsyncResult<Entities.Cart>;
        cashOutGiftCardAsync(id: string, giftCardId: string, amount: number, currencyCode: string, lineDescription: string, tenderTypeId: string): IAsyncResult<Entities.Cart>;
        suspendAsync(id: string): IAsyncResult<Entities.Cart>;
        suspendWithJournalAsync(id: string, journalCartId: string, receiptNumberSequence: string): IAsyncResult<Entities.Cart>;
        resumeAsync(id: string): IAsyncResult<Entities.Cart>;
        resumeFromReceiptIdAsync(receiptId: string): IAsyncResult<Entities.Cart>;
        removeDiscountCodesAsync(id: string, discountCodes: string[]): IAsyncResult<Entities.Cart>;
        getSuspendedAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Cart[]>;
        searchAsync(cartSearchCriteria: Entities.CartSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Cart[]>;
        overrideCartLinePriceAsync(id: string, cartLineId: string, price: number): IAsyncResult<Entities.Cart>;
        getCardPaymentAcceptPointAsync(id: string, cardPaymentAcceptSettings: Entities.CardPaymentAcceptSettings, extensionProperties: Entities.CommerceProperty[]): IAsyncResult<Entities.CardPaymentAcceptPoint>;
        retrieveCardPaymentAcceptResultAsync(resultAccessCode: string, extensionProperties: Entities.CommerceProperty[], cartId: string, settings: Entities.RetrievePaymentResultSettings): IAsyncResult<Entities.CardPaymentAcceptResult>;
        recallOrderAsync(transactionId: string, salesId: string): IAsyncResult<Entities.Cart>;
        recallQuoteAsync(transactionId: string, quoteId: string): IAsyncResult<Entities.Cart>;
        recalculateOrderAsync(id: string): IAsyncResult<Entities.Cart>;
        resetAllChargesAsync(id: string): IAsyncResult<Entities.Cart>;
        getPromotionsAsync(id: string): IAsyncResult<Entities.CartPromotions>;
        getAvailablePromotionsAsync(id: string, cartLineIds: string[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CartPromotionLine[]>;
        recallSalesInvoiceAsync(transactionId: string, invoiceId: string): IAsyncResult<Entities.Cart>;
        addOrderInvoiceAsync(id: string, invoiceId: string, lineDescription: string): IAsyncResult<Entities.Cart>;
        addInvoicesAsync(id: string, invoiceIds: string[]): IAsyncResult<Entities.Cart>;
        updateCommissionSalesGroupAsync(transactionId: string, cartLineId: string, commissionSalesGroup: string, isUserInitiated: boolean): IAsyncResult<Entities.Cart>;
        addCouponsAsync(id: string, couponCodes: string[], isLegacyDiscountCode: boolean): IAsyncResult<Entities.Cart>;
        removeCouponsAsync(id: string, couponCodes: string[]): IAsyncResult<Entities.Cart>;
        getChargeCodesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ChargeCode[]>;
        addDiscountCodeAsync(id: string, discountCode: string): IAsyncResult<Entities.Cart>;
        getReturnOptionsAsync(id: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.TenderTypeAmount[]>;
        validateForCheckoutAsync(id: string, cartVersion: number): IAsyncResult<Entities.CartLineValidationResults>;
    }
    /*** CustomerManager ***/
    class CustomerManager implements Commerce.Proxy.ICustomerManager {
        private _commerceContext;
        private _callerContext;
        constructor(commerceContext: Commerce.Proxy.CommerceContext, callerContext: any);
        createAsync(entity: Entities.Customer): IAsyncResult<Entities.Customer>;
        readAsync(accountNumber: string): IAsyncResult<Entities.Customer>;
        readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Customer[]>;
        updateAsync(entity: Entities.Customer): IAsyncResult<Entities.Customer>;
        deleteAsync(entity: Entities.Customer): IVoidAsyncResult;
        searchAsync(customerSearchCriteria: Entities.CustomerSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.GlobalCustomer[]>;
        searchByFieldsAsync(customerSearchByFieldCriteria: Entities.CustomerSearchByFieldCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.GlobalCustomer[]>;
        getByAccountNumbersAsync(accountNumbers: string[], searchLocationValue: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Customer[]>;
        createCustomerTimelineItemAsync(customerTimelineItem: Entities.CustomerTimelineItem): IAsyncResult<Entities.CustomerTimelineItem>;
        updateCustomerTimelineItemAsync(customerTimelineItem: Entities.CustomerTimelineItem): IAsyncResult<Entities.CustomerTimelineItem>;
        getOrderHistoryAsync(accountNumber: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SalesOrder[]>;
        getOrderShipmentsHistoryAsync(accountNumber: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.OrderShipments[]>;
        postNonTransactionalActivityLoyaltyPointsAsync(loyaltyCardId: string, channelId: number, affiliationId: number, activityTypeId: string): IVoidAsyncResult;
        getPurchaseHistoryAsync(accountNumber: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.PurchaseHistory[]>;
        getCustomerSearchFieldsAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CustomerSearchField[]>;
        getCustomerTimelineItemTypesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CustomerTimelineItemTypeMap[]>;
        getCustomerTimelineItemsAsync(accountNumber: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CustomerTimelineItem[]>;
        getCustomerTimelineRefinersAsync(accountNumber: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CustomerTimelineRefiner[]>;
        getTitlesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CustomerTitle[]>;
    }
    /*** EmployeeManager ***/
    class EmployeeManager implements Commerce.Proxy.IEmployeeManager {
        private _commerceContext;
        private _callerContext;
        constructor(commerceContext: Commerce.Proxy.CommerceContext, callerContext: any);
        createAsync(entity: Entities.Employee): IAsyncResult<Entities.Employee>;
        readAsync(staffId: string): IAsyncResult<Entities.Employee>;
        readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Employee[]>;
        updateAsync(entity: Entities.Employee): IAsyncResult<Entities.Employee>;
        deleteAsync(entity: Entities.Employee): IVoidAsyncResult;
        getActivitiesAsync(employeeActivitySearchCriteria: Entities.EmployeeActivitySearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.EmployeeActivity[]>;
        getManagerActivityViewAsync(employeeActivitySearchCriteria: Entities.EmployeeActivitySearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.EmployeeActivity[]>;
        registerActivityAsync(staffId: string, employeeActivityType: number): IAsyncResult<Date>;
        getAccessibleOrgUnitsAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.OrgUnit[]>;
        getLatestActivityAsync(): IAsyncResult<Entities.EmployeeActivity>;
        searchClientBookCustomersAsync(clientBookCustomerSearchCriteria: Entities.ClientBookCustomerSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ClientBookCustomer[]>;
        getClientBookSearchRefinersAsync(refinerSourceTypes: number[], searchCriteria: Entities.ClientBookCustomerSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ClientBookRefiner[]>;
        updateClientBookAsync(clientBookChanges: Entities.ClientBookChanges): IVoidAsyncResult;
        getCurrentEmployeeAsync(): IAsyncResult<Entities.Employee>;
    }
    /*** ChecklistManager ***/
    class ChecklistManager implements Commerce.Proxy.IChecklistManager {
        private _commerceContext;
        private _callerContext;
        constructor(commerceContext: Commerce.Proxy.CommerceContext, callerContext: any);
        createAsync(entity: Entities.Checklist): IAsyncResult<Entities.Checklist>;
        readAsync(recordId: number): IAsyncResult<Entities.Checklist>;
        readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Checklist[]>;
        updateAsync(entity: Entities.Checklist): IAsyncResult<Entities.Checklist>;
        deleteAsync(entity: Entities.Checklist): IVoidAsyncResult;
        searchChecklistsAsync(checklistSearchCriteria: Entities.ChecklistSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Checklist[]>;
        searchTasksAsync(taskSearchCriteria: Entities.TaskSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ChecklistTask[]>;
        createTaskAsync(createTask: Entities.ChecklistTask): IAsyncResult<Entities.ChecklistTask>;
        updateChecklistsAsync(updateChecklists: Entities.Checklist[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Checklist[]>;
        updateTasksAsync(updateTasks: Entities.ChecklistTask[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ChecklistTask[]>;
    }
    /*** SalesOrderManager ***/
    class SalesOrderManager implements Commerce.Proxy.ISalesOrderManager {
        private _commerceContext;
        private _callerContext;
        constructor(commerceContext: Commerce.Proxy.CommerceContext, callerContext: any);
        createAsync(entity: Entities.SalesOrder): IAsyncResult<Entities.SalesOrder>;
        readAsync(id: string): IAsyncResult<Entities.SalesOrder>;
        readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SalesOrder[]>;
        updateAsync(entity: Entities.SalesOrder): IAsyncResult<Entities.SalesOrder>;
        deleteAsync(entity: Entities.SalesOrder): IVoidAsyncResult;
        searchSalesTransactionsByReceiptIdAsync(receiptId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SalesOrder[]>;
        searchAsync(salesOrderSearchCriteria: Entities.SalesOrderSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SalesOrder[]>;
        searchOrdersAsync(orderSearchCriteria: Entities.OrderSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SalesOrder[]>;
        getReceiptsAsync(id: string, receiptRetrievalCriteria: Entities.ReceiptRetrievalCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Receipt[]>;
        sendReceiptAsync(searchCriteria: Entities.SearchReceiptCriteria, recipientAddresses: Entities.ElectronicAddress[]): IVoidAsyncResult;
        getGiftReceiptsAsync(id: string, salesLineNumbers: number[], receiptRetrievalCriteria: Entities.ReceiptRetrievalCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Receipt[]>;
        getByReceiptIdAsync(receiptId: string, orderStoreNumber: string, orderTerminalId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SalesOrder[]>;
        getSalesOrderDetailsByTransactionIdAsync(transactionId: string, searchLocationValue: number): IAsyncResult<Entities.SalesOrder>;
        getSalesOrderDetailsBySalesIdAsync(salesId: string): IAsyncResult<Entities.SalesOrder>;
        getSalesOrderDetailsByQuotationIdAsync(quotationId: string): IAsyncResult<Entities.SalesOrder>;
        shipFulfillmentLinesAsync(shipFulfillmentLines: Entities.ShipFulfillmentLine[]): IVoidAsyncResult;
        acceptFulfillmentLinesAsync(fulfillmentLineParameter: Entities.FulfillmentLineParameter[]): IVoidAsyncResult;
        pickFulfillmentLinesAsync(fulfillmentLineParameter: Entities.FulfillmentLineParameter[]): IVoidAsyncResult;
        packFulfillmentLinesAsync(fulfillmentLineParameter: Entities.FulfillmentLineParameter[]): IVoidAsyncResult;
        markFulfillmentLinesAsPackedAsync(fulfillmentLineParameter: Entities.FulfillmentLineParameter[]): IAsyncResult<string>;
        markAsPickedAsync(fulfillmentLineParameter: Entities.FulfillmentLineParameter[]): IVoidAsyncResult;
        getFulfillmentPickingListsAsync(pickingListFulfillmentLine: Entities.FulfillmentLineParameter[], hardwareProfileId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Receipt[]>;
        getFulfillmentLinesAsync(fulfillmentLineSearchCriteria: Entities.FulfillmentLineSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.FulfillmentLine[]>;
        getFulfillmentPackingSlipsAsync(packFulfillmentLines: Entities.FulfillmentLineParameter[], hardwareProfileId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Receipt[]>;
        getFulfillmentPackingSlipsByIdAsync(salesId: string, packingSlipId: string, hardwareProfileId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Receipt[]>;
        rejectFulfillmentLinesAsync(rejectFulfillmentLines: Entities.RejectFulfillmentLine[]): IVoidAsyncResult;
        getInvoicesBySalesIdAsync(salesId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SalesInvoice[]>;
        getOrderInvoicesAsync(customerId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.OrderInvoice[]>;
        getInvoicesAsync(invoiceSearchCriteria: Entities.InvoiceSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.OrderInvoice[]>;
        getInvoicedSalesLinesBySalesIdsAsync(salesIds: string[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SalesLine[]>;
        createPickingListAsync(salesId: string): IVoidAsyncResult;
        createPickingListForItemsAsync(salesId: string, pickAndPackSalesLineParameters: Entities.PickAndPackSalesLineParameter[]): IAsyncResult<string>;
        getPickingListsAsync(id: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.PickingList[]>;
        createPackingSlipAsync(salesId: string): IVoidAsyncResult;
        getPackingSlipsDataAsync(salesId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.PackingSlipData[]>;
    }
    /*** ShiftManager ***/
    class ShiftManager implements Commerce.Proxy.IShiftManager {
        private _commerceContext;
        private _callerContext;
        constructor(commerceContext: Commerce.Proxy.CommerceContext, callerContext: any);
        createAsync(entity: Entities.Shift): IAsyncResult<Entities.Shift>;
        readAsync(shiftId: number, terminalId: string): IAsyncResult<Entities.Shift>;
        readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Shift[]>;
        updateAsync(entity: Entities.Shift): IAsyncResult<Entities.Shift>;
        deleteAsync(entity: Entities.Shift): IVoidAsyncResult;
        upsertShiftsAsync(shifts: Entities.Shift[]): IAsyncResult<boolean>;
        upsertAndValidateShiftsAsync(shiftId: number, terminalId: string, shifts: Entities.Shift[]): IAsyncResult<boolean>;
        deleteShiftsAsync(): IAsyncResult<boolean>;
        openAsync(shiftId: number, cashDrawer: string, isShared: boolean): IAsyncResult<Entities.Shift>;
        closeAsync(shiftId: number, terminalId: string, transactionId: string, forceClose: boolean, hasOfflinePendingTransactions: boolean): IAsyncResult<Entities.Shift>;
        getSuspendedCartsByShiftAsync(shiftTerminalId: string, shiftId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SuspendedCart[]>;
        voidSuspendedCartsAsync(shiftId: number, terminalId: string): IVoidAsyncResult;
        saveTenderLinesAsync(shiftId: number, terminalId: string, tenderLines: Entities.ShiftTenderLine[]): IVoidAsyncResult;
        blindCloseAsync(shiftId: number, terminalId: string, transactionId: string, forceClose: boolean): IAsyncResult<Entities.Shift>;
        forceDeleteAsync(shiftId: number, terminalId: string, transactionId: string): IVoidAsyncResult;
        resumeAsync(shiftId: number, terminalId: string, cashDrawer: string): IAsyncResult<Entities.Shift>;
        useAsync(shiftId: number, terminalId: string): IAsyncResult<Entities.Shift>;
        suspendAsync(shiftId: number, terminalId: string, transactionId: string): IAsyncResult<Entities.Shift>;
        getByStatusAsync(statusValue: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Shift[]>;
        getByStatusFilterByUserRoleAsync(statusValue: number, filterByUserRole: boolean, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Shift[]>;
        getByRetrievalCriteriaAsync(shiftRetrievalCriteria: Entities.ShiftRetrievalCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Shift[]>;
        getXReportAsync(shiftId: number, terminalId: string, transactionId: string, hardwareProfileId: string): IAsyncResult<Entities.Receipt>;
        getZReportAsync(transactionId: string, hardwareProfileId: string): IAsyncResult<Entities.Receipt>;
        getOpenTenderLinesAsync(shiftId: number, terminalId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ShiftTenderLine[]>;
        validateCashDrawerLimitAsync(shiftTerminalId: string, shiftId: number): IVoidAsyncResult;
    }
    /*** StockCountJournalManager ***/
    class StockCountJournalManager implements Commerce.Proxy.IStockCountJournalManager {
        private _commerceContext;
        private _callerContext;
        constructor(commerceContext: Commerce.Proxy.CommerceContext, callerContext: any);
        createAsync(entity: Entities.StockCountJournal): IAsyncResult<Entities.StockCountJournal>;
        readAsync(journalId: string): IAsyncResult<Entities.StockCountJournal>;
        readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.StockCountJournal[]>;
        updateAsync(entity: Entities.StockCountJournal): IAsyncResult<Entities.StockCountJournal>;
        deleteAsync(entity: Entities.StockCountJournal): IVoidAsyncResult;
        syncAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.StockCountJournal[]>;
        syncTransactionsAsync(journalId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.StockCountJournalTransaction[]>;
        calculateEstimatedOnHandInventoryAsync(journalId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.StockCountJournalTransaction[]>;
        removeJournalAsync(journalId: string): IVoidAsyncResult;
        removeTransactionAsync(journalId: string, itemId: string, inventSizeId: string, inventColorId: string, inventStyleId: string, configurationId: string): IVoidAsyncResult;
        removeStockCountLineByLineIdAsync(journalId: string, stockCountLineId: number): IVoidAsyncResult;
        removeStockCountLineByProductRecIdAsync(journalId: string, productId: number): IVoidAsyncResult;
        commitAsync(journalId: string): IVoidAsyncResult;
    }
    /*** OrgUnitManager ***/
    class OrgUnitManager implements Commerce.Proxy.IOrgUnitManager {
        private _commerceContext;
        private _callerContext;
        constructor(commerceContext: Commerce.Proxy.CommerceContext, callerContext: any);
        createAsync(entity: Entities.OrgUnit): IAsyncResult<Entities.OrgUnit>;
        readAsync(orgUnitNumber: string): IAsyncResult<Entities.OrgUnit>;
        readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.OrgUnit[]>;
        updateAsync(entity: Entities.OrgUnit): IAsyncResult<Entities.OrgUnit>;
        deleteAsync(entity: Entities.OrgUnit): IVoidAsyncResult;
        getTillLayoutAsync(height: number, width: number): IAsyncResult<Entities.TillLayout>;
        searchAsync(storeSearchCriteria: Entities.SearchStoreCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.OrgUnit[]>;
        getOrgUnitLocationsByAreaAsync(searchArea: Entities.SearchArea, deliveryModeTypeFilter: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.OrgUnitLocation[]>;
        searchOrgUnitLocationsAsync(orgUnitLocationSearchCriteria: Entities.OrgUnitLocationSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.OrgUnitLocation[]>;
        getOrgUnitConfigurationAsync(): IAsyncResult<Entities.ChannelConfiguration>;
        getStoreHoursAsync(storeNumber: string): IAsyncResult<Entities.StoreHours>;
        getAvailableInventoryAsync(itemId: string, variantId: string, barcode: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.OrgUnitAvailability[]>;
        getAvailableInventoryNearbyAsync(itemIds: Entities.ItemUnit[], searchArea: Entities.SearchArea, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.OrgUnitAvailability[]>;
        getProductAvailabilityByDimensionsAsync(inventLocationIds: string[], productId: number, productDimensionCombinations: Entities.ProductDimensionCombination[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.OrgUnitAvailability[]>;
        searchProductAvailabilityAsync(productId: number, orgUnitAvailabilitySearchCriteria: Entities.OrgUnitAvailabilitySearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.OrgUnitAvailability[]>;
        getTerminalInfoAsync(orgUnitNumber: string, deviceType: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.TerminalInfo[]>;
        getProductAvailabilityAsync(productId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.OrgUnitAvailability[]>;
    }
    /*** ProductManager ***/
    class ProductManager implements Commerce.Proxy.IProductManager {
        private _commerceContext;
        private _callerContext;
        constructor(commerceContext: Commerce.Proxy.CommerceContext, callerContext: any);
        createAsync(entity: Entities.Product): IAsyncResult<Entities.Product>;
        readAsync(recordId: number): IAsyncResult<Entities.Product>;
        readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Product[]>;
        updateAsync(entity: Entities.Product): IAsyncResult<Entities.Product>;
        deleteAsync(entity: Entities.Product): IVoidAsyncResult;
        getDimensionValuesAsync(recordId: number, channelId: number, dimension: number, matchingDimensionValues: Entities.ProductDimension[], kitVariantResolutionContext: Entities.ProductVariantResolutionOnKitSelectionContext, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductDimensionValue[]>;
        getVariantsByDimensionValuesAsync(recordId: number, channelId: number, matchingDimensionValues: Entities.ProductDimension[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SimpleProduct[]>;
        getVariantsByComponentsInSlotsAsync(recordId: number, channelId: number, matchingSlotToComponentRelationship: Entities.ComponentInSlotRelation[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SimpleProduct[]>;
        getByIdsAsync(channelId: number, productIds: number[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SimpleProduct[]>;
        compareAsync(channelId: number, catalogId: number, productIds: number[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductComparisonLine[]>;
        getRecommendedProductsAsync(productIds: number[], customerId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductSearchResult[]>;
        refineSearchByCategoryAsync(channelId: number, catalogId: number, categoryId: number, refinementCriteria: Entities.ProductRefinerValue[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductSearchResult[]>;
        refineSearchByTextAsync(channelId: number, catalogId: number, searchText: string, refinementCriteria: Entities.ProductRefinerValue[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductSearchResult[]>;
        getProductSearchRefinersAsync(searchCriteria: Entities.ProductSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductRefiner[]>;
        searchAsync(productSearchCriteria: Entities.ProductSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Product[]>;
        getRefinersAsync(productSearchCriteria: Entities.ProductSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductRefiner[]>;
        changesAsync(productSearchCriteria: Entities.ChangedProductsSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Product[]>;
        beginReadChangedProductsAsync(changedProductSearchCriteria: Entities.ChangedProductsSearchCriteria): IAsyncResult<Entities.ReadChangedProductsSession>;
        readChangedProductsAsync(productSearchCriteria: Entities.ChangedProductsSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Product[]>;
        getDeletedListingsAsync(catalogId: number, skip: number, top: number): IAsyncResult<Entities.DeletedListingsResult>;
        getDeletedCatalogsAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<number[]>;
        getDeletedLanguagesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<string[]>;
        getProductRatingsAsync(productIds: number[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductRating[]>;
        getProductAssortmentIntervalsAsync(productIds: number[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductAssortmentInterval[]>;
        getDeliveryOptionsAsync(productIds: number[], address: Entities.Address, filterOption: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductDeliveryOptions[]>;
        deleteListingsByCatalogsAsync(catalogIds: number[]): IVoidAsyncResult;
        deleteListingsByLanguagesAsync(languages: string[]): IVoidAsyncResult;
        endReadChangedProductsAsync(session: Entities.ReadChangedProductsSession): IVoidAsyncResult;
        updateListingPublishingStatusAsync(publishingStatuses: Entities.ListingPublishStatus[]): IVoidAsyncResult;
        getPricesAsync(itemId: string, inventoryDimensionId: string, barcode: string, customerAccountNumber: string, unitOfMeasureSymbol: string, quantity: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductPrice[]>;
        getProductAvailabilitiesAsync(itemIds: number[], channelId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductAvailableQuantity[]>;
        getActivePricesAsync(projectDomain: Entities.ProjectionDomain, productIds: number[], activeDate: Date, customerId: string, affiliationLoyaltyTiers: Entities.AffiliationLoyaltyTier[], includeSimpleDiscountsInContextualPrice: boolean, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductPrice[]>;
        getFilteredSlotComponentsAsync(recordId: number, channelId: number, slotId: number, selectedComponents: Entities.ComponentInSlotRelation[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductComponent[]>;
        getComponentByProductSlotRelationAsync(channelId: number, componentRelation: Entities.ComponentInSlotRelation): IAsyncResult<Entities.ProductComponent>;
        getCategoryPathsAsync(channelId: number, catalogId: number, categoryPathLookups: Entities.CategoryPathLookup[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CategoryPathResult[]>;
        searchByCategoryAsync(channelId: number, catalogId: number, categoryId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductSearchResult[]>;
        searchByTextAsync(channelId: number, catalogId: number, searchText: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductSearchResult[]>;
        searchByCriteriaAsync(searchCriteria: Entities.ProductSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductSearchResult[]>;
        getByLookupClausesAsync(channelId: number, productLookupClauses: Entities.ProductLookupClause[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SimpleProduct[]>;
        getSearchSuggestionsAsync(channelId: number, catalogId: number, searchText: string, hitPrefix: string, hitSuffix: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SearchSuggestion[]>;
        getRefinersByCategoryAsync(catalogId: number, categoryId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductRefiner[]>;
        getRefinersByTextAsync(catalogId: number, searchText: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductRefiner[]>;
        getRefinerValuesByCategoryAsync(catalogId: number, categoryId: number, refinerId: number, refinerSourceValue: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductRefinerValue[]>;
        getRefinerValuesByTextAsync(catalogId: number, searchText: string, refinerId: number, refinerSourceValue: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductRefinerValue[]>;
        getChannelProductAttributesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.AttributeProduct[]>;
        getByIdAsync(recordId: number, channelId: number): IAsyncResult<Entities.SimpleProduct>;
        getAttributeValuesAsync(recordId: number, channelId: number, catalogId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.AttributeValue[]>;
        getMediaLocationsAsync(recordId: number, channelId: number, catalogId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.MediaLocation[]>;
        getMediaBlobsAsync(recordId: number, channelId: number, catalogId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.MediaBlob[]>;
        getDefaultComponentsAsync(recordId: number, channelId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductComponent[]>;
        getSlotComponentsAsync(recordId: number, channelId: number, slotId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductComponent[]>;
        getAllRelationTypesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductRelationType[]>;
        getRelationTypesAsync(recordId: number, channelId: number, catalogId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductRelationType[]>;
        getRelatedProductsAsync(recordId: number, channelId: number, catalogId: number, relationTypeId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductSearchResult[]>;
        getUnitsOfMeasureAsync(recordId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.UnitOfMeasure[]>;
        getApplicableWarrantiesAsync(catalogId: number, warrantableProductIds: number[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductWarrantiesMapping[]>;
        getPriceAsync(recordId: number, customerAccountNumber: string, unitOfMeasureSymbol: string): IAsyncResult<Entities.ProductPrice>;
        calculateProductPriceAsync(recordId: number, customerAccountNumber: string, unitOfMeasureSymbol: string, loyaltyCardId: string, affiliationLoyaltyTiers: Entities.AffiliationLoyaltyTier[]): IAsyncResult<Entities.ProductPrice>;
        getEstimatedProductWarehouseAvailabilityAsync(productWarehouses: Entities.ProductWarehouse[]): IAsyncResult<Entities.ProductWarehouseInventoryInformation>;
        getEstimatedAvailabilityAsync(searchCriteria: Entities.InventoryAvailabilitySearchCriteria): IAsyncResult<Entities.ProductWarehouseInventoryInformation>;
    }
    /*** ProductCatalogManager ***/
    class ProductCatalogManager implements Commerce.Proxy.IProductCatalogManager {
        private _commerceContext;
        private _callerContext;
        constructor(commerceContext: Commerce.Proxy.CommerceContext, callerContext: any);
        createAsync(entity: Entities.ProductCatalog): IAsyncResult<Entities.ProductCatalog>;
        readAsync(recordId: number): IAsyncResult<Entities.ProductCatalog>;
        readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductCatalog[]>;
        updateAsync(entity: Entities.ProductCatalog): IAsyncResult<Entities.ProductCatalog>;
        deleteAsync(entity: Entities.ProductCatalog): IVoidAsyncResult;
        getCatalogsAsync(channelId: number, activeOnly: boolean, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductCatalog[]>;
    }
    /*** CommerceListManager ***/
    class CommerceListManager implements Commerce.Proxy.ICommerceListManager {
        private _commerceContext;
        private _callerContext;
        constructor(commerceContext: Commerce.Proxy.CommerceContext, callerContext: any);
        createAsync(entity: Entities.CommerceList): IAsyncResult<Entities.CommerceList>;
        readAsync(id: number): IAsyncResult<Entities.CommerceList>;
        readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CommerceList[]>;
        updateAsync(entity: Entities.CommerceList): IAsyncResult<Entities.CommerceList>;
        deleteAsync(entity: Entities.CommerceList): IVoidAsyncResult;
        getByCustomerAsync(customerId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CommerceList[]>;
        addLinesAsync(id: number, commerceListLines: Entities.CommerceListLine[]): IAsyncResult<Entities.CommerceList>;
        updateLinesAsync(id: number, commerceListLines: Entities.CommerceListLine[]): IAsyncResult<Entities.CommerceList>;
        removeLinesAsync(id: number, commerceListLines: Entities.CommerceListLine[]): IAsyncResult<Entities.CommerceList>;
        moveLinesAsync(commerceListLines: Entities.CommerceListLine[], destinationId: number): IAsyncResult<Entities.CommerceList>;
        copyLinesAsync(commerceListLines: Entities.CommerceListLine[], destinationId: number): IAsyncResult<Entities.CommerceList>;
        addContributorsAsync(id: number, commerceListContributors: Entities.CommerceListContributor[]): IAsyncResult<Entities.CommerceList>;
        removeContributorsAsync(id: number, commerceListContributors: Entities.CommerceListContributor[]): IAsyncResult<Entities.CommerceList>;
        createInvitationsAsync(id: number, commerceListInvitations: Entities.CommerceListInvitation[]): IAsyncResult<Entities.CommerceList>;
        acceptInvitationAsync(invitationToken: string, customerId: string): IVoidAsyncResult;
    }
    /*** ProductListManager ***/
    class ProductListManager implements Commerce.Proxy.IProductListManager {
        private _commerceContext;
        private _callerContext;
        constructor(commerceContext: Commerce.Proxy.CommerceContext, callerContext: any);
        createAsync(entity: Entities.ProductList): IAsyncResult<Entities.ProductList>;
        readAsync(id: string): IAsyncResult<Entities.ProductList>;
        readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductList[]>;
        updateAsync(entity: Entities.ProductList): IAsyncResult<Entities.ProductList>;
        deleteAsync(entity: Entities.ProductList): IVoidAsyncResult;
        searchAsync(searchCriteria: Entities.ProductListSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductList[]>;
        getProductListLinesAsync(id: string, searchText: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductListLine[]>;
        addProductListLinesAsync(id: string, productListLines: Entities.ProductListLine[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductListLine[]>;
        updateProductListLinesAsync(id: string, productListLines: Entities.ProductListLine[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductListLine[]>;
        removeProductListLinesAsync(id: string, productListLines: Entities.ProductListLine[]): IVoidAsyncResult;
        copyCartToProductListAsync(id: string, cartId: string, isRewrite: boolean, isQuantityAggregate: boolean): IAsyncResult<Entities.ProductList>;
    }
    /*** RecommendationManager ***/
    class RecommendationManager implements Commerce.Proxy.IRecommendationManager {
        private _commerceContext;
        private _callerContext;
        constructor(commerceContext: Commerce.Proxy.CommerceContext, callerContext: any);
        createAsync(entity: Entities.Recommendation): IAsyncResult<Entities.Recommendation>;
        readAsync(id: string): IAsyncResult<Entities.Recommendation>;
        readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Recommendation[]>;
        updateAsync(entity: Entities.Recommendation): IAsyncResult<Entities.Recommendation>;
        deleteAsync(entity: Entities.Recommendation): IVoidAsyncResult;
        getElementsAsync(id: string, recommendationCriteria: Entities.RecommendationCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.RecommendedElement[]>;
    }
    /*** TransferOrderManager ***/
    class TransferOrderManager implements Commerce.Proxy.ITransferOrderManager {
        private _commerceContext;
        private _callerContext;
        constructor(commerceContext: Commerce.Proxy.CommerceContext, callerContext: any);
        createAsync(entity: Entities.TransferOrder): IAsyncResult<Entities.TransferOrder>;
        readAsync(orderId: string): IAsyncResult<Entities.TransferOrder>;
        readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.TransferOrder[]>;
        updateAsync(entity: Entities.TransferOrder): IAsyncResult<Entities.TransferOrder>;
        deleteAsync(entity: Entities.TransferOrder): IVoidAsyncResult;
        commitAsync(orderId: string, skipNotValidLines: boolean): IVoidAsyncResult;
        getTransferOrderLinesAsync(orderId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.TransferOrderLine[]>;
        createTransferOrderLinesAsync(orderId: string, transferOrderLines: Entities.TransferOrderLine[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.TransferOrderLine[]>;
        updateTransferOrderLinesAsync(orderId: string, transferOrderLines: Entities.TransferOrderLine[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.TransferOrderLine[]>;
        getTransferOrderCommentsAsync(orderId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Comment[]>;
        addTransferOrderCommentAsync(orderId: string, authorStaffId: string, commentText: string): IAsyncResult<Entities.Comment>;
        deleteTransferOrderLinesAsync(orderId: string, transferOrderLines: Entities.TransferOrderLine[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.TransferOrderLine[]>;
        getTransferOrderJournalsAsync(orderId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.TransferOrderJournal[]>;
        getTransferPackingSlipAsync(orderId: string, voucherId: string, receiptRetrievalCriteria: Entities.ReceiptRetrievalCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Receipt[]>;
    }
    /*** PurchaseOrderManager ***/
    class PurchaseOrderManager implements Commerce.Proxy.IPurchaseOrderManager {
        private _commerceContext;
        private _callerContext;
        constructor(commerceContext: Commerce.Proxy.CommerceContext, callerContext: any);
        createAsync(entity: Entities.PurchaseOrder): IAsyncResult<Entities.PurchaseOrder>;
        readAsync(orderId: string): IAsyncResult<Entities.PurchaseOrder>;
        readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.PurchaseOrder[]>;
        updateAsync(entity: Entities.PurchaseOrder): IAsyncResult<Entities.PurchaseOrder>;
        deleteAsync(entity: Entities.PurchaseOrder): IVoidAsyncResult;
        commitAsync(orderId: string): IVoidAsyncResult;
    }
    /*** PickingListManager ***/
    class PickingListManager implements Commerce.Proxy.IPickingListManager {
        private _commerceContext;
        private _callerContext;
        constructor(commerceContext: Commerce.Proxy.CommerceContext, callerContext: any);
        createAsync(entity: Entities.PickingList): IAsyncResult<Entities.PickingList>;
        readAsync(orderId: string): IAsyncResult<Entities.PickingList>;
        readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.PickingList[]>;
        updateAsync(entity: Entities.PickingList): IAsyncResult<Entities.PickingList>;
        deleteAsync(entity: Entities.PickingList): IVoidAsyncResult;
        commitAsync(orderId: string): IVoidAsyncResult;
    }
    /*** WarehouseManager ***/
    class WarehouseManager implements Commerce.Proxy.IWarehouseManager {
        private _commerceContext;
        private _callerContext;
        constructor(commerceContext: Commerce.Proxy.CommerceContext, callerContext: any);
        createAsync(entity: Entities.Warehouse): IAsyncResult<Entities.Warehouse>;
        readAsync(inventLocation: string): IAsyncResult<Entities.Warehouse>;
        readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Warehouse[]>;
        updateAsync(entity: Entities.Warehouse): IAsyncResult<Entities.Warehouse>;
        deleteAsync(entity: Entities.Warehouse): IVoidAsyncResult;
        searchWarehouseLocationsAsyncAsync(searchCriteria: Entities.WarehouseLocationSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.WarehouseLocation[]>;
        getWarehouseByIdAsync(inventLocation: string): IAsyncResult<Entities.Warehouse>;
        searchWarehousesAsync(searchText: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Warehouse[]>;
        getLocationsAsync(inventLocation: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.WarehouseLocation[]>;
        searchLocationsAsync(inventLocation: string, searchText: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.WarehouseLocation[]>;
        getAvailableFulfillmentLocationsAsync(deliveryModeTypeFilter: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Warehouse[]>;
    }
    /*** ScanResultManager ***/
    class ScanResultManager implements Commerce.Proxy.IScanResultManager {
        private _commerceContext;
        private _callerContext;
        constructor(commerceContext: Commerce.Proxy.CommerceContext, callerContext: any);
        createAsync(entity: Entities.ScanResult): IAsyncResult<Entities.ScanResult>;
        readAsync(scannedText: string): IAsyncResult<Entities.ScanResult>;
        readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ScanResult[]>;
        updateAsync(entity: Entities.ScanResult): IAsyncResult<Entities.ScanResult>;
        deleteAsync(entity: Entities.ScanResult): IVoidAsyncResult;
    }
    /*** SalesOrderContextualOperationsMapManager ***/
    class SalesOrderContextualOperationsMapManager implements Commerce.Proxy.ISalesOrderContextualOperationsMapManager {
        private _commerceContext;
        private _callerContext;
        constructor(commerceContext: Commerce.Proxy.CommerceContext, callerContext: any);
        createAsync(entity: Entities.SalesOrderContextualOperationsMap): IAsyncResult<Entities.SalesOrderContextualOperationsMap>;
        readAsync(id: string): IAsyncResult<Entities.SalesOrderContextualOperationsMap>;
        readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SalesOrderContextualOperationsMap[]>;
        updateAsync(entity: Entities.SalesOrderContextualOperationsMap): IAsyncResult<Entities.SalesOrderContextualOperationsMap>;
        deleteAsync(entity: Entities.SalesOrderContextualOperationsMap): IVoidAsyncResult;
        getOrdersAsync(orderSearchCriteria: Entities.OrderSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SalesOrderContextualOperationsMap[]>;
        getFulfillmentLinesAsync(fulfillmentLineSearchCriteria: Entities.FulfillmentLineSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.FulfillmentLineContextualOperationsMap[]>;
    }
    /*** InventoryInboundOutboundDocumentManager ***/
    class InventoryInboundOutboundDocumentManager implements Commerce.Proxy.IInventoryInboundOutboundDocumentManager {
        private _commerceContext;
        private _callerContext;
        constructor(commerceContext: Commerce.Proxy.CommerceContext, callerContext: any);
        createAsync(entity: Entities.InventoryInboundOutboundDocument): IAsyncResult<Entities.InventoryInboundOutboundDocument>;
        readAsync(workDocumentId: string): IAsyncResult<Entities.InventoryInboundOutboundDocument>;
        readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.InventoryInboundOutboundDocument[]>;
        updateAsync(entity: Entities.InventoryInboundOutboundDocument): IAsyncResult<Entities.InventoryInboundOutboundDocument>;
        deleteAsync(entity: Entities.InventoryInboundOutboundDocument): IVoidAsyncResult;
        updateStatusAsync(workDocumentId: string, documentStatus: number, documentVersion: number): IAsyncResult<Entities.InventoryInboundOutboundDocument>;
        updateLinesByCriteriaAsync(workDocumentId: string, filterCriteria: Entities.InventoryDocumentLineFilterCriteria, updateLinesAction: Entities.InventoryDocumentUpdateLinesAction, returnUpdatedLinesPolicy: Entities.InventoryDocumentLineOperationResultSettings): IAsyncResult<Entities.InventoryInboundOutboundDocumentUpdateLinesByCriteriaResult>;
        updateLineAsync(workDocumentId: string, documentLine: Entities.InventoryInboundOutboundDocumentLine): IAsyncResult<Entities.InventoryInboundOutboundDocumentLine>;
        updateWorkingTerminalAsync(workDocumentId: string, documentVersion: number): IAsyncResult<Entities.InventoryInboundOutboundDocument>;
        updateNoteAsync(workDocumentId: string, documentNote: string, documentVersion: number): IAsyncResult<Entities.InventoryInboundOutboundDocument>;
        updateReceiptIdAsync(workDocumentId: string, documentReceiptId: string, documentVersion: number): IAsyncResult<Entities.InventoryInboundOutboundDocument>;
        commitAsync(workDocumentId: string, documentVersion: number): IAsyncResult<Entities.InventoryInboundOutboundDocument>;
        refreshOperationStatusAsync(workDocumentId: string): IAsyncResult<Entities.InventoryInboundOutboundDocument>;
        startAsync(sourceDocumentId: string, sourceDocumentType: number): IAsyncResult<Entities.InventoryInboundOutboundDocument>;
        addLineAsync(workDocumentId: string, documentLine: Entities.InventoryInboundOutboundDocumentLine): IAsyncResult<Entities.InventoryInboundOutboundDocumentLine>;
        deleteLineAsync(workDocumentId: string, documentLineId: string, documentLineVersion: number): IVoidAsyncResult;
        searchSerialNumberLinesAsync(workDocumentId: string, searchCriteria: Entities.InventoryDocumentSerialNumberLineSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.InventoryDocumentSerialNumberLine[]>;
        validateAsync(workDocumentId: string, documentVersion: number): IAsyncResult<Entities.InventoryDocumentValidationResultSummary>;
        searchValidationResultLinesAsync(searchCriteria: Entities.InventoryDocumentValidationResultSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.InventoryDocumentValidationResultLine[]>;
        syncSourceDocumentAsync(sourceDocumentId: string, sourceDocumentType: number): IVoidAsyncResult;
        searchInboundDocumentsAsync(searchCriteria: Entities.InventoryDocumentSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.InventoryInboundOutboundDocument[]>;
        searchOutboundDocumentsAsync(searchCriteria: Entities.InventoryDocumentSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.InventoryInboundOutboundDocument[]>;
        searchLinesAsync(searchCriteria: Entities.InventoryDocumentLineSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.InventoryInboundOutboundDocumentLine[]>;
        resetSerialNumberLineAsync(workDocumentId: string, resetSerialNumberLineAction: Entities.InventoryDocumentSerialNumberLineResetAction): IAsyncResult<Entities.InventoryDocumentSerialNumberLine>;
        updateSerialNumberLineAsync(workDocumentId: string, updateSerialNumberLineAction: Entities.InventoryDocumentSerialNumberLineUpdateAction): IAsyncResult<Entities.InventoryDocumentSerialNumberLine>;
        getLinesSummaryAsync(workDocumentId: string): IAsyncResult<Entities.InventoryInboundOutboundDocumentLinesSummary>;
        getSerialNumberLinesSummaryAsync(workDocumentId: string, documentLineId: string): IAsyncResult<Entities.InventoryDocumentSerialNumberLinesSummary>;
    }
    /*** BusinessPartnerManager ***/
    class BusinessPartnerManager implements Commerce.Proxy.IBusinessPartnerManager {
        private _commerceContext;
        private _callerContext;
        constructor(commerceContext: Commerce.Proxy.CommerceContext, callerContext: any);
        createAsync(entity: Entities.BusinessPartner): IAsyncResult<Entities.BusinessPartner>;
        readAsync(businessPartnerId: string): IAsyncResult<Entities.BusinessPartner>;
        readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.BusinessPartner[]>;
        updateAsync(entity: Entities.BusinessPartner): IAsyncResult<Entities.BusinessPartner>;
        deleteAsync(entity: Entities.BusinessPartner): IVoidAsyncResult;
        createProspectAsync(businessPartnerProspect: Entities.BusinessPartnerProspect): IAsyncResult<Entities.BusinessPartnerProspect>;
        getCurrentAsync(): IAsyncResult<Entities.BusinessPartner>;
        getUsersAsync(businessPartnerId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.BusinessPartnerUser[]>;
    }
    /*** BusinessPartnerUserManager ***/
    class BusinessPartnerUserManager implements Commerce.Proxy.IBusinessPartnerUserManager {
        private _commerceContext;
        private _callerContext;
        constructor(commerceContext: Commerce.Proxy.CommerceContext, callerContext: any);
        createAsync(entity: Entities.BusinessPartnerUser): IAsyncResult<Entities.BusinessPartnerUser>;
        readAsync(email: string): IAsyncResult<Entities.BusinessPartnerUser>;
        readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.BusinessPartnerUser[]>;
        updateAsync(entity: Entities.BusinessPartnerUser): IAsyncResult<Entities.BusinessPartnerUser>;
        deleteAsync(entity: Entities.BusinessPartnerUser): IVoidAsyncResult;
    }
    /*** SuspendedCartManager ***/
    class SuspendedCartManager implements Commerce.Proxy.ISuspendedCartManager {
        private _commerceContext;
        private _callerContext;
        constructor(commerceContext: Commerce.Proxy.CommerceContext, callerContext: any);
        createAsync(entity: Entities.SuspendedCart): IAsyncResult<Entities.SuspendedCart>;
        readAsync(id: string): IAsyncResult<Entities.SuspendedCart>;
        readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SuspendedCart[]>;
        updateAsync(entity: Entities.SuspendedCart): IAsyncResult<Entities.SuspendedCart>;
        deleteAsync(entity: Entities.SuspendedCart): IVoidAsyncResult;
        getAllSuspendedCartsAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SuspendedCart[]>;
    }
}
declare module Commerce.Proxy {
    /**
     * Represents a data service request object.
     */
    class DataServiceRequest implements Common.IDataServiceRequest {
        static GET: string;
        static POST: string;
        static PATCH: string;
        static DELETE: string;
        private static DEFAULT_HEADER;
        private static OPERATINGUNITNUMBER_HEADERNAME;
        private static AUTHORIZATION_HEADERNAME;
        private static ACCEPT_LANGUAGE;
        private _query;
        private _serverUri;
        private _requestUri;
        private _method;
        private _id;
        private _operatingUnitNumber;
        private _authToken;
        private _hasOperationName;
        private _locale;
        private readonly batchRequestUri;
        /**
         * Gets Locale for the current data service factory instance.
         */
        /**
         * Sets Locale for the current data service factory instance.
         */
        locale: string;
        /**
         * Gets the Request Identifier.
         * Auto-generated unique identifier if executed in batch. Used to fetch the response from batch result array.
         */
        id(): number;
        constructor(serverUri: string, query: Common.IDataServiceQueryInternal, operatingUnitNumber: string, authToken: string, locale?: string);
        /**
         * Gets the Request Uri.
         */
        getRequestUri(query: Common.IDataServiceQueryInternal): string;
        /**
         * Executes the request.
         * @param {any} callerContext The caller context.
         * @return {IAsyncResult<T>} The async result.
         */
        execute<T>(callerContext: any): IAsyncResult<T>;
        /**
         * Executes paginated requests for all entities.
         * @param {AsyncResult{T}} asyncResult The async result.
         * @param {{ [headerName: string]: string }} headerName the headers for the request.
         * @param {number} skip The offset.
         * @param {Array<T>} The array result.
         */
        private getAllPages<T>(asyncResult, headers, skip, results?);
        /**
         * Builds the header to be sent as part of the request.
         * @returns {{ [headerName: string]: string }} a key value pair collection of header names and header values.
         */
        private buildQueryHeader();
        /**
         * Executes request for one page.
         * @param {AsyncResult<T>} The async result.
         * @param {{ [headerName: string]: string }} headerName the headers for the request.
         */
        private loadPage<T>(asyncResult, headers, skip?);
        /**
         * Executes the batch requests.
         * @param {DataServiceRequest[]} requests The collection of requests to execute.
         * @param {any} [callerContext] The caller context.
         * @return {IAsyncResult<Array>} The async result.  Responses at index I correlates to request with identifier I.
         */
        executeBatch(requests: DataServiceRequest[], callerContext?: any): IAsyncResult<any[]>;
        private static buildBatchRequest(batchRequestUri, requests);
        /**
         * Parse the batch responses.
         * @param {any[]} batchResponses The server responses.
         * @param {any[]} requests The request objects.
         * @param {any[]} responses The responses passed down to the success callback.
         */
        private static parseBatchResponses(batchResponses, requests, responses);
        /**
         * Helper function to convert data into a stringified JSON object.
         * @param {any} parent The container of the element.
         * @param {any} data The data to be converted to a stringified JSON object.
         * @param {boolean} [modifyDataInPlace] Whether the object passed should be modified in place. If not, a clone is created instead.
         */
        private static toJson(data, parent?, modifyDataInPlace?);
        /**
        * Helper function to convert array into a stringified JSON object following OData specifications.
        * @param {Array} array The data to be converted to a stringified JSON object.
        * @param {any} parent The container of the array.
        * @param {boolean} [modifyDataInPlace] Whether the object passed should be modified in place. If not, a clone is created instead.
        */
        private static arrayToJson(array, parent, modifyDataInPlace?);
        /**
         * Add offset fields to Date object for serialization purposes.
         * @param {Date} dateTime The date.
         * @return {Date} The date with __edmType and __offset fields injected.
         */
        private static toDateTimeOffset(dateTime);
        /**
         * Foramts entity key(s) in request Uri.
         * @param {any} key The key dictionary.
         * @return {string} The formated string of the key(s).
         */
        private static formatKey(key);
        /**
         * Foramts function parameters in request Uri.
         * @param {any} parameters The parameter dictionary.
         * @return {string} The formated and encoded string of the parameters.
         */
        private static formatFunctionParameter(parameters);
        private static addParameter(requestUri, key, value);
    }
}
