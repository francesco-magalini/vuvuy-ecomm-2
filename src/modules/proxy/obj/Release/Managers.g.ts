// <auto-generated />
    ///<reference path='../Entities/CommerceTypes.g.ts' />
    ///<reference path='../Interfaces/IManagers.g.ts' />
    ///<reference path='../Interfaces/IDataServiceRequest.ts' />
    ///<reference path='../CommerceContext.g.ts' />

    module Commerce.Proxy {
    "use strict";

    import IDataServiceRequest = Common.IDataServiceRequest;
    
      /*** StoreOperationsManager ***/
      export class StoreOperationsManager implements Commerce.Proxy.IStoreOperationsManager {
          private _commerceContext: Commerce.Proxy.CommerceContext = null;
          private _callerContext: any;

          constructor(commerceContext: Commerce.Proxy.CommerceContext, callerContext) {
              this._commerceContext = commerceContext;
              this._callerContext = callerContext;
          }

          public roundAmountByTenderTypeAsync(amount: number, tenderTypeId: string): IAsyncResult<number> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().roundAmountByTenderType(amount, tenderTypeId);
              return request.execute<number>(this._callerContext);
          }
      
        public voidSuspendedTransactionsAsync(suspendedCartIds: string[], shiftId: number, shiftTerminalId: string, reasonCodeLines: Entities.ReasonCodeLine[]): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().voidSuspendedTransactions(suspendedCartIds, shiftId, shiftTerminalId, reasonCodeLines);
              return request.execute<void>(this._callerContext);
          }
      
        public getMerchantPropertiesByServiceAccountIdAsync(serviceAccountIds: string[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.PaymentMerchantInformation[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getMerchantPropertiesByServiceAccountId(serviceAccountIds);
              return request.execute<Entities.PaymentMerchantInformation[]>(this._callerContext);
          }
      
        public getStoreSafesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.StoreSafe[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getStoreSafes();
              return request.execute<Entities.StoreSafe[]>(this._callerContext);
          }
      
        public getShiftReconciliationLinesAsync(shiftReconciliationLineRetrievalCriteria: Entities.ShiftReconciliationLineRetrievalCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ShiftReconciliationLine[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getShiftReconciliationLines(shiftReconciliationLineRetrievalCriteria);
              return request.execute<Entities.ShiftReconciliationLine[]>(this._callerContext);
          }
      
        public reconcileLinesAsync(shiftReconciliationLines: Entities.ShiftReconciliationLine[], description: string): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().reconcileLines(shiftReconciliationLines, description);
              return request.execute<void>(this._callerContext);
          }
      
        public undoReconciliationAsync(shiftReconciliationLines: Entities.ShiftReconciliationLine[]): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().undoReconciliation(shiftReconciliationLines);
              return request.execute<void>(this._callerContext);
          }
      
        public getReceiptMasksAsync(receiptTransactionType: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ReceiptMask[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getReceiptMasks(receiptTransactionType);
              return request.execute<Entities.ReceiptMask[]>(this._callerContext);
          }
      
        public getSearchSuggestionsAsync(searchSuggestionCriteria: Entities.SearchSuggestionCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SearchSuggestion[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getSearchSuggestions(searchSuggestionCriteria);
              return request.execute<Entities.SearchSuggestion[]>(this._callerContext);
          }
      
        public startSessionAsync(transactionId: string): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().startSession(transactionId);
              return request.execute<void>(this._callerContext);
          }
      
        public endSessionAsync(transactionId: string): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().endSession(transactionId);
              return request.execute<void>(this._callerContext);
          }
      
        public activateDeviceAsync(deviceNumber: string, terminalId: string, deviceId: string, forceActivate: boolean, deviceType: number): IAsyncResult<Entities.DeviceActivationResult> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().activateDevice(deviceNumber, terminalId, deviceId, forceActivate, deviceType);
              return request.execute<Entities.DeviceActivationResult>(this._callerContext);
          }
      
        public massActivateDeviceAsync(deviceNumber: string, terminalId: string, deviceId: string, deviceType: number): IAsyncResult<Entities.DeviceActivationResult> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().massActivateDevice(deviceNumber, terminalId, deviceId, deviceType);
              return request.execute<Entities.DeviceActivationResult>(this._callerContext);
          }
      
        public deactivateDeviceAsync(transactionId: string): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().deactivateDevice(transactionId);
              return request.execute<void>(this._callerContext);
          }
      
        public createHardwareStationTokenAsync(): IAsyncResult<Entities.CreateHardwareStationTokenResult> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().createHardwareStationToken();
              return request.execute<Entities.CreateHardwareStationTokenResult>(this._callerContext);
          }
      
        public validateHardwareStationTokenAsync(deviceNumber: string, hardwareStationToken: string): IAsyncResult<Entities.ValidateHardwareStationTokenResult> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().validateHardwareStationToken(deviceNumber, hardwareStationToken);
              return request.execute<Entities.ValidateHardwareStationTokenResult>(this._callerContext);
          }
      
        public getBarcodeByIdAsync(barcodeId: string): IAsyncResult<Entities.Barcode> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().getBarcodeById(barcodeId);
              return request.execute<Entities.Barcode>(this._callerContext);
          }
      
        public getButtonGridByIdAsync(buttonGridId: string): IAsyncResult<Entities.ButtonGrid> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().getButtonGridById(buttonGridId);
              return request.execute<Entities.ButtonGrid>(this._callerContext);
          }
      
        public getButtonGridsByIdsAsync(getButtonGridsByIdsCriteria: Entities.GetButtonGridsByIdsCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ButtonGrid[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getButtonGridsByIds(getButtonGridsByIdsCriteria);
              return request.execute<Entities.ButtonGrid[]>(this._callerContext);
          }
      
        public getCardTypesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CardTypeInfo[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getCardTypes();
              return request.execute<Entities.CardTypeInfo[]>(this._callerContext);
          }
      
        public resolveCardTypesAsync(cardNumberPrefix: string, cardType: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CardTypeInfo[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.resolveCardTypes(cardNumberPrefix, cardType);
              return request.execute<Entities.CardTypeInfo[]>(this._callerContext);
          }
      
        public getSupportedPaymentCardTypesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<string[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getSupportedPaymentCardTypes();
              return request.execute<string[]>(this._callerContext);
          }
      
        public getCitiesAsync(countryRegionId: string, stateProvinceId: string, countyId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CityInfo[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getCities(countryRegionId, stateProvinceId, countyId);
              return request.execute<Entities.CityInfo[]>(this._callerContext);
          }
      
        public getCountryRegionsForShippingAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CountryRegionInfo[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getCountryRegionsForShipping();
              return request.execute<Entities.CountryRegionInfo[]>(this._callerContext);
          }
      
        public getCountryRegionsByLanguageIdAsync(languageId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CountryRegionInfo[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getCountryRegionsByLanguageId(languageId);
              return request.execute<Entities.CountryRegionInfo[]>(this._callerContext);
          }
      
        public getCountiesAsync(countryRegionId: string, stateProvinceId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CountyInfo[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getCounties(countryRegionId, stateProvinceId);
              return request.execute<Entities.CountyInfo[]>(this._callerContext);
          }
      
        public getCreditMemoByIdAsync(creditMemoId: string): IAsyncResult<Entities.CreditMemo> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().getCreditMemoById(creditMemoId);
              return request.execute<Entities.CreditMemo>(this._callerContext);
          }
      
        public getDownloadIntervalAsync(dataStoreName: string): IAsyncResult<string> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().getDownloadInterval(dataStoreName);
              return request.execute<string>(this._callerContext);
          }
      
        public getTerminalDataStoreNameAsync(terminalId: string): IAsyncResult<string> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().getTerminalDataStoreName(terminalId);
              return request.execute<string>(this._callerContext);
          }
      
        public getDownloadLinkAsync(dataStoreName: string, downloadSessionId: number): IAsyncResult<string> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().getDownloadLink(dataStoreName, downloadSessionId);
              return request.execute<string>(this._callerContext);
          }
      
        public getDataDownloadParametersByTerminalAsync(terminalDataDownloadRequestInfo: Entities.TerminalDataDownloadRequestInfo): IAsyncResult<Entities.DataDownloadParameters> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().getDataDownloadParametersByTerminal(terminalDataDownloadRequestInfo);
              return request.execute<Entities.DataDownloadParameters>(this._callerContext);
          }
      
        public getDataUploadParametersByTerminalAsync(terminalDataUploadRequestInfo: Entities.TerminalDataUploadRequestInfo): IAsyncResult<Entities.DataUploadParameters> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().getDataUploadParametersByTerminal(terminalDataUploadRequestInfo);
              return request.execute<Entities.DataUploadParameters>(this._callerContext);
          }
      
        public getDownloadSessionsAsync(dataStoreName: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.DownloadSession[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getDownloadSessions(dataStoreName);
              return request.execute<Entities.DownloadSession[]>(this._callerContext);
          }
      
        public getInitialDownloadSessionsAsync(dataStoreName: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.DownloadSession[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getInitialDownloadSessions(dataStoreName);
              return request.execute<Entities.DownloadSession[]>(this._callerContext);
          }
      
        public getUploadJobDefinitionsAsync(dataStoreName: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<string[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getUploadJobDefinitions(dataStoreName);
              return request.execute<string[]>(this._callerContext);
          }
      
        public getUploadIntervalAsync(dataStoreName: string): IAsyncResult<string> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().getUploadInterval(dataStoreName);
              return request.execute<string>(this._callerContext);
          }
      
        public postOfflineTransactionsAsync(offlineTransactionForMPOS: string[]): IAsyncResult<boolean> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().postOfflineTransactions(offlineTransactionForMPOS);
              return request.execute<boolean>(this._callerContext);
          }
      
        public getRetailTrialPlanOfferAsync(): IAsyncResult<boolean> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().getRetailTrialPlanOffer();
              return request.execute<boolean>(this._callerContext);
          }
      
        public getLatestNumberSequenceAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.NumberSequenceSeedData[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getLatestNumberSequence();
              return request.execute<Entities.NumberSequenceSeedData[]>(this._callerContext);
          }
      
        public getReceiptNumberResetInfoAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ReceiptNumberResetInfo[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getReceiptNumberResetInfo();
              return request.execute<Entities.ReceiptNumberResetInfo[]>(this._callerContext);
          }
      
        public getLoyaltyRewardPointActivityTimelineAsync(cardNumber: string, rewardPointId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.LoyaltyRewardPointActivity[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getLoyaltyRewardPointActivityTimeline(cardNumber, rewardPointId);
              return request.execute<Entities.LoyaltyRewardPointActivity[]>(this._callerContext);
          }
      
        public getLoyaltyRewardPointActivityTimelineForExpiredPointsAsync(cardNumber: string, rewardPointId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.LoyaltyRewardPointActivity[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getLoyaltyRewardPointActivityTimelineForExpiredPoints(cardNumber, rewardPointId);
              return request.execute<Entities.LoyaltyRewardPointActivity[]>(this._callerContext);
          }
      
        public calculateTotalCurrencyAmountAsync(currenciesAmount: Entities.CurrencyRequest[]): IAsyncResult<Entities.CurrencyAmount> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().calculateTotalCurrencyAmount(currenciesAmount);
              return request.execute<Entities.CurrencyAmount>(this._callerContext);
          }
      
        public getDiscountCodeAsync(discountCode: string): IAsyncResult<Entities.DiscountCode> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().getDiscountCode(discountCode);
              return request.execute<Entities.DiscountCode>(this._callerContext);
          }
      
        public getDiscountCodesByOfferIdAsync(offerId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.DiscountCode[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getDiscountCodesByOfferId(offerId);
              return request.execute<Entities.DiscountCode[]>(this._callerContext);
          }
      
        public getDiscountCodesByKeywordAsync(keyword: string, activeDate: Date, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.DiscountCode[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getDiscountCodesByKeyword(keyword, activeDate);
              return request.execute<Entities.DiscountCode[]>(this._callerContext);
          }
      
        public getDistrictsAsync(countryRegionId: string, stateProvinceId: string, countyId: string, cityName: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.DistrictInfo[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getDistricts(countryRegionId, stateProvinceId, countyId, cityName);
              return request.execute<Entities.DistrictInfo[]>(this._callerContext);
          }
      
        public getHardwareStationProfilesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.HardwareStationProfile[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getHardwareStationProfiles();
              return request.execute<Entities.HardwareStationProfile[]>(this._callerContext);
          }
      
        public getHardwareProfileByIdAsync(hardwareProfileId: string): IAsyncResult<Entities.HardwareProfile> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().getHardwareProfileById(hardwareProfileId);
              return request.execute<Entities.HardwareProfile>(this._callerContext);
          }
      
        public getLocalizedStringsAsync(languageId: string, textId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.LocalizedString[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getLocalizedStrings(languageId, textId);
              return request.execute<Entities.LocalizedString[]>(this._callerContext);
          }
      
        public getOperationPermissionByIdAsync(operationId: number): IAsyncResult<Entities.OperationPermission> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().getOperationPermissionById(operationId);
              return request.execute<Entities.OperationPermission>(this._callerContext);
          }
      
        public getReasonCodesByIdAsync(reasonCodeGroupId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ReasonCode[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getReasonCodesById(reasonCodeGroupId);
              return request.execute<Entities.ReasonCode[]>(this._callerContext);
          }
      
        public searchReportDataSetAsync(reportId: string, parameters: Entities.CommerceProperty[]): IAsyncResult<Entities.ReportDataSet> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().searchReportDataSet(reportId, parameters);
              return request.execute<Entities.ReportDataSet>(this._callerContext);
          }
      
        public getReportDataSetByIdAsync(reportId: string): IAsyncResult<Entities.ReportDataSet> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().getReportDataSetById(reportId);
              return request.execute<Entities.ReportDataSet>(this._callerContext);
          }
      
        public getSrsReportDataSetAsync(reportId: string, parameters: Entities.CommerceProperty[]): IAsyncResult<Entities.ReportDataSet> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().getSrsReportDataSet(reportId, parameters);
              return request.execute<Entities.ReportDataSet>(this._callerContext);
          }
      
        public getIncomeExpenseAccountsAsync(incomeExpenseAccountType: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.IncomeExpenseAccount[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getIncomeExpenseAccounts(incomeExpenseAccountType);
              return request.execute<Entities.IncomeExpenseAccount[]>(this._callerContext);
          }
      
        public getStateProvincesAsync(countryRegionId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.StateProvinceInfo[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getStateProvinces(countryRegionId);
              return request.execute<Entities.StateProvinceInfo[]>(this._callerContext);
          }
      
        public getZipCodesAsync(countryRegionId: string, stateProvinceId: string, countyId: string, cityName: string, district: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ZipCodeInfo[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getZipCodes(countryRegionId, stateProvinceId, countyId, cityName, district);
              return request.execute<Entities.ZipCodeInfo[]>(this._callerContext);
          }
      
        public getAddressFromZipCodeAsync(countryRegionId: string, zipPostalCode: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ZipCodeInfo[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getAddressFromZipCode(countryRegionId, zipPostalCode);
              return request.execute<Entities.ZipCodeInfo[]>(this._callerContext);
          }
      
        public disassembleKitTransactionsAsync(kitTransaction: Entities.KitTransaction): IAsyncResult<Entities.KitTransaction> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().disassembleKitTransactions(kitTransaction);
              return request.execute<Entities.KitTransaction>(this._callerContext);
          }
      
        public issueLoyaltyCardAsync(loyaltyCard: Entities.LoyaltyCard): IAsyncResult<Entities.LoyaltyCard> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().issueLoyaltyCard(loyaltyCard);
              return request.execute<Entities.LoyaltyCard>(this._callerContext);
          }
      
        public getLoyaltyCardAsync(cardNumber: string): IAsyncResult<Entities.LoyaltyCard> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().getLoyaltyCard(cardNumber);
              return request.execute<Entities.LoyaltyCard>(this._callerContext);
          }
      
        public getCustomerLoyaltyCardsAsync(accountNumber: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.LoyaltyCard[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getCustomerLoyaltyCards(accountNumber);
              return request.execute<Entities.LoyaltyCard[]>(this._callerContext);
          }
      
        public getLoyaltyCardTransactionsAsync(cardNumber: string, rewardPointId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.LoyaltyCardTransaction[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getLoyaltyCardTransactions(cardNumber, rewardPointId);
              return request.execute<Entities.LoyaltyCardTransaction[]>(this._callerContext);
          }
      
        public getLoyaltyRewardPointsExpiringSoonAsync(cardNumber: string, rewardPointId: string, daysToExpiry: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.LoyaltyRewardPointActivity[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getLoyaltyRewardPointsExpiringSoon(cardNumber, rewardPointId, daysToExpiry);
              return request.execute<Entities.LoyaltyRewardPointActivity[]>(this._callerContext);
          }
      
        public searchJournalTransactionsAsync(searchCriteria: Entities.TransactionSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Transaction[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.searchJournalTransactions(searchCriteria);
              return request.execute<Entities.Transaction[]>(this._callerContext);
          }
      
        public getGiftCardAsync(giftCardId: string, tenderTypeId: string, pin: string, expirationMonth: number, expirationYear: number): IAsyncResult<Entities.GiftCard> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().getGiftCard(giftCardId, tenderTypeId, pin, expirationMonth, expirationYear);
              return request.execute<Entities.GiftCard>(this._callerContext);
          }
      
        public getGiftCardInquiryAsync(giftCardId: string): IAsyncResult<Entities.GiftCard> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().getGiftCardInquiry(giftCardId);
              return request.execute<Entities.GiftCard>(this._callerContext);
          }
      
        public getNonSalesTransactionsAsync(shiftId: string, shiftTerminalId: string, nonSalesTenderTypeValue: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.NonSalesTransaction[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getNonSalesTransactions(shiftId, shiftTerminalId, nonSalesTenderTypeValue);
              return request.execute<Entities.NonSalesTransaction[]>(this._callerContext);
          }
      
        public createNonSalesTransactionAsync(nonSalesTransaction: Entities.NonSalesTransaction): IAsyncResult<Entities.NonSalesTransaction> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().createNonSalesTransaction(nonSalesTransaction);
              return request.execute<Entities.NonSalesTransaction>(this._callerContext);
          }
      
        public createDropAndDeclareTransactionAsync(dropAndDeclareTransaction: Entities.DropAndDeclareTransaction): IAsyncResult<Entities.DropAndDeclareTransaction> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().createDropAndDeclareTransaction(dropAndDeclareTransaction);
              return request.execute<Entities.DropAndDeclareTransaction>(this._callerContext);
          }
      
        public getTaxOverridesAsync(overrideBy: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.TaxOverride[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getTaxOverrides(overrideBy);
              return request.execute<Entities.TaxOverride[]>(this._callerContext);
          }
      
        public getCustomerBalanceAsync(accountNumber: string, invoiceAccountNumber: string): IAsyncResult<Entities.CustomerBalances> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().getCustomerBalance(accountNumber, invoiceAccountNumber);
              return request.execute<Entities.CustomerBalances>(this._callerContext);
          }
      
        public initiateLinkToExistingCustomerAsync(email: string, activationToken: string, emailTemplateId: string, emailProperties: Entities.NameValuePair[]): IAsyncResult<Entities.LinkToExistingCustomerResult> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().initiateLinkToExistingCustomer(email, activationToken, emailTemplateId, emailProperties);
              return request.execute<Entities.LinkToExistingCustomerResult>(this._callerContext);
          }
      
        public finalizeLinkToExistingCustomerAsync(email: string, activationToken: string): IAsyncResult<Entities.LinkToExistingCustomerResult> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().finalizeLinkToExistingCustomer(email, activationToken);
              return request.execute<Entities.LinkToExistingCustomerResult>(this._callerContext);
          }
      
        public unlinkFromExistingCustomerAsync(): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().unlinkFromExistingCustomer();
              return request.execute<void>(this._callerContext);
          }
      
        public getOfflineSyncStatusAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.OfflineSyncStatsLine[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getOfflineSyncStatus();
              return request.execute<Entities.OfflineSyncStatsLine[]>(this._callerContext);
          }
      
        public getOfflinePendingTransactionCountAsync(): IAsyncResult<number> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().getOfflinePendingTransactionCount();
              return request.execute<number>(this._callerContext);
          }
      
        public getOfflinePendingTransactionCountByShiftAsync(shiftId: number, shiftTerminalId: string): IAsyncResult<number> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().getOfflinePendingTransactionCountByShift(shiftId, shiftTerminalId);
              return request.execute<number>(this._callerContext);
          }
      
        public updateDownloadSessionAsync(downloadSession: Entities.DownloadSession): IAsyncResult<boolean> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().updateDownloadSession(downloadSession);
              return request.execute<boolean>(this._callerContext);
          }
      
        public updateApplicationVersionAsync(appVersion: string): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().updateApplicationVersion(appVersion);
              return request.execute<void>(this._callerContext);
          }
      
        public getStorageAccessTokenForUploadAsync(): IAsyncResult<Entities.StorageAccessToken> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().getStorageAccessTokenForUpload();
              return request.execute<Entities.StorageAccessToken>(this._callerContext);
          }
      
        public getBusinessProcessModelLibrariesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Framework[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getBusinessProcessModelLibraries();
              return request.execute<Entities.Framework[]>(this._callerContext);
          }
      
        public getBusinessProcessModelLibraryAsync(businessProcessModelFrameworkLineId: number, hierarchyDepth: number): IAsyncResult<Entities.Framework> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().getBusinessProcessModelLibrary(businessProcessModelFrameworkLineId, hierarchyDepth);
              return request.execute<Entities.Framework>(this._callerContext);
          }
      
        public searchTaskGuidesByTitleAsync(businessProcessModelFrameworkLineId: number, taskGuideSearchText: string, queryTypeValue: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.TaskGuidesSearchResult[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.searchTaskGuidesByTitle(businessProcessModelFrameworkLineId, taskGuideSearchText, queryTypeValue);
              return request.execute<Entities.TaskGuidesSearchResult[]>(this._callerContext);
          }
      
        public generateBusinessProcessModelPackageAsync(taskRecording: Entities.Recording): IAsyncResult<string> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().generateBusinessProcessModelPackage(taskRecording);
              return request.execute<string>(this._callerContext);
          }
      
        public downloadRecordingAsync(businessProcessModelLineId: number): IAsyncResult<Entities.Recording> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().downloadRecording(businessProcessModelLineId);
              return request.execute<Entities.Recording>(this._callerContext);
          }
      
        public loadRecordingFromFileAsync(recordingUrl: string): IAsyncResult<Entities.Recording> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().loadRecordingFromFile(recordingUrl);
              return request.execute<Entities.Recording>(this._callerContext);
          }
      
        public generateRecordingFileAsync(taskRecording: Entities.Recording): IAsyncResult<string> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().generateRecordingFile(taskRecording);
              return request.execute<string>(this._callerContext);
          }
      
        public generateTrainingDocumentAsync(taskRecording: Entities.Recording): IAsyncResult<string> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().generateTrainingDocument(taskRecording);
              return request.execute<string>(this._callerContext);
          }
      
        public generateRecordingBundleAsync(taskRecording: Entities.Recording): IAsyncResult<string> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().generateRecordingBundle(taskRecording);
              return request.execute<string>(this._callerContext);
          }
      
        public uploadRecordingAsync(taskRecording: Entities.Recording, businessProcessModelLineId: number): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().uploadRecording(taskRecording, businessProcessModelLineId);
              return request.execute<void>(this._callerContext);
          }
      
        public getAttributeDefinitionsAsync(attributeDefinitionCriteria: Entities.AttributeDefinitionCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.AttributeDefinition[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getAttributeDefinitions(attributeDefinitionCriteria);
              return request.execute<Entities.AttributeDefinition[]>(this._callerContext);
          }
      
        public getAttributeGroupDefinitionsAsync(attributeGroupDefinitionCriteria: Entities.AttributeGroupDefinitionCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.AttributeGroupDefinition[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getAttributeGroupDefinitions(attributeGroupDefinitionCriteria);
              return request.execute<Entities.AttributeGroupDefinition[]>(this._callerContext);
          }
      
        public saveFiscalTransactionAsync(fiscalTransaction: Entities.FiscalTransaction): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().saveFiscalTransaction(fiscalTransaction);
              return request.execute<void>(this._callerContext);
          }
      
        public validatePrintReceiptCopyAllowedAsync(salesOrderToPrint: Entities.SalesOrder): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().validatePrintReceiptCopyAllowed(salesOrderToPrint);
              return request.execute<void>(this._callerContext);
          }
      
        public registerAuditEventAsync(auditEvent: Entities.AuditEvent): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().registerAuditEvent(auditEvent);
              return request.execute<void>(this._callerContext);
          }
      
        public registerAndGetAuditEventAsync(auditEvent: Entities.AuditEvent): IAsyncResult<Entities.AuditEvent> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().registerAndGetAuditEvent(auditEvent);
              return request.execute<Entities.AuditEvent>(this._callerContext);
          }
      
        public getInventoryAvailableToPromiseAsync(productId: number, itemId: string, inventLocationId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.InventoryAvailableToPromise[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getInventoryAvailableToPromise(productId, itemId, inventLocationId);
              return request.execute<Entities.InventoryAvailableToPromise[]>(this._callerContext);
          }
      
        public getSalesOrdersWithNoFiscalTransactionsAsync(storeNumber: string, terminalId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SalesOrder[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getSalesOrdersWithNoFiscalTransactions(storeNumber, terminalId);
              return request.execute<Entities.SalesOrder[]>(this._callerContext);
          }
      
        public getNotificationsAsync(subscribedOperations: number[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.NotificationItem[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getNotifications(subscribedOperations);
              return request.execute<Entities.NotificationItem[]>(this._callerContext);
          }
      
        public acknowledgeNotificationsAsync(lastPullDateTime: Date): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().acknowledgeNotifications(lastPullDateTime);
              return request.execute<void>(this._callerContext);
          }
      
        public getFiscalIntegrationFiscalDocumentAsync(hardwareProfileId: string, functionalityProfileGroupId: string, fiscalIntegrationDocumentRetrievalCriteria: Entities.FiscalIntegrationDocumentRetrievalCriteria, connectorType: number): IAsyncResult<Entities.FiscalIntegrationDocument> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().getFiscalIntegrationFiscalDocument(hardwareProfileId, functionalityProfileGroupId, fiscalIntegrationDocumentRetrievalCriteria, connectorType);
              return request.execute<Entities.FiscalIntegrationDocument>(this._callerContext);
          }
      
        public getFiscalIntegrationNonFiscalDocumentAsync(hardwareProfileId: string, functionalityProfileGroupId: string, fiscalIntegrationDocumentRetrievalCriteria: Entities.FiscalIntegrationDocumentRetrievalCriteria, connectorType: number): IAsyncResult<Entities.FiscalIntegrationDocument> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().getFiscalIntegrationNonFiscalDocument(hardwareProfileId, functionalityProfileGroupId, fiscalIntegrationDocumentRetrievalCriteria, connectorType);
              return request.execute<Entities.FiscalIntegrationDocument>(this._callerContext);
          }
      
        public getFiscalIntegrationFiscalServiceSetupDocumentAsync(hardwareProfileId: string, functionalityProfileGroupId: string, connectorType: number): IAsyncResult<Entities.FiscalIntegrationDocument> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().getFiscalIntegrationFiscalServiceSetupDocument(hardwareProfileId, functionalityProfileGroupId, connectorType);
              return request.execute<Entities.FiscalIntegrationDocument>(this._callerContext);
          }
      
        public getFiscalIntegrationFiscalServiceReadDataDocumentAsync(hardwareProfileId: string, functionalityProfileGroupId: string, connectorType: number): IAsyncResult<Entities.FiscalIntegrationDocument> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().getFiscalIntegrationFiscalServiceReadDataDocument(hardwareProfileId, functionalityProfileGroupId, connectorType);
              return request.execute<Entities.FiscalIntegrationDocument>(this._callerContext);
          }
      
        public processFiscalIntegrationFiscalServiceReadDataResultAsync(hardwareProfileId: string, functionalityProfileGroupId: string, documentToProcess: string, connectorType: number): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().processFiscalIntegrationFiscalServiceReadDataResult(hardwareProfileId, functionalityProfileGroupId, documentToProcess, connectorType);
              return request.execute<void>(this._callerContext);
          }
      
        public saveFiscalIntegrationRegistrationResultAsync(hardwareProfileId: string, functionalityProfileGroupId: string, registrationResult: Entities.FiscalIntegrationRegistrationResult, connectorType: number): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().saveFiscalIntegrationRegistrationResult(hardwareProfileId, functionalityProfileGroupId, registrationResult, connectorType);
              return request.execute<void>(this._callerContext);
          }
      
        public getFiscalIntegrationRegistrationProcessAsync(): IAsyncResult<Entities.FiscalIntegrationRegistrationProcess> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().getFiscalIntegrationRegistrationProcess();
              return request.execute<Entities.FiscalIntegrationRegistrationProcess>(this._callerContext);
          }
      
        public getChannelSupportedFiscalIntegrationEventsByGroupAsync(functionalityProfileGroupId: string): IAsyncResult<Entities.FiscalIntegrationSupportedEvents> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().getChannelSupportedFiscalIntegrationEventsByGroup(functionalityProfileGroupId);
              return request.execute<Entities.FiscalIntegrationSupportedEvents>(this._callerContext);
          }
      
        public getFiscalIntegrationTechnicalProfilesAsync(hardwareProfileId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.FiscalIntegrationTechnicalProfile[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getFiscalIntegrationTechnicalProfiles(hardwareProfileId);
              return request.execute<Entities.FiscalIntegrationTechnicalProfile[]>(this._callerContext);
          }
      
        public getFiscalIntegrationTechnicalProfilesByFunctionalityGroupIdsAsync(hardwareProfileId: string, functionalityProfileGroupId: string[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.FiscalIntegrationTechnicalProfile[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getFiscalIntegrationTechnicalProfilesByFunctionalityGroupIds(hardwareProfileId, functionalityProfileGroupId);
              return request.execute<Entities.FiscalIntegrationTechnicalProfile[]>(this._callerContext);
          }
      
        public backupFiscalRegistrationProcessContextAsync(terminalId: string, storeNumber: string, channelId: number, fiscalProcessCompleted: boolean, fiscalIntegrationSerializedContext: string): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().backupFiscalRegistrationProcessContext(terminalId, storeNumber, channelId, fiscalProcessCompleted, fiscalIntegrationSerializedContext);
              return request.execute<void>(this._callerContext);
          }
      
        public getActiveFiscalRegistrationProcessContextBackupAsync(terminalId: string, storeNumber: string, channelId: number): IAsyncResult<string> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().getActiveFiscalRegistrationProcessContextBackup(terminalId, storeNumber, channelId);
              return request.execute<string>(this._callerContext);
          }
      
        public getFiscalIntegrationTechnicalProfilesBySearchCriteriaAsync(hardwareProfileId: string, fiscalIntegrationTechnicalProfileSearchCriteria: Entities.FiscalIntegrationTechnicalProfileSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.FiscalIntegrationTechnicalProfile[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getFiscalIntegrationTechnicalProfilesBySearchCriteria(hardwareProfileId, fiscalIntegrationTechnicalProfileSearchCriteria);
              return request.execute<Entities.FiscalIntegrationTechnicalProfile[]>(this._callerContext);
          }
      
        public getFiscalIntegrationServiceStatusAsync(fiscalIntegrationServiceInfo: Entities.FiscalIntegrationServiceInfo): IAsyncResult<Entities.FiscalIntegrationServiceStatus> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().getFiscalIntegrationServiceStatus(fiscalIntegrationServiceInfo);
              return request.execute<Entities.FiscalIntegrationServiceStatus>(this._callerContext);
          }
      
        public submitFiscalIntegrationDocumentAsync(documentToSubmit: string, fiscalIntegrationServiceInfo: Entities.FiscalIntegrationServiceInfo): IAsyncResult<Entities.FiscalIntegrationServiceCommunicationResult> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().submitFiscalIntegrationDocument(documentToSubmit, fiscalIntegrationServiceInfo);
              return request.execute<Entities.FiscalIntegrationServiceCommunicationResult>(this._callerContext);
          }
      
        public getFeatureStatesAsync(featureNames: string[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.FeatureState[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getFeatureStates(featureNames);
              return request.execute<Entities.FeatureState[]>(this._callerContext);
          }
      
        public getLastFiscalIntegrationSequentialSignaturesAsync(sequentialKeys: string[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.FiscalIntegrationSequentialSignatureData[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getLastFiscalIntegrationSequentialSignatures(sequentialKeys);
              return request.execute<Entities.FiscalIntegrationSequentialSignatureData[]>(this._callerContext);
          }
      
        public getAvailablePromotionsAsync(searchCriteria: Entities.DiscountsSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Promotion[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getAvailablePromotions(searchCriteria);
              return request.execute<Entities.Promotion[]>(this._callerContext);
          }
      
        public createFiscalTransactionAsync(functionalityProfileGroupId: string, registrationResult: Entities.FiscalIntegrationRegistrationResult, connectorType: number): IAsyncResult<Entities.FiscalTransaction> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().createFiscalTransaction(functionalityProfileGroupId, registrationResult, connectorType);
              return request.execute<Entities.FiscalTransaction>(this._callerContext);
          }
      
        public getButtonGridsAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ButtonGrid[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getButtonGrids();
              return request.execute<Entities.ButtonGrid[]>(this._callerContext);
          }
      
        public getButtonGridsByScreenSizeAsync(height: number, width: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ButtonGrid[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getButtonGridsByScreenSize(height, width);
              return request.execute<Entities.ButtonGrid[]>(this._callerContext);
          }
      
        public getCashDeclarationsAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CashDeclaration[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getCashDeclarations();
              return request.execute<Entities.CashDeclaration[]>(this._callerContext);
          }
      
        public getCountryRegionsAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CountryRegionInfo[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getCountryRegions();
              return request.execute<Entities.CountryRegionInfo[]>(this._callerContext);
          }
      
        public getCustomerGroupsAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CustomerGroup[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getCustomerGroups();
              return request.execute<Entities.CustomerGroup[]>(this._callerContext);
          }
      
        public getDeliveryOptionsAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.DeliveryOption[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getDeliveryOptions();
              return request.execute<Entities.DeliveryOption[]>(this._callerContext);
          }
      
        public getChannelsByTypeAsync(channelType: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ChannelIdentity[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getChannelsByType(channelType);
              return request.execute<Entities.ChannelIdentity[]>(this._callerContext);
          }
      
        public getChannelsAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ChannelIdentity[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getChannels();
              return request.execute<Entities.ChannelIdentity[]>(this._callerContext);
          }
      
        public getEnvironmentConfigurationAsync(): IAsyncResult<Entities.EnvironmentConfiguration> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().getEnvironmentConfiguration();
              return request.execute<Entities.EnvironmentConfiguration>(this._callerContext);
          }
      
        public getSearchConfigurationAsync(): IAsyncResult<Entities.SearchConfiguration> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().getSearchConfiguration();
              return request.execute<Entities.SearchConfiguration>(this._callerContext);
          }
      
        public getExtensionPackageDefinitionsAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ExtensionPackageDefinition[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getExtensionPackageDefinitions();
              return request.execute<Entities.ExtensionPackageDefinition[]>(this._callerContext);
          }
      
        public getExtensionProfileAsync(): IAsyncResult<Entities.ExtensionProfile> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().getExtensionProfile();
              return request.execute<Entities.ExtensionProfile>(this._callerContext);
          }
      
        public getDeviceConfigurationAsync(): IAsyncResult<Entities.DeviceConfiguration> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().getDeviceConfiguration();
              return request.execute<Entities.DeviceConfiguration>(this._callerContext);
          }
      
        public getVisualProfileAsync(): IAsyncResult<Entities.VisualProfile> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().getVisualProfile();
              return request.execute<Entities.VisualProfile>(this._callerContext);
          }
      
        public getLanguagesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SupportedLanguage[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getLanguages();
              return request.execute<Entities.SupportedLanguage[]>(this._callerContext);
          }
      
        public getAffiliationsAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Affiliation[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getAffiliations();
              return request.execute<Entities.Affiliation[]>(this._callerContext);
          }
      
        public getOperationPermissionsAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.OperationPermission[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getOperationPermissions();
              return request.execute<Entities.OperationPermission[]>(this._callerContext);
          }
      
        public getReasonCodesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ReasonCode[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getReasonCodes();
              return request.execute<Entities.ReasonCode[]>(this._callerContext);
          }
      
        public getReturnOrderReasonCodesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ReasonCode[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getReturnOrderReasonCodes();
              return request.execute<Entities.ReasonCode[]>(this._callerContext);
          }
      
        public getSalesTaxGroupsAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SalesTaxGroup[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getSalesTaxGroups();
              return request.execute<Entities.SalesTaxGroup[]>(this._callerContext);
          }
      
        public getTenderTypesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.TenderType[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getTenderTypes();
              return request.execute<Entities.TenderType[]>(this._callerContext);
          }
      
        public getUnitsOfMeasureAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.UnitOfMeasure[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getUnitsOfMeasure();
              return request.execute<Entities.UnitOfMeasure[]>(this._callerContext);
          }
      
        public getDiscountCodesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.DiscountCode[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getDiscountCodes();
              return request.execute<Entities.DiscountCode[]>(this._callerContext);
          }
      
        public getCurrenciesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Currency[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getCurrencies();
              return request.execute<Entities.Currency[]>(this._callerContext);
          }
      
        public getCurrenciesAmountAsync(currencyCode: string, amount: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CurrencyAmount[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getCurrenciesAmount(currencyCode, amount);
              return request.execute<Entities.CurrencyAmount[]>(this._callerContext);
          }
      
        public getCommissionSalesGroupsAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CommissionSalesGroup[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getCommissionSalesGroups();
              return request.execute<Entities.CommissionSalesGroup[]>(this._callerContext);
          }
      
        public searchCommissionSalesGroupsAsync(searchText: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CommissionSalesGroup[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.searchCommissionSalesGroups(searchText);
              return request.execute<Entities.CommissionSalesGroup[]>(this._callerContext);
          }
      
        public getPaymentMerchantInformationAsync(hardwareProfileId: string): IAsyncResult<Entities.PaymentMerchantInformation> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().getPaymentMerchantInformation(hardwareProfileId);
              return request.execute<Entities.PaymentMerchantInformation>(this._callerContext);
          }
      
        public getPaymentPropertiesIfModifiedAsync(hardwareProfileId: string, merchantInformationHash: string): IAsyncResult<Entities.PaymentMerchantInformation> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().getPaymentPropertiesIfModified(hardwareProfileId, merchantInformationHash);
              return request.execute<Entities.PaymentMerchantInformation>(this._callerContext);
          }
      
        public getOnlineChannelPublishStatusAsync(): IAsyncResult<number> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().getOnlineChannelPublishStatus();
              return request.execute<number>(this._callerContext);
          }
      
        public setOnlineChannelPublishStatusAsync(publishingStatus: number, statusMessage: string): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().setOnlineChannelPublishStatus(publishingStatus, statusMessage);
              return request.execute<void>(this._callerContext);
          }
      
        public getInventoryConfigurationAsync(): IAsyncResult<Entities.ChannelInventoryConfiguration> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().getInventoryConfiguration();
              return request.execute<Entities.ChannelInventoryConfiguration>(this._callerContext);
          }
      
        public getAvailableDevicesAsync(deviceType: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Device[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getAvailableDevices(deviceType);
              return request.execute<Entities.Device[]>(this._callerContext);
          }
      
        public getImageBlobAsync(imageId: number): IAsyncResult<Entities.MediaBlob> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().getImageBlob(imageId);
              return request.execute<Entities.MediaBlob>(this._callerContext);
          }
      
        public getExtensibleEnumerationsAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ExtensibleEnumerationContainer[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getExtensibleEnumerations();
              return request.execute<Entities.ExtensibleEnumerationContainer[]>(this._callerContext);
          }
      
        public getAddressPurposesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.AddressPurpose[]> {
              var query = this._commerceContext.storeOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getAddressPurposes();
              return request.execute<Entities.AddressPurpose[]>(this._callerContext);
          }
      
        public getReturnPolicyAsync(): IAsyncResult<Entities.ReturnPolicy> {
              var request: IDataServiceRequest = this._commerceContext.storeOperations().getReturnPolicy();
              return request.execute<Entities.ReturnPolicy>(this._callerContext);
          }
      
        
      }
      
      /*** CategoryManager ***/
      export class CategoryManager implements Commerce.Proxy.ICategoryManager {
          private _commerceContext: Commerce.Proxy.CommerceContext = null;
          private _callerContext: any;

          constructor(commerceContext: Commerce.Proxy.CommerceContext, callerContext) {
              this._commerceContext = commerceContext;
              this._callerContext = callerContext;
          }

          public createAsync(entity: Entities.Category): IAsyncResult<Entities.Category> {
              var request: IDataServiceRequest = this._commerceContext.categories().create(entity);
              return request.execute<Entities.Category>(this._callerContext);
          }

          public readAsync(recordId: number): IAsyncResult<Entities.Category> {
              var request: IDataServiceRequest = this._commerceContext.categories(recordId).read();
              return request.execute<Entities.Category>(this._callerContext);
          }

          public readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Category[]> {
              var request: IDataServiceRequest = this._commerceContext.categories().resultSettings(queryResultSettings).read();
              return request.execute<Entities.Category[]>(this._callerContext);
          }

          public updateAsync(entity: Entities.Category): IAsyncResult<Entities.Category> {
              var request: IDataServiceRequest = this._commerceContext.categories(entity.RecordId).update(entity);
              return request.execute<Entities.Category>(this._callerContext);
          }

          public deleteAsync(entity: Entities.Category): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.categories(entity.RecordId).delete();
              return request.execute<Entities.Category>(this._callerContext);
          }

          public getCategoriesAsync(channelId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Category[]> {
              var query = this._commerceContext.categories();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getCategories(channelId);
              return request.execute<Entities.Category[]>(this._callerContext);
          }
      
        public getAttributesAsync(categoryId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.AttributeCategory[]> {
              var query = this._commerceContext.categories();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getAttributes(categoryId);
              return request.execute<Entities.AttributeCategory[]>(this._callerContext);
          }
      
        public getChildrenAsync(channelId: number, categoryId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Category[]> {
              var query = this._commerceContext.categories();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getChildren(channelId, categoryId);
              return request.execute<Entities.Category[]>(this._callerContext);
          }
      
        
        }
      
      /*** CartManager ***/
      export class CartManager implements Commerce.Proxy.ICartManager {
          private _commerceContext: Commerce.Proxy.CommerceContext = null;
          private _callerContext: any;

          constructor(commerceContext: Commerce.Proxy.CommerceContext, callerContext) {
              this._commerceContext = commerceContext;
              this._callerContext = callerContext;
          }

          public createAsync(entity: Entities.Cart): IAsyncResult<Entities.Cart> {
              var request: IDataServiceRequest = this._commerceContext.carts().create(entity);
              return request.execute<Entities.Cart>(this._callerContext);
          }

          public readAsync(id: string): IAsyncResult<Entities.Cart> {
              var request: IDataServiceRequest = this._commerceContext.carts(id).read();
              return request.execute<Entities.Cart>(this._callerContext);
          }

          public readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Cart[]> {
              var request: IDataServiceRequest = this._commerceContext.carts().resultSettings(queryResultSettings).read();
              return request.execute<Entities.Cart[]>(this._callerContext);
          }

          public updateAsync(entity: Entities.Cart): IAsyncResult<Entities.Cart> {
              var request: IDataServiceRequest = this._commerceContext.carts(entity.Id).update(entity);
              return request.execute<Entities.Cart>(this._callerContext);
          }

          public deleteAsync(entity: Entities.Cart): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.carts(entity.Id).delete();
              return request.execute<Entities.Cart>(this._callerContext);
          }

          public checkoutAsync(id: string, receiptEmail: string, tokenizedPaymentCard: Entities.TokenizedPaymentCard, receiptNumberSequence: string, cartTenderLines: Entities.CartTenderLine[], cartVersion: number): IAsyncResult<Entities.SalesOrder> {
              var request: IDataServiceRequest = this._commerceContext.carts(id).checkout(receiptEmail, tokenizedPaymentCard, receiptNumberSequence, cartTenderLines, cartVersion);
              return request.execute<Entities.SalesOrder>(this._callerContext);
          }
      
        public getMaxLoyaltyPointsToRedeemForTransactionBalanceAsync(id: string, loyaltyCardId: string, currencyCode: string): IAsyncResult<Entities.LoyaltyPointRedemptionEstimate> {
              var request: IDataServiceRequest = this._commerceContext.carts(id).getMaxLoyaltyPointsToRedeemForTransactionBalance(loyaltyCardId, currencyCode);
              return request.execute<Entities.LoyaltyPointRedemptionEstimate>(this._callerContext);
          }
      
        public getPaymentsHistoryAsync(id: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.TenderLine[]> {
              var query = this._commerceContext.carts(id);
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getPaymentsHistory();
              return request.execute<Entities.TenderLine[]>(this._callerContext);
          }
      
        public getLineDeliveryOptionsByChannelIdAsync(id: string, lineShippingAddresses: Entities.LineShippingAddress[], channelId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SalesLineDeliveryOption[]> {
              var query = this._commerceContext.carts(id);
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getLineDeliveryOptionsByChannelId(lineShippingAddresses, channelId);
              return request.execute<Entities.SalesLineDeliveryOption[]>(this._callerContext);
          }
      
        public getLineDeliveryOptionsAsync(id: string, lineShippingAddresses: Entities.LineShippingAddress[], filterOption: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SalesLineDeliveryOption[]> {
              var query = this._commerceContext.carts(id);
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getLineDeliveryOptions(lineShippingAddresses, filterOption);
              return request.execute<Entities.SalesLineDeliveryOption[]>(this._callerContext);
          }
      
        public getDeliveryPreferencesAsync(id: string): IAsyncResult<Entities.CartDeliveryPreferences> {
              var request: IDataServiceRequest = this._commerceContext.carts(id).getDeliveryPreferences();
              return request.execute<Entities.CartDeliveryPreferences>(this._callerContext);
          }
      
        public getDeliveryOptionsAsync(id: string, shippingAddress: Entities.Address, cartLineIds: string[], filterOption: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.DeliveryOption[]> {
              var query = this._commerceContext.carts(id);
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getDeliveryOptions(shippingAddress, cartLineIds, filterOption);
              return request.execute<Entities.DeliveryOption[]>(this._callerContext);
          }
      
        public updateLineDeliverySpecificationsAsync(id: string, lineDeliverySpecifications: Entities.LineDeliverySpecification[]): IAsyncResult<Entities.Cart> {
              var request: IDataServiceRequest = this._commerceContext.carts(id).updateLineDeliverySpecifications(lineDeliverySpecifications);
              return request.execute<Entities.Cart>(this._callerContext);
          }
      
        public updateDeliverySpecificationAsync(id: string, deliverySpecification: Entities.DeliverySpecification): IAsyncResult<Entities.Cart> {
              var request: IDataServiceRequest = this._commerceContext.carts(id).updateDeliverySpecification(deliverySpecification);
              return request.execute<Entities.Cart>(this._callerContext);
          }
      
        public addChargeAsync(id: string, moduleTypeValue: number, chargeCode: string, amount: number): IAsyncResult<Entities.Cart> {
              var request: IDataServiceRequest = this._commerceContext.carts(id).addCharge(moduleTypeValue, chargeCode, amount);
              return request.execute<Entities.Cart>(this._callerContext);
          }
      
        public overrideChargeAsync(id: string, chargeLineId: string, amount: number, reasonCodeLines: Entities.ReasonCodeLine[]): IAsyncResult<Entities.Cart> {
              var request: IDataServiceRequest = this._commerceContext.carts(id).overrideCharge(chargeLineId, amount, reasonCodeLines);
              return request.execute<Entities.Cart>(this._callerContext);
          }
      
        public addCartLineChargeAsync(id: string, cartLineId: string, moduleTypeValue: number, chargeCode: string, amount: number): IAsyncResult<Entities.Cart> {
              var request: IDataServiceRequest = this._commerceContext.carts(id).addCartLineCharge(cartLineId, moduleTypeValue, chargeCode, amount);
              return request.execute<Entities.Cart>(this._callerContext);
          }
      
        public overrideCartLineChargeAsync(id: string, cartLineId: string, chargeLineId: string, amount: number, reasonCodeLines: Entities.ReasonCodeLine[]): IAsyncResult<Entities.Cart> {
              var request: IDataServiceRequest = this._commerceContext.carts(id).overrideCartLineCharge(cartLineId, chargeLineId, amount, reasonCodeLines);
              return request.execute<Entities.Cart>(this._callerContext);
          }
      
        public voidAsync(id: string, reasonCodeLines: Entities.ReasonCodeLine[], cartVersion: number): IAsyncResult<Entities.SalesOrder> {
              var request: IDataServiceRequest = this._commerceContext.carts(id).void(reasonCodeLines, cartVersion);
              return request.execute<Entities.SalesOrder>(this._callerContext);
          }
      
        public addCartLinesAsync(id: string, cartLines: Entities.CartLine[], cartVersion: number): IAsyncResult<Entities.Cart> {
              var request: IDataServiceRequest = this._commerceContext.carts(id).addCartLines(cartLines, cartVersion);
              return request.execute<Entities.Cart>(this._callerContext);
          }
      
        public updateCartLinesAsync(id: string, cartLines: Entities.CartLine[], cartVersion: number): IAsyncResult<Entities.Cart> {
              var request: IDataServiceRequest = this._commerceContext.carts(id).updateCartLines(cartLines, cartVersion);
              return request.execute<Entities.Cart>(this._callerContext);
          }
      
        public voidCartLinesAsync(id: string, cartLines: Entities.CartLine[]): IAsyncResult<Entities.Cart> {
              var request: IDataServiceRequest = this._commerceContext.carts(id).voidCartLines(cartLines);
              return request.execute<Entities.Cart>(this._callerContext);
          }
      
        public removeCartLinesAsync(id: string, cartLineIds: string[]): IAsyncResult<Entities.Cart> {
              var request: IDataServiceRequest = this._commerceContext.carts(id).removeCartLines(cartLineIds);
              return request.execute<Entities.Cart>(this._callerContext);
          }
      
        public addTenderLineAsync(id: string, cartTenderLine: Entities.CartTenderLine, cartVersion: number): IAsyncResult<Entities.Cart> {
              var request: IDataServiceRequest = this._commerceContext.carts(id).addTenderLine(cartTenderLine, cartVersion);
              return request.execute<Entities.Cart>(this._callerContext);
          }
      
        public calculateTenderDiscountAsync(id: string, tenderLine: Entities.TenderLine, cartVersion: number): IAsyncResult<Entities.TenderDiscountLine> {
              var request: IDataServiceRequest = this._commerceContext.carts(id).calculateTenderDiscount(tenderLine, cartVersion);
              return request.execute<Entities.TenderDiscountLine>(this._callerContext);
          }
      
        public addPreprocessedTenderLineAsync(id: string, preprocessedTenderLine: Entities.TenderLine, cartVersion: number): IAsyncResult<Entities.Cart> {
              var request: IDataServiceRequest = this._commerceContext.carts(id).addPreprocessedTenderLine(preprocessedTenderLine, cartVersion);
              return request.execute<Entities.Cart>(this._callerContext);
          }
      
        public validateTenderLineForAddAsync(id: string, tenderLine: Entities.TenderLine): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.carts(id).validateTenderLineForAdd(tenderLine);
              return request.execute<void>(this._callerContext);
          }
      
        public updateTenderLineSignatureAsync(id: string, tenderLineId: string, signatureData: string): IAsyncResult<Entities.Cart> {
              var request: IDataServiceRequest = this._commerceContext.carts(id).updateTenderLineSignature(tenderLineId, signatureData);
              return request.execute<Entities.Cart>(this._callerContext);
          }
      
        public getDeclinedOrVoidedCardReceiptsAsync(id: string, preprocessedTenderLine: Entities.TenderLine, receiptRetrievalCriteria: Entities.ReceiptRetrievalCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Receipt[]> {
              var query = this._commerceContext.carts(id);
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getDeclinedOrVoidedCardReceipts(preprocessedTenderLine, receiptRetrievalCriteria);
              return request.execute<Entities.Receipt[]>(this._callerContext);
          }
      
        public copyAsync(id: string, targetCartType: number): IAsyncResult<Entities.Cart> {
              var request: IDataServiceRequest = this._commerceContext.carts(id).copy(targetCartType);
              return request.execute<Entities.Cart>(this._callerContext);
          }
      
        public addInvoicedSalesLinesToCartAsync(transactionId: string, invoicedSalesLinesIds: number[]): IAsyncResult<Entities.Cart> {
              var request: IDataServiceRequest = this._commerceContext.carts().addInvoicedSalesLinesToCart(transactionId, invoicedSalesLinesIds);
              return request.execute<Entities.Cart>(this._callerContext);
          }
      
        public voidTenderLineAsync(id: string, tenderLineId: string, reasonCodeLines: Entities.ReasonCodeLine[], isPreprocessed: boolean, forceVoid: boolean): IAsyncResult<Entities.Cart> {
              var request: IDataServiceRequest = this._commerceContext.carts(id).voidTenderLine(tenderLineId, reasonCodeLines, isPreprocessed, forceVoid);
              return request.execute<Entities.Cart>(this._callerContext);
          }
      
        public issueGiftCardAsync(id: string, giftCardId: string, amount: number, currencyCode: string, lineDescription: string, tenderTypeId: string): IAsyncResult<Entities.Cart> {
              var request: IDataServiceRequest = this._commerceContext.carts(id).issueGiftCard(giftCardId, amount, currencyCode, lineDescription, tenderTypeId);
              return request.execute<Entities.Cart>(this._callerContext);
          }
      
        public refillGiftCardAsync(id: string, giftCardId: string, amount: number, currencyCode: string, lineDescription: string, tenderTypeId: string): IAsyncResult<Entities.Cart> {
              var request: IDataServiceRequest = this._commerceContext.carts(id).refillGiftCard(giftCardId, amount, currencyCode, lineDescription, tenderTypeId);
              return request.execute<Entities.Cart>(this._callerContext);
          }
      
        public cashOutGiftCardAsync(id: string, giftCardId: string, amount: number, currencyCode: string, lineDescription: string, tenderTypeId: string): IAsyncResult<Entities.Cart> {
              var request: IDataServiceRequest = this._commerceContext.carts(id).cashOutGiftCard(giftCardId, amount, currencyCode, lineDescription, tenderTypeId);
              return request.execute<Entities.Cart>(this._callerContext);
          }
      
        public suspendAsync(id: string): IAsyncResult<Entities.Cart> {
              var request: IDataServiceRequest = this._commerceContext.carts(id).suspend();
              return request.execute<Entities.Cart>(this._callerContext);
          }
      
        public suspendWithJournalAsync(id: string, journalCartId: string, receiptNumberSequence: string): IAsyncResult<Entities.Cart> {
              var request: IDataServiceRequest = this._commerceContext.carts(id).suspendWithJournal(journalCartId, receiptNumberSequence);
              return request.execute<Entities.Cart>(this._callerContext);
          }
      
        public resumeAsync(id: string): IAsyncResult<Entities.Cart> {
              var request: IDataServiceRequest = this._commerceContext.carts(id).resume();
              return request.execute<Entities.Cart>(this._callerContext);
          }
      
        public resumeFromReceiptIdAsync(receiptId: string): IAsyncResult<Entities.Cart> {
              var request: IDataServiceRequest = this._commerceContext.carts().resumeFromReceiptId(receiptId);
              return request.execute<Entities.Cart>(this._callerContext);
          }
      
        public removeDiscountCodesAsync(id: string, discountCodes: string[]): IAsyncResult<Entities.Cart> {
              var request: IDataServiceRequest = this._commerceContext.carts(id).removeDiscountCodes(discountCodes);
              return request.execute<Entities.Cart>(this._callerContext);
          }
      
        public getSuspendedAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Cart[]> {
              var query = this._commerceContext.carts();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getSuspended();
              return request.execute<Entities.Cart[]>(this._callerContext);
          }
      
        public searchAsync(cartSearchCriteria: Entities.CartSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Cart[]> {
              var query = this._commerceContext.carts();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.search(cartSearchCriteria);
              return request.execute<Entities.Cart[]>(this._callerContext);
          }
      
        public overrideCartLinePriceAsync(id: string, cartLineId: string, price: number): IAsyncResult<Entities.Cart> {
              var request: IDataServiceRequest = this._commerceContext.carts(id).overrideCartLinePrice(cartLineId, price);
              return request.execute<Entities.Cart>(this._callerContext);
          }
      
        public getCardPaymentAcceptPointAsync(id: string, cardPaymentAcceptSettings: Entities.CardPaymentAcceptSettings, extensionProperties: Entities.CommerceProperty[]): IAsyncResult<Entities.CardPaymentAcceptPoint> {
              var request: IDataServiceRequest = this._commerceContext.carts(id).getCardPaymentAcceptPoint(cardPaymentAcceptSettings, extensionProperties);
              return request.execute<Entities.CardPaymentAcceptPoint>(this._callerContext);
          }
      
        public retrieveCardPaymentAcceptResultAsync(resultAccessCode: string, extensionProperties: Entities.CommerceProperty[], cartId: string, settings: Entities.RetrievePaymentResultSettings): IAsyncResult<Entities.CardPaymentAcceptResult> {
              var request: IDataServiceRequest = this._commerceContext.carts().retrieveCardPaymentAcceptResult(resultAccessCode, extensionProperties, cartId, settings);
              return request.execute<Entities.CardPaymentAcceptResult>(this._callerContext);
          }
      
        public recallOrderAsync(transactionId: string, salesId: string): IAsyncResult<Entities.Cart> {
              var request: IDataServiceRequest = this._commerceContext.carts().recallOrder(transactionId, salesId);
              return request.execute<Entities.Cart>(this._callerContext);
          }
      
        public recallQuoteAsync(transactionId: string, quoteId: string): IAsyncResult<Entities.Cart> {
              var request: IDataServiceRequest = this._commerceContext.carts().recallQuote(transactionId, quoteId);
              return request.execute<Entities.Cart>(this._callerContext);
          }
      
        public recalculateOrderAsync(id: string): IAsyncResult<Entities.Cart> {
              var request: IDataServiceRequest = this._commerceContext.carts(id).recalculateOrder();
              return request.execute<Entities.Cart>(this._callerContext);
          }
      
        public resetAllChargesAsync(id: string): IAsyncResult<Entities.Cart> {
              var request: IDataServiceRequest = this._commerceContext.carts(id).resetAllCharges();
              return request.execute<Entities.Cart>(this._callerContext);
          }
      
        public getPromotionsAsync(id: string): IAsyncResult<Entities.CartPromotions> {
              var request: IDataServiceRequest = this._commerceContext.carts(id).getPromotions();
              return request.execute<Entities.CartPromotions>(this._callerContext);
          }
      
        public getAvailablePromotionsAsync(id: string, cartLineIds: string[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CartPromotionLine[]> {
              var query = this._commerceContext.carts(id);
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getAvailablePromotions(cartLineIds);
              return request.execute<Entities.CartPromotionLine[]>(this._callerContext);
          }
      
        public recallSalesInvoiceAsync(transactionId: string, invoiceId: string): IAsyncResult<Entities.Cart> {
              var request: IDataServiceRequest = this._commerceContext.carts().recallSalesInvoice(transactionId, invoiceId);
              return request.execute<Entities.Cart>(this._callerContext);
          }
      
        public addOrderInvoiceAsync(id: string, invoiceId: string, lineDescription: string): IAsyncResult<Entities.Cart> {
              var request: IDataServiceRequest = this._commerceContext.carts(id).addOrderInvoice(invoiceId, lineDescription);
              return request.execute<Entities.Cart>(this._callerContext);
          }
      
        public addInvoicesAsync(id: string, invoiceIds: string[]): IAsyncResult<Entities.Cart> {
              var request: IDataServiceRequest = this._commerceContext.carts(id).addInvoices(invoiceIds);
              return request.execute<Entities.Cart>(this._callerContext);
          }
      
        public updateCommissionSalesGroupAsync(transactionId: string, cartLineId: string, commissionSalesGroup: string, isUserInitiated: boolean): IAsyncResult<Entities.Cart> {
              var request: IDataServiceRequest = this._commerceContext.carts().updateCommissionSalesGroup(transactionId, cartLineId, commissionSalesGroup, isUserInitiated);
              return request.execute<Entities.Cart>(this._callerContext);
          }
      
        public addCouponsAsync(id: string, couponCodes: string[], isLegacyDiscountCode: boolean): IAsyncResult<Entities.Cart> {
              var request: IDataServiceRequest = this._commerceContext.carts(id).addCoupons(couponCodes, isLegacyDiscountCode);
              return request.execute<Entities.Cart>(this._callerContext);
          }
      
        public removeCouponsAsync(id: string, couponCodes: string[]): IAsyncResult<Entities.Cart> {
              var request: IDataServiceRequest = this._commerceContext.carts(id).removeCoupons(couponCodes);
              return request.execute<Entities.Cart>(this._callerContext);
          }
      
        public getChargeCodesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ChargeCode[]> {
              var query = this._commerceContext.carts();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getChargeCodes();
              return request.execute<Entities.ChargeCode[]>(this._callerContext);
          }
      
        public addDiscountCodeAsync(id: string, discountCode: string): IAsyncResult<Entities.Cart> {
              var request: IDataServiceRequest = this._commerceContext.carts(id).addDiscountCode(discountCode);
              return request.execute<Entities.Cart>(this._callerContext);
          }
      
        public getReturnOptionsAsync(id: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.TenderTypeAmount[]> {
              var query = this._commerceContext.carts(id);
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getReturnOptions();
              return request.execute<Entities.TenderTypeAmount[]>(this._callerContext);
          }
      
        public validateForCheckoutAsync(id: string, cartVersion: number): IAsyncResult<Entities.CartLineValidationResults> {
              var request: IDataServiceRequest = this._commerceContext.carts(id).validateForCheckout(cartVersion);
              return request.execute<Entities.CartLineValidationResults>(this._callerContext);
          }
      
        
        }
      
      /*** CustomerManager ***/
      export class CustomerManager implements Commerce.Proxy.ICustomerManager {
          private _commerceContext: Commerce.Proxy.CommerceContext = null;
          private _callerContext: any;

          constructor(commerceContext: Commerce.Proxy.CommerceContext, callerContext) {
              this._commerceContext = commerceContext;
              this._callerContext = callerContext;
          }

          public createAsync(entity: Entities.Customer): IAsyncResult<Entities.Customer> {
              var request: IDataServiceRequest = this._commerceContext.customers().create(entity);
              return request.execute<Entities.Customer>(this._callerContext);
          }

          public readAsync(accountNumber: string): IAsyncResult<Entities.Customer> {
              var request: IDataServiceRequest = this._commerceContext.customers(accountNumber).read();
              return request.execute<Entities.Customer>(this._callerContext);
          }

          public readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Customer[]> {
              var request: IDataServiceRequest = this._commerceContext.customers().resultSettings(queryResultSettings).read();
              return request.execute<Entities.Customer[]>(this._callerContext);
          }

          public updateAsync(entity: Entities.Customer): IAsyncResult<Entities.Customer> {
              var request: IDataServiceRequest = this._commerceContext.customers(entity.AccountNumber).update(entity);
              return request.execute<Entities.Customer>(this._callerContext);
          }

          public deleteAsync(entity: Entities.Customer): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.customers(entity.AccountNumber).delete();
              return request.execute<Entities.Customer>(this._callerContext);
          }

          public searchAsync(customerSearchCriteria: Entities.CustomerSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.GlobalCustomer[]> {
              var query = this._commerceContext.customers();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.search(customerSearchCriteria);
              return request.execute<Entities.GlobalCustomer[]>(this._callerContext);
          }
      
        public searchByFieldsAsync(customerSearchByFieldCriteria: Entities.CustomerSearchByFieldCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.GlobalCustomer[]> {
              var query = this._commerceContext.customers();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.searchByFields(customerSearchByFieldCriteria);
              return request.execute<Entities.GlobalCustomer[]>(this._callerContext);
          }
      
        public getByAccountNumbersAsync(accountNumbers: string[], searchLocationValue: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Customer[]> {
              var query = this._commerceContext.customers();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getByAccountNumbers(accountNumbers, searchLocationValue);
              return request.execute<Entities.Customer[]>(this._callerContext);
          }
      
        public createCustomerTimelineItemAsync(customerTimelineItem: Entities.CustomerTimelineItem): IAsyncResult<Entities.CustomerTimelineItem> {
              var request: IDataServiceRequest = this._commerceContext.customers().createCustomerTimelineItem(customerTimelineItem);
              return request.execute<Entities.CustomerTimelineItem>(this._callerContext);
          }
      
        public updateCustomerTimelineItemAsync(customerTimelineItem: Entities.CustomerTimelineItem): IAsyncResult<Entities.CustomerTimelineItem> {
              var request: IDataServiceRequest = this._commerceContext.customers().updateCustomerTimelineItem(customerTimelineItem);
              return request.execute<Entities.CustomerTimelineItem>(this._callerContext);
          }
      
        public getOrderHistoryAsync(accountNumber: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SalesOrder[]> {
              var query = this._commerceContext.customers(accountNumber);
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getOrderHistory();
              return request.execute<Entities.SalesOrder[]>(this._callerContext);
          }
      
        public getOrderShipmentsHistoryAsync(accountNumber: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.OrderShipments[]> {
              var query = this._commerceContext.customers(accountNumber);
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getOrderShipmentsHistory();
              return request.execute<Entities.OrderShipments[]>(this._callerContext);
          }
      
        public postNonTransactionalActivityLoyaltyPointsAsync(loyaltyCardId: string, channelId: number, affiliationId: number, activityTypeId: string): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.customers().postNonTransactionalActivityLoyaltyPoints(loyaltyCardId, channelId, affiliationId, activityTypeId);
              return request.execute<void>(this._callerContext);
          }
      
        public getPurchaseHistoryAsync(accountNumber: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.PurchaseHistory[]> {
              var query = this._commerceContext.customers(accountNumber);
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getPurchaseHistory();
              return request.execute<Entities.PurchaseHistory[]>(this._callerContext);
          }
      
        public getCustomerSearchFieldsAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CustomerSearchField[]> {
              var query = this._commerceContext.customers();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getCustomerSearchFields();
              return request.execute<Entities.CustomerSearchField[]>(this._callerContext);
          }
      
        public getCustomerTimelineItemTypesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CustomerTimelineItemTypeMap[]> {
              var query = this._commerceContext.customers();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getCustomerTimelineItemTypes();
              return request.execute<Entities.CustomerTimelineItemTypeMap[]>(this._callerContext);
          }
      
        public getCustomerTimelineItemsAsync(accountNumber: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CustomerTimelineItem[]> {
              var query = this._commerceContext.customers(accountNumber);
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getCustomerTimelineItems();
              return request.execute<Entities.CustomerTimelineItem[]>(this._callerContext);
          }
      
        public getCustomerTimelineRefinersAsync(accountNumber: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CustomerTimelineRefiner[]> {
              var query = this._commerceContext.customers(accountNumber);
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getCustomerTimelineRefiners();
              return request.execute<Entities.CustomerTimelineRefiner[]>(this._callerContext);
          }
      
        public getTitlesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CustomerTitle[]> {
              var query = this._commerceContext.customers();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getTitles();
              return request.execute<Entities.CustomerTitle[]>(this._callerContext);
          }
      
        
        }
      
      /*** EmployeeManager ***/
      export class EmployeeManager implements Commerce.Proxy.IEmployeeManager {
          private _commerceContext: Commerce.Proxy.CommerceContext = null;
          private _callerContext: any;

          constructor(commerceContext: Commerce.Proxy.CommerceContext, callerContext) {
              this._commerceContext = commerceContext;
              this._callerContext = callerContext;
          }

          public createAsync(entity: Entities.Employee): IAsyncResult<Entities.Employee> {
              var request: IDataServiceRequest = this._commerceContext.employees().create(entity);
              return request.execute<Entities.Employee>(this._callerContext);
          }

          public readAsync(staffId: string): IAsyncResult<Entities.Employee> {
              var request: IDataServiceRequest = this._commerceContext.employees(staffId).read();
              return request.execute<Entities.Employee>(this._callerContext);
          }

          public readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Employee[]> {
              var request: IDataServiceRequest = this._commerceContext.employees().resultSettings(queryResultSettings).read();
              return request.execute<Entities.Employee[]>(this._callerContext);
          }

          public updateAsync(entity: Entities.Employee): IAsyncResult<Entities.Employee> {
              var request: IDataServiceRequest = this._commerceContext.employees(entity.StaffId).update(entity);
              return request.execute<Entities.Employee>(this._callerContext);
          }

          public deleteAsync(entity: Entities.Employee): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.employees(entity.StaffId).delete();
              return request.execute<Entities.Employee>(this._callerContext);
          }

          public getActivitiesAsync(employeeActivitySearchCriteria: Entities.EmployeeActivitySearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.EmployeeActivity[]> {
              var query = this._commerceContext.employees();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getActivities(employeeActivitySearchCriteria);
              return request.execute<Entities.EmployeeActivity[]>(this._callerContext);
          }
      
        public getManagerActivityViewAsync(employeeActivitySearchCriteria: Entities.EmployeeActivitySearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.EmployeeActivity[]> {
              var query = this._commerceContext.employees();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getManagerActivityView(employeeActivitySearchCriteria);
              return request.execute<Entities.EmployeeActivity[]>(this._callerContext);
          }
      
        public registerActivityAsync(staffId: string, employeeActivityType: number): IAsyncResult<Date> {
              var request: IDataServiceRequest = this._commerceContext.employees(staffId).registerActivity(employeeActivityType);
              return request.execute<Date>(this._callerContext);
          }
      
        public getAccessibleOrgUnitsAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.OrgUnit[]> {
              var query = this._commerceContext.employees();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getAccessibleOrgUnits();
              return request.execute<Entities.OrgUnit[]>(this._callerContext);
          }
      
        public getLatestActivityAsync(): IAsyncResult<Entities.EmployeeActivity> {
              var request: IDataServiceRequest = this._commerceContext.employees().getLatestActivity();
              return request.execute<Entities.EmployeeActivity>(this._callerContext);
          }
      
        public searchClientBookCustomersAsync(clientBookCustomerSearchCriteria: Entities.ClientBookCustomerSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ClientBookCustomer[]> {
              var query = this._commerceContext.employees();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.searchClientBookCustomers(clientBookCustomerSearchCriteria);
              return request.execute<Entities.ClientBookCustomer[]>(this._callerContext);
          }
      
        public getClientBookSearchRefinersAsync(refinerSourceTypes: number[], searchCriteria: Entities.ClientBookCustomerSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ClientBookRefiner[]> {
              var query = this._commerceContext.employees();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getClientBookSearchRefiners(refinerSourceTypes, searchCriteria);
              return request.execute<Entities.ClientBookRefiner[]>(this._callerContext);
          }
      
        public updateClientBookAsync(clientBookChanges: Entities.ClientBookChanges): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.employees().updateClientBook(clientBookChanges);
              return request.execute<void>(this._callerContext);
          }
      
        public getCurrentEmployeeAsync(): IAsyncResult<Entities.Employee> {
              var request: IDataServiceRequest = this._commerceContext.employees().getCurrentEmployee();
              return request.execute<Entities.Employee>(this._callerContext);
          }
      
        
        }
      
      /*** ChecklistManager ***/
      export class ChecklistManager implements Commerce.Proxy.IChecklistManager {
          private _commerceContext: Commerce.Proxy.CommerceContext = null;
          private _callerContext: any;

          constructor(commerceContext: Commerce.Proxy.CommerceContext, callerContext) {
              this._commerceContext = commerceContext;
              this._callerContext = callerContext;
          }

          public createAsync(entity: Entities.Checklist): IAsyncResult<Entities.Checklist> {
              var request: IDataServiceRequest = this._commerceContext.checklists().create(entity);
              return request.execute<Entities.Checklist>(this._callerContext);
          }

          public readAsync(recordId: number): IAsyncResult<Entities.Checklist> {
              var request: IDataServiceRequest = this._commerceContext.checklists(recordId).read();
              return request.execute<Entities.Checklist>(this._callerContext);
          }

          public readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Checklist[]> {
              var request: IDataServiceRequest = this._commerceContext.checklists().resultSettings(queryResultSettings).read();
              return request.execute<Entities.Checklist[]>(this._callerContext);
          }

          public updateAsync(entity: Entities.Checklist): IAsyncResult<Entities.Checklist> {
              var request: IDataServiceRequest = this._commerceContext.checklists(entity.RecordId).update(entity);
              return request.execute<Entities.Checklist>(this._callerContext);
          }

          public deleteAsync(entity: Entities.Checklist): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.checklists(entity.RecordId).delete();
              return request.execute<Entities.Checklist>(this._callerContext);
          }

          public searchChecklistsAsync(checklistSearchCriteria: Entities.ChecklistSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Checklist[]> {
              var query = this._commerceContext.checklists();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.searchChecklists(checklistSearchCriteria);
              return request.execute<Entities.Checklist[]>(this._callerContext);
          }
      
        public searchTasksAsync(taskSearchCriteria: Entities.TaskSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ChecklistTask[]> {
              var query = this._commerceContext.checklists();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.searchTasks(taskSearchCriteria);
              return request.execute<Entities.ChecklistTask[]>(this._callerContext);
          }
      
        public createTaskAsync(createTask: Entities.ChecklistTask): IAsyncResult<Entities.ChecklistTask> {
              var request: IDataServiceRequest = this._commerceContext.checklists().createTask(createTask);
              return request.execute<Entities.ChecklistTask>(this._callerContext);
          }
      
        public updateChecklistsAsync(updateChecklists: Entities.Checklist[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Checklist[]> {
              var query = this._commerceContext.checklists();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.updateChecklists(updateChecklists);
              return request.execute<Entities.Checklist[]>(this._callerContext);
          }
      
        public updateTasksAsync(updateTasks: Entities.ChecklistTask[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ChecklistTask[]> {
              var query = this._commerceContext.checklists();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.updateTasks(updateTasks);
              return request.execute<Entities.ChecklistTask[]>(this._callerContext);
          }
      
        
        }
      
      /*** SalesOrderManager ***/
      export class SalesOrderManager implements Commerce.Proxy.ISalesOrderManager {
          private _commerceContext: Commerce.Proxy.CommerceContext = null;
          private _callerContext: any;

          constructor(commerceContext: Commerce.Proxy.CommerceContext, callerContext) {
              this._commerceContext = commerceContext;
              this._callerContext = callerContext;
          }

          public createAsync(entity: Entities.SalesOrder): IAsyncResult<Entities.SalesOrder> {
              var request: IDataServiceRequest = this._commerceContext.salesOrders().create(entity);
              return request.execute<Entities.SalesOrder>(this._callerContext);
          }

          public readAsync(id: string): IAsyncResult<Entities.SalesOrder> {
              var request: IDataServiceRequest = this._commerceContext.salesOrders(id).read();
              return request.execute<Entities.SalesOrder>(this._callerContext);
          }

          public readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SalesOrder[]> {
              var request: IDataServiceRequest = this._commerceContext.salesOrders().resultSettings(queryResultSettings).read();
              return request.execute<Entities.SalesOrder[]>(this._callerContext);
          }

          public updateAsync(entity: Entities.SalesOrder): IAsyncResult<Entities.SalesOrder> {
              var request: IDataServiceRequest = this._commerceContext.salesOrders(entity.Id).update(entity);
              return request.execute<Entities.SalesOrder>(this._callerContext);
          }

          public deleteAsync(entity: Entities.SalesOrder): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.salesOrders(entity.Id).delete();
              return request.execute<Entities.SalesOrder>(this._callerContext);
          }

          public searchSalesTransactionsByReceiptIdAsync(receiptId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SalesOrder[]> {
              var query = this._commerceContext.salesOrders();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.searchSalesTransactionsByReceiptId(receiptId);
              return request.execute<Entities.SalesOrder[]>(this._callerContext);
          }
      
        public searchAsync(salesOrderSearchCriteria: Entities.SalesOrderSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SalesOrder[]> {
              var query = this._commerceContext.salesOrders();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.search(salesOrderSearchCriteria);
              return request.execute<Entities.SalesOrder[]>(this._callerContext);
          }
      
        public searchOrdersAsync(orderSearchCriteria: Entities.OrderSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SalesOrder[]> {
              var query = this._commerceContext.salesOrders();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.searchOrders(orderSearchCriteria);
              return request.execute<Entities.SalesOrder[]>(this._callerContext);
          }
      
        public getReceiptsAsync(id: string, receiptRetrievalCriteria: Entities.ReceiptRetrievalCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Receipt[]> {
              var query = this._commerceContext.salesOrders(id);
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getReceipts(receiptRetrievalCriteria);
              return request.execute<Entities.Receipt[]>(this._callerContext);
          }
      
        public sendReceiptAsync(searchCriteria: Entities.SearchReceiptCriteria, recipientAddresses: Entities.ElectronicAddress[]): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.salesOrders().sendReceipt(searchCriteria, recipientAddresses);
              return request.execute<void>(this._callerContext);
          }
      
        public getGiftReceiptsAsync(id: string, salesLineNumbers: number[], receiptRetrievalCriteria: Entities.ReceiptRetrievalCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Receipt[]> {
              var query = this._commerceContext.salesOrders(id);
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getGiftReceipts(salesLineNumbers, receiptRetrievalCriteria);
              return request.execute<Entities.Receipt[]>(this._callerContext);
          }
      
        public getByReceiptIdAsync(receiptId: string, orderStoreNumber: string, orderTerminalId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SalesOrder[]> {
              var query = this._commerceContext.salesOrders();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getByReceiptId(receiptId, orderStoreNumber, orderTerminalId);
              return request.execute<Entities.SalesOrder[]>(this._callerContext);
          }
      
        public getSalesOrderDetailsByTransactionIdAsync(transactionId: string, searchLocationValue: number): IAsyncResult<Entities.SalesOrder> {
              var request: IDataServiceRequest = this._commerceContext.salesOrders().getSalesOrderDetailsByTransactionId(transactionId, searchLocationValue);
              return request.execute<Entities.SalesOrder>(this._callerContext);
          }
      
        public getSalesOrderDetailsBySalesIdAsync(salesId: string): IAsyncResult<Entities.SalesOrder> {
              var request: IDataServiceRequest = this._commerceContext.salesOrders().getSalesOrderDetailsBySalesId(salesId);
              return request.execute<Entities.SalesOrder>(this._callerContext);
          }
      
        public getSalesOrderDetailsByQuotationIdAsync(quotationId: string): IAsyncResult<Entities.SalesOrder> {
              var request: IDataServiceRequest = this._commerceContext.salesOrders().getSalesOrderDetailsByQuotationId(quotationId);
              return request.execute<Entities.SalesOrder>(this._callerContext);
          }
      
        public shipFulfillmentLinesAsync(shipFulfillmentLines: Entities.ShipFulfillmentLine[]): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.salesOrders().shipFulfillmentLines(shipFulfillmentLines);
              return request.execute<void>(this._callerContext);
          }
      
        public acceptFulfillmentLinesAsync(fulfillmentLineParameter: Entities.FulfillmentLineParameter[]): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.salesOrders().acceptFulfillmentLines(fulfillmentLineParameter);
              return request.execute<void>(this._callerContext);
          }
      
        public pickFulfillmentLinesAsync(fulfillmentLineParameter: Entities.FulfillmentLineParameter[]): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.salesOrders().pickFulfillmentLines(fulfillmentLineParameter);
              return request.execute<void>(this._callerContext);
          }
      
        public packFulfillmentLinesAsync(fulfillmentLineParameter: Entities.FulfillmentLineParameter[]): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.salesOrders().packFulfillmentLines(fulfillmentLineParameter);
              return request.execute<void>(this._callerContext);
          }
      
        public markFulfillmentLinesAsPackedAsync(fulfillmentLineParameter: Entities.FulfillmentLineParameter[]): IAsyncResult<string> {
              var request: IDataServiceRequest = this._commerceContext.salesOrders().markFulfillmentLinesAsPacked(fulfillmentLineParameter);
              return request.execute<string>(this._callerContext);
          }
      
        public markAsPickedAsync(fulfillmentLineParameter: Entities.FulfillmentLineParameter[]): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.salesOrders().markAsPicked(fulfillmentLineParameter);
              return request.execute<void>(this._callerContext);
          }
      
        public getFulfillmentPickingListsAsync(pickingListFulfillmentLine: Entities.FulfillmentLineParameter[], hardwareProfileId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Receipt[]> {
              var query = this._commerceContext.salesOrders();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getFulfillmentPickingLists(pickingListFulfillmentLine, hardwareProfileId);
              return request.execute<Entities.Receipt[]>(this._callerContext);
          }
      
        public getFulfillmentLinesAsync(fulfillmentLineSearchCriteria: Entities.FulfillmentLineSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.FulfillmentLine[]> {
              var query = this._commerceContext.salesOrders();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getFulfillmentLines(fulfillmentLineSearchCriteria);
              return request.execute<Entities.FulfillmentLine[]>(this._callerContext);
          }
      
        public getFulfillmentPackingSlipsAsync(packFulfillmentLines: Entities.FulfillmentLineParameter[], hardwareProfileId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Receipt[]> {
              var query = this._commerceContext.salesOrders();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getFulfillmentPackingSlips(packFulfillmentLines, hardwareProfileId);
              return request.execute<Entities.Receipt[]>(this._callerContext);
          }
      
        public getFulfillmentPackingSlipsByIdAsync(salesId: string, packingSlipId: string, hardwareProfileId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Receipt[]> {
              var query = this._commerceContext.salesOrders();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getFulfillmentPackingSlipsById(salesId, packingSlipId, hardwareProfileId);
              return request.execute<Entities.Receipt[]>(this._callerContext);
          }
      
        public rejectFulfillmentLinesAsync(rejectFulfillmentLines: Entities.RejectFulfillmentLine[]): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.salesOrders().rejectFulfillmentLines(rejectFulfillmentLines);
              return request.execute<void>(this._callerContext);
          }
      
        public getInvoicesBySalesIdAsync(salesId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SalesInvoice[]> {
              var query = this._commerceContext.salesOrders();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getInvoicesBySalesId(salesId);
              return request.execute<Entities.SalesInvoice[]>(this._callerContext);
          }
      
        public getOrderInvoicesAsync(customerId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.OrderInvoice[]> {
              var query = this._commerceContext.salesOrders();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getOrderInvoices(customerId);
              return request.execute<Entities.OrderInvoice[]>(this._callerContext);
          }
      
        public getInvoicesAsync(invoiceSearchCriteria: Entities.InvoiceSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.OrderInvoice[]> {
              var query = this._commerceContext.salesOrders();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getInvoices(invoiceSearchCriteria);
              return request.execute<Entities.OrderInvoice[]>(this._callerContext);
          }
      
        public getInvoicedSalesLinesBySalesIdsAsync(salesIds: string[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SalesLine[]> {
              var query = this._commerceContext.salesOrders();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getInvoicedSalesLinesBySalesIds(salesIds);
              return request.execute<Entities.SalesLine[]>(this._callerContext);
          }
      
        public createPickingListAsync(salesId: string): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.salesOrders().createPickingList(salesId);
              return request.execute<void>(this._callerContext);
          }
      
        public createPickingListForItemsAsync(salesId: string, pickAndPackSalesLineParameters: Entities.PickAndPackSalesLineParameter[]): IAsyncResult<string> {
              var request: IDataServiceRequest = this._commerceContext.salesOrders().createPickingListForItems(salesId, pickAndPackSalesLineParameters);
              return request.execute<string>(this._callerContext);
          }
      
        public getPickingListsAsync(id: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.PickingList[]> {
              var query = this._commerceContext.salesOrders(id);
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getPickingLists();
              return request.execute<Entities.PickingList[]>(this._callerContext);
          }
      
        public createPackingSlipAsync(salesId: string): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.salesOrders().createPackingSlip(salesId);
              return request.execute<void>(this._callerContext);
          }
      
        public getPackingSlipsDataAsync(salesId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.PackingSlipData[]> {
              var query = this._commerceContext.salesOrders();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getPackingSlipsData(salesId);
              return request.execute<Entities.PackingSlipData[]>(this._callerContext);
          }
      
        
        }
      
      /*** ShiftManager ***/
      export class ShiftManager implements Commerce.Proxy.IShiftManager {
          private _commerceContext: Commerce.Proxy.CommerceContext = null;
          private _callerContext: any;

          constructor(commerceContext: Commerce.Proxy.CommerceContext, callerContext) {
              this._commerceContext = commerceContext;
              this._callerContext = callerContext;
          }

          public createAsync(entity: Entities.Shift): IAsyncResult<Entities.Shift> {
              var request: IDataServiceRequest = this._commerceContext.shifts().create(entity);
              return request.execute<Entities.Shift>(this._callerContext);
          }

          public readAsync(shiftId: number, terminalId: string): IAsyncResult<Entities.Shift> {
              var request: IDataServiceRequest = this._commerceContext.shifts(shiftId, terminalId).read();
              return request.execute<Entities.Shift>(this._callerContext);
          }

          public readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Shift[]> {
              var request: IDataServiceRequest = this._commerceContext.shifts().resultSettings(queryResultSettings).read();
              return request.execute<Entities.Shift[]>(this._callerContext);
          }

          public updateAsync(entity: Entities.Shift): IAsyncResult<Entities.Shift> {
              var request: IDataServiceRequest = this._commerceContext.shifts(entity.ShiftId, entity.TerminalId).update(entity);
              return request.execute<Entities.Shift>(this._callerContext);
          }

          public deleteAsync(entity: Entities.Shift): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.shifts(entity.ShiftId, entity.TerminalId).delete();
              return request.execute<Entities.Shift>(this._callerContext);
          }

          public upsertShiftsAsync(shifts: Entities.Shift[]): IAsyncResult<boolean> {
              var request: IDataServiceRequest = this._commerceContext.shifts().upsertShifts(shifts);
              return request.execute<boolean>(this._callerContext);
          }
      
        public upsertAndValidateShiftsAsync(shiftId: number, terminalId: string, shifts: Entities.Shift[]): IAsyncResult<boolean> {
              var request: IDataServiceRequest = this._commerceContext.shifts().upsertAndValidateShifts(shiftId, terminalId, shifts);
              return request.execute<boolean>(this._callerContext);
          }
      
        public deleteShiftsAsync(): IAsyncResult<boolean> {
              var request: IDataServiceRequest = this._commerceContext.shifts().deleteShifts();
              return request.execute<boolean>(this._callerContext);
          }
      
        public openAsync(shiftId: number, cashDrawer: string, isShared: boolean): IAsyncResult<Entities.Shift> {
              var request: IDataServiceRequest = this._commerceContext.shifts().open(shiftId, cashDrawer, isShared);
              return request.execute<Entities.Shift>(this._callerContext);
          }
      
        public closeAsync(shiftId: number, terminalId: string, transactionId: string, forceClose: boolean, hasOfflinePendingTransactions: boolean): IAsyncResult<Entities.Shift> {
              var request: IDataServiceRequest = this._commerceContext.shifts(shiftId, terminalId).close(transactionId, forceClose, hasOfflinePendingTransactions);
              return request.execute<Entities.Shift>(this._callerContext);
          }
      
        public getSuspendedCartsByShiftAsync(shiftTerminalId: string, shiftId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SuspendedCart[]> {
              var query = this._commerceContext.shifts();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getSuspendedCartsByShift(shiftTerminalId, shiftId);
              return request.execute<Entities.SuspendedCart[]>(this._callerContext);
          }
      
        public voidSuspendedCartsAsync(shiftId: number, terminalId: string): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.shifts(shiftId, terminalId).voidSuspendedCarts();
              return request.execute<void>(this._callerContext);
          }
      
        public saveTenderLinesAsync(shiftId: number, terminalId: string, tenderLines: Entities.ShiftTenderLine[]): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.shifts(shiftId, terminalId).saveTenderLines(tenderLines);
              return request.execute<void>(this._callerContext);
          }
      
        public blindCloseAsync(shiftId: number, terminalId: string, transactionId: string, forceClose: boolean): IAsyncResult<Entities.Shift> {
              var request: IDataServiceRequest = this._commerceContext.shifts(shiftId, terminalId).blindClose(transactionId, forceClose);
              return request.execute<Entities.Shift>(this._callerContext);
          }
      
        public forceDeleteAsync(shiftId: number, terminalId: string, transactionId: string): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.shifts(shiftId, terminalId).forceDelete(transactionId);
              return request.execute<void>(this._callerContext);
          }
      
        public resumeAsync(shiftId: number, terminalId: string, cashDrawer: string): IAsyncResult<Entities.Shift> {
              var request: IDataServiceRequest = this._commerceContext.shifts(shiftId, terminalId).resume(cashDrawer);
              return request.execute<Entities.Shift>(this._callerContext);
          }
      
        public useAsync(shiftId: number, terminalId: string): IAsyncResult<Entities.Shift> {
              var request: IDataServiceRequest = this._commerceContext.shifts(shiftId, terminalId).use();
              return request.execute<Entities.Shift>(this._callerContext);
          }
      
        public suspendAsync(shiftId: number, terminalId: string, transactionId: string): IAsyncResult<Entities.Shift> {
              var request: IDataServiceRequest = this._commerceContext.shifts(shiftId, terminalId).suspend(transactionId);
              return request.execute<Entities.Shift>(this._callerContext);
          }
      
        public getByStatusAsync(statusValue: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Shift[]> {
              var query = this._commerceContext.shifts();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getByStatus(statusValue);
              return request.execute<Entities.Shift[]>(this._callerContext);
          }
      
        public getByStatusFilterByUserRoleAsync(statusValue: number, filterByUserRole: boolean, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Shift[]> {
              var query = this._commerceContext.shifts();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getByStatusFilterByUserRole(statusValue, filterByUserRole);
              return request.execute<Entities.Shift[]>(this._callerContext);
          }
      
        public getByRetrievalCriteriaAsync(shiftRetrievalCriteria: Entities.ShiftRetrievalCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Shift[]> {
              var query = this._commerceContext.shifts();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getByRetrievalCriteria(shiftRetrievalCriteria);
              return request.execute<Entities.Shift[]>(this._callerContext);
          }
      
        public getXReportAsync(shiftId: number, terminalId: string, transactionId: string, hardwareProfileId: string): IAsyncResult<Entities.Receipt> {
              var request: IDataServiceRequest = this._commerceContext.shifts(shiftId, terminalId).getXReport(transactionId, hardwareProfileId);
              return request.execute<Entities.Receipt>(this._callerContext);
          }
      
        public getZReportAsync(transactionId: string, hardwareProfileId: string): IAsyncResult<Entities.Receipt> {
              var request: IDataServiceRequest = this._commerceContext.shifts().getZReport(transactionId, hardwareProfileId);
              return request.execute<Entities.Receipt>(this._callerContext);
          }
      
        public getOpenTenderLinesAsync(shiftId: number, terminalId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ShiftTenderLine[]> {
              var query = this._commerceContext.shifts(shiftId, terminalId);
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getOpenTenderLines();
              return request.execute<Entities.ShiftTenderLine[]>(this._callerContext);
          }
      
        public validateCashDrawerLimitAsync(shiftTerminalId: string, shiftId: number): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.shifts().validateCashDrawerLimit(shiftTerminalId, shiftId);
              return request.execute<void>(this._callerContext);
          }
      
        
        }
      
      /*** StockCountJournalManager ***/
      export class StockCountJournalManager implements Commerce.Proxy.IStockCountJournalManager {
          private _commerceContext: Commerce.Proxy.CommerceContext = null;
          private _callerContext: any;

          constructor(commerceContext: Commerce.Proxy.CommerceContext, callerContext) {
              this._commerceContext = commerceContext;
              this._callerContext = callerContext;
          }

          public createAsync(entity: Entities.StockCountJournal): IAsyncResult<Entities.StockCountJournal> {
              var request: IDataServiceRequest = this._commerceContext.stockCountJournals().create(entity);
              return request.execute<Entities.StockCountJournal>(this._callerContext);
          }

          public readAsync(journalId: string): IAsyncResult<Entities.StockCountJournal> {
              var request: IDataServiceRequest = this._commerceContext.stockCountJournals(journalId).read();
              return request.execute<Entities.StockCountJournal>(this._callerContext);
          }

          public readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.StockCountJournal[]> {
              var request: IDataServiceRequest = this._commerceContext.stockCountJournals().resultSettings(queryResultSettings).read();
              return request.execute<Entities.StockCountJournal[]>(this._callerContext);
          }

          public updateAsync(entity: Entities.StockCountJournal): IAsyncResult<Entities.StockCountJournal> {
              var request: IDataServiceRequest = this._commerceContext.stockCountJournals(entity.JournalId).update(entity);
              return request.execute<Entities.StockCountJournal>(this._callerContext);
          }

          public deleteAsync(entity: Entities.StockCountJournal): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.stockCountJournals(entity.JournalId).delete();
              return request.execute<Entities.StockCountJournal>(this._callerContext);
          }

          public syncAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.StockCountJournal[]> {
              var query = this._commerceContext.stockCountJournals();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.sync();
              return request.execute<Entities.StockCountJournal[]>(this._callerContext);
          }
      
        public syncTransactionsAsync(journalId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.StockCountJournalTransaction[]> {
              var query = this._commerceContext.stockCountJournals(journalId);
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.syncTransactions();
              return request.execute<Entities.StockCountJournalTransaction[]>(this._callerContext);
          }
      
        public calculateEstimatedOnHandInventoryAsync(journalId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.StockCountJournalTransaction[]> {
              var query = this._commerceContext.stockCountJournals(journalId);
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.calculateEstimatedOnHandInventory();
              return request.execute<Entities.StockCountJournalTransaction[]>(this._callerContext);
          }
      
        public removeJournalAsync(journalId: string): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.stockCountJournals(journalId).removeJournal();
              return request.execute<void>(this._callerContext);
          }
      
        public removeTransactionAsync(journalId: string, itemId: string, inventSizeId: string, inventColorId: string, inventStyleId: string, configurationId: string): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.stockCountJournals(journalId).removeTransaction(itemId, inventSizeId, inventColorId, inventStyleId, configurationId);
              return request.execute<void>(this._callerContext);
          }
      
        public removeStockCountLineByLineIdAsync(journalId: string, stockCountLineId: number): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.stockCountJournals(journalId).removeStockCountLineByLineId(stockCountLineId);
              return request.execute<void>(this._callerContext);
          }
      
        public removeStockCountLineByProductRecIdAsync(journalId: string, productId: number): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.stockCountJournals(journalId).removeStockCountLineByProductRecId(productId);
              return request.execute<void>(this._callerContext);
          }
      
        public commitAsync(journalId: string): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.stockCountJournals(journalId).commit();
              return request.execute<void>(this._callerContext);
          }
      
        
        }
      
      /*** OrgUnitManager ***/
      export class OrgUnitManager implements Commerce.Proxy.IOrgUnitManager {
          private _commerceContext: Commerce.Proxy.CommerceContext = null;
          private _callerContext: any;

          constructor(commerceContext: Commerce.Proxy.CommerceContext, callerContext) {
              this._commerceContext = commerceContext;
              this._callerContext = callerContext;
          }

          public createAsync(entity: Entities.OrgUnit): IAsyncResult<Entities.OrgUnit> {
              var request: IDataServiceRequest = this._commerceContext.orgUnits().create(entity);
              return request.execute<Entities.OrgUnit>(this._callerContext);
          }

          public readAsync(orgUnitNumber: string): IAsyncResult<Entities.OrgUnit> {
              var request: IDataServiceRequest = this._commerceContext.orgUnits(orgUnitNumber).read();
              return request.execute<Entities.OrgUnit>(this._callerContext);
          }

          public readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.OrgUnit[]> {
              var request: IDataServiceRequest = this._commerceContext.orgUnits().resultSettings(queryResultSettings).read();
              return request.execute<Entities.OrgUnit[]>(this._callerContext);
          }

          public updateAsync(entity: Entities.OrgUnit): IAsyncResult<Entities.OrgUnit> {
              var request: IDataServiceRequest = this._commerceContext.orgUnits(entity.OrgUnitNumber).update(entity);
              return request.execute<Entities.OrgUnit>(this._callerContext);
          }

          public deleteAsync(entity: Entities.OrgUnit): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.orgUnits(entity.OrgUnitNumber).delete();
              return request.execute<Entities.OrgUnit>(this._callerContext);
          }

          public getTillLayoutAsync(height: number, width: number): IAsyncResult<Entities.TillLayout> {
              var request: IDataServiceRequest = this._commerceContext.orgUnits().getTillLayout(height, width);
              return request.execute<Entities.TillLayout>(this._callerContext);
          }
      
        public searchAsync(storeSearchCriteria: Entities.SearchStoreCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.OrgUnit[]> {
              var query = this._commerceContext.orgUnits();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.search(storeSearchCriteria);
              return request.execute<Entities.OrgUnit[]>(this._callerContext);
          }
      
        public getOrgUnitLocationsByAreaAsync(searchArea: Entities.SearchArea, deliveryModeTypeFilter: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.OrgUnitLocation[]> {
              var query = this._commerceContext.orgUnits();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getOrgUnitLocationsByArea(searchArea, deliveryModeTypeFilter);
              return request.execute<Entities.OrgUnitLocation[]>(this._callerContext);
          }
      
        public searchOrgUnitLocationsAsync(orgUnitLocationSearchCriteria: Entities.OrgUnitLocationSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.OrgUnitLocation[]> {
              var query = this._commerceContext.orgUnits();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.searchOrgUnitLocations(orgUnitLocationSearchCriteria);
              return request.execute<Entities.OrgUnitLocation[]>(this._callerContext);
          }
      
        public getOrgUnitConfigurationAsync(): IAsyncResult<Entities.ChannelConfiguration> {
              var request: IDataServiceRequest = this._commerceContext.orgUnits().getOrgUnitConfiguration();
              return request.execute<Entities.ChannelConfiguration>(this._callerContext);
          }
      
        public getStoreHoursAsync(storeNumber: string): IAsyncResult<Entities.StoreHours> {
              var request: IDataServiceRequest = this._commerceContext.orgUnits().getStoreHours(storeNumber);
              return request.execute<Entities.StoreHours>(this._callerContext);
          }
      
        public getAvailableInventoryAsync(itemId: string, variantId: string, barcode: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.OrgUnitAvailability[]> {
              var query = this._commerceContext.orgUnits();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getAvailableInventory(itemId, variantId, barcode);
              return request.execute<Entities.OrgUnitAvailability[]>(this._callerContext);
          }
      
        public getAvailableInventoryNearbyAsync(itemIds: Entities.ItemUnit[], searchArea: Entities.SearchArea, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.OrgUnitAvailability[]> {
              var query = this._commerceContext.orgUnits();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getAvailableInventoryNearby(itemIds, searchArea);
              return request.execute<Entities.OrgUnitAvailability[]>(this._callerContext);
          }
      
        public getProductAvailabilityByDimensionsAsync(inventLocationIds: string[], productId: number, productDimensionCombinations: Entities.ProductDimensionCombination[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.OrgUnitAvailability[]> {
              var query = this._commerceContext.orgUnits();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getProductAvailabilityByDimensions(inventLocationIds, productId, productDimensionCombinations);
              return request.execute<Entities.OrgUnitAvailability[]>(this._callerContext);
          }
      
        public searchProductAvailabilityAsync(productId: number, orgUnitAvailabilitySearchCriteria: Entities.OrgUnitAvailabilitySearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.OrgUnitAvailability[]> {
              var query = this._commerceContext.orgUnits();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.searchProductAvailability(productId, orgUnitAvailabilitySearchCriteria);
              return request.execute<Entities.OrgUnitAvailability[]>(this._callerContext);
          }
      
        public getTerminalInfoAsync(orgUnitNumber: string, deviceType: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.TerminalInfo[]> {
              var query = this._commerceContext.orgUnits(orgUnitNumber);
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getTerminalInfo(deviceType);
              return request.execute<Entities.TerminalInfo[]>(this._callerContext);
          }
      
        public getProductAvailabilityAsync(productId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.OrgUnitAvailability[]> {
              var query = this._commerceContext.orgUnits();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getProductAvailability(productId);
              return request.execute<Entities.OrgUnitAvailability[]>(this._callerContext);
          }
      
        
        }
      
      /*** ProductManager ***/
      export class ProductManager implements Commerce.Proxy.IProductManager {
          private _commerceContext: Commerce.Proxy.CommerceContext = null;
          private _callerContext: any;

          constructor(commerceContext: Commerce.Proxy.CommerceContext, callerContext) {
              this._commerceContext = commerceContext;
              this._callerContext = callerContext;
          }

          public createAsync(entity: Entities.Product): IAsyncResult<Entities.Product> {
              var request: IDataServiceRequest = this._commerceContext.products().create(entity);
              return request.execute<Entities.Product>(this._callerContext);
          }

          public readAsync(recordId: number): IAsyncResult<Entities.Product> {
              var request: IDataServiceRequest = this._commerceContext.products(recordId).read();
              return request.execute<Entities.Product>(this._callerContext);
          }

          public readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Product[]> {
              var request: IDataServiceRequest = this._commerceContext.products().resultSettings(queryResultSettings).read();
              return request.execute<Entities.Product[]>(this._callerContext);
          }

          public updateAsync(entity: Entities.Product): IAsyncResult<Entities.Product> {
              var request: IDataServiceRequest = this._commerceContext.products(entity.RecordId).update(entity);
              return request.execute<Entities.Product>(this._callerContext);
          }

          public deleteAsync(entity: Entities.Product): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.products(entity.RecordId).delete();
              return request.execute<Entities.Product>(this._callerContext);
          }

          public getDimensionValuesAsync(recordId: number, channelId: number, dimension: number, matchingDimensionValues: Entities.ProductDimension[], kitVariantResolutionContext: Entities.ProductVariantResolutionOnKitSelectionContext, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductDimensionValue[]> {
              var query = this._commerceContext.products(recordId);
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getDimensionValues(channelId, dimension, matchingDimensionValues, kitVariantResolutionContext);
              return request.execute<Entities.ProductDimensionValue[]>(this._callerContext);
          }
      
        public getVariantsByDimensionValuesAsync(recordId: number, channelId: number, matchingDimensionValues: Entities.ProductDimension[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SimpleProduct[]> {
              var query = this._commerceContext.products(recordId);
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getVariantsByDimensionValues(channelId, matchingDimensionValues);
              return request.execute<Entities.SimpleProduct[]>(this._callerContext);
          }
      
        public getVariantsByComponentsInSlotsAsync(recordId: number, channelId: number, matchingSlotToComponentRelationship: Entities.ComponentInSlotRelation[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SimpleProduct[]> {
              var query = this._commerceContext.products(recordId);
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getVariantsByComponentsInSlots(channelId, matchingSlotToComponentRelationship);
              return request.execute<Entities.SimpleProduct[]>(this._callerContext);
          }
      
        public getByIdsAsync(channelId: number, productIds: number[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SimpleProduct[]> {
              var query = this._commerceContext.products();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getByIds(channelId, productIds);
              return request.execute<Entities.SimpleProduct[]>(this._callerContext);
          }
      
        public compareAsync(channelId: number, catalogId: number, productIds: number[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductComparisonLine[]> {
              var query = this._commerceContext.products();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.compare(channelId, catalogId, productIds);
              return request.execute<Entities.ProductComparisonLine[]>(this._callerContext);
          }
      
        public getRecommendedProductsAsync(productIds: number[], customerId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductSearchResult[]> {
              var query = this._commerceContext.products();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getRecommendedProducts(productIds, customerId);
              return request.execute<Entities.ProductSearchResult[]>(this._callerContext);
          }
      
        public refineSearchByCategoryAsync(channelId: number, catalogId: number, categoryId: number, refinementCriteria: Entities.ProductRefinerValue[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductSearchResult[]> {
              var query = this._commerceContext.products();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.refineSearchByCategory(channelId, catalogId, categoryId, refinementCriteria);
              return request.execute<Entities.ProductSearchResult[]>(this._callerContext);
          }
      
        public refineSearchByTextAsync(channelId: number, catalogId: number, searchText: string, refinementCriteria: Entities.ProductRefinerValue[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductSearchResult[]> {
              var query = this._commerceContext.products();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.refineSearchByText(channelId, catalogId, searchText, refinementCriteria);
              return request.execute<Entities.ProductSearchResult[]>(this._callerContext);
          }
      
        public getProductSearchRefinersAsync(searchCriteria: Entities.ProductSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductRefiner[]> {
              var query = this._commerceContext.products();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getProductSearchRefiners(searchCriteria);
              return request.execute<Entities.ProductRefiner[]>(this._callerContext);
          }
      
        public searchAsync(productSearchCriteria: Entities.ProductSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Product[]> {
              var query = this._commerceContext.products();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.search(productSearchCriteria);
              return request.execute<Entities.Product[]>(this._callerContext);
          }
      
        public getRefinersAsync(productSearchCriteria: Entities.ProductSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductRefiner[]> {
              var query = this._commerceContext.products();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getRefiners(productSearchCriteria);
              return request.execute<Entities.ProductRefiner[]>(this._callerContext);
          }
      
        public changesAsync(productSearchCriteria: Entities.ChangedProductsSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Product[]> {
              var query = this._commerceContext.products();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.changes(productSearchCriteria);
              return request.execute<Entities.Product[]>(this._callerContext);
          }
      
        public beginReadChangedProductsAsync(changedProductSearchCriteria: Entities.ChangedProductsSearchCriteria): IAsyncResult<Entities.ReadChangedProductsSession> {
              var request: IDataServiceRequest = this._commerceContext.products().beginReadChangedProducts(changedProductSearchCriteria);
              return request.execute<Entities.ReadChangedProductsSession>(this._callerContext);
          }
      
        public readChangedProductsAsync(productSearchCriteria: Entities.ChangedProductsSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Product[]> {
              var query = this._commerceContext.products();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.readChangedProducts(productSearchCriteria);
              return request.execute<Entities.Product[]>(this._callerContext);
          }
      
        public getDeletedListingsAsync(catalogId: number, skip: number, top: number): IAsyncResult<Entities.DeletedListingsResult> {
              var request: IDataServiceRequest = this._commerceContext.products().getDeletedListings(catalogId, skip, top);
              return request.execute<Entities.DeletedListingsResult>(this._callerContext);
          }
      
        public getDeletedCatalogsAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<number[]> {
              var query = this._commerceContext.products();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getDeletedCatalogs();
              return request.execute<number[]>(this._callerContext);
          }
      
        public getDeletedLanguagesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<string[]> {
              var query = this._commerceContext.products();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getDeletedLanguages();
              return request.execute<string[]>(this._callerContext);
          }
      
        public getProductRatingsAsync(productIds: number[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductRating[]> {
              var query = this._commerceContext.products();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getProductRatings(productIds);
              return request.execute<Entities.ProductRating[]>(this._callerContext);
          }
      
        public getProductAssortmentIntervalsAsync(productIds: number[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductAssortmentInterval[]> {
              var query = this._commerceContext.products();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getProductAssortmentIntervals(productIds);
              return request.execute<Entities.ProductAssortmentInterval[]>(this._callerContext);
          }
      
        public getDeliveryOptionsAsync(productIds: number[], address: Entities.Address, filterOption: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductDeliveryOptions[]> {
              var query = this._commerceContext.products();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getDeliveryOptions(productIds, address, filterOption);
              return request.execute<Entities.ProductDeliveryOptions[]>(this._callerContext);
          }
      
        public deleteListingsByCatalogsAsync(catalogIds: number[]): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.products().deleteListingsByCatalogs(catalogIds);
              return request.execute<void>(this._callerContext);
          }
      
        public deleteListingsByLanguagesAsync(languages: string[]): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.products().deleteListingsByLanguages(languages);
              return request.execute<void>(this._callerContext);
          }
      
        public endReadChangedProductsAsync(session: Entities.ReadChangedProductsSession): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.products().endReadChangedProducts(session);
              return request.execute<void>(this._callerContext);
          }
      
        public updateListingPublishingStatusAsync(publishingStatuses: Entities.ListingPublishStatus[]): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.products().updateListingPublishingStatus(publishingStatuses);
              return request.execute<void>(this._callerContext);
          }
      
        public getPricesAsync(itemId: string, inventoryDimensionId: string, barcode: string, customerAccountNumber: string, unitOfMeasureSymbol: string, quantity: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductPrice[]> {
              var query = this._commerceContext.products();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getPrices(itemId, inventoryDimensionId, barcode, customerAccountNumber, unitOfMeasureSymbol, quantity);
              return request.execute<Entities.ProductPrice[]>(this._callerContext);
          }
      
        public getProductAvailabilitiesAsync(itemIds: number[], channelId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductAvailableQuantity[]> {
              var query = this._commerceContext.products();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getProductAvailabilities(itemIds, channelId);
              return request.execute<Entities.ProductAvailableQuantity[]>(this._callerContext);
          }
      
        public getActivePricesAsync(projectDomain: Entities.ProjectionDomain, productIds: number[], activeDate: Date, customerId: string, affiliationLoyaltyTiers: Entities.AffiliationLoyaltyTier[], includeSimpleDiscountsInContextualPrice: boolean, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductPrice[]> {
              var query = this._commerceContext.products();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getActivePrices(projectDomain, productIds, activeDate, customerId, affiliationLoyaltyTiers, includeSimpleDiscountsInContextualPrice);
              return request.execute<Entities.ProductPrice[]>(this._callerContext);
          }
      
        public getFilteredSlotComponentsAsync(recordId: number, channelId: number, slotId: number, selectedComponents: Entities.ComponentInSlotRelation[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductComponent[]> {
              var query = this._commerceContext.products(recordId);
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getFilteredSlotComponents(channelId, slotId, selectedComponents);
              return request.execute<Entities.ProductComponent[]>(this._callerContext);
          }
      
        public getComponentByProductSlotRelationAsync(channelId: number, componentRelation: Entities.ComponentInSlotRelation): IAsyncResult<Entities.ProductComponent> {
              var request: IDataServiceRequest = this._commerceContext.products().getComponentByProductSlotRelation(channelId, componentRelation);
              return request.execute<Entities.ProductComponent>(this._callerContext);
          }
      
        public getCategoryPathsAsync(channelId: number, catalogId: number, categoryPathLookups: Entities.CategoryPathLookup[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CategoryPathResult[]> {
              var query = this._commerceContext.products();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getCategoryPaths(channelId, catalogId, categoryPathLookups);
              return request.execute<Entities.CategoryPathResult[]>(this._callerContext);
          }
      
        public searchByCategoryAsync(channelId: number, catalogId: number, categoryId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductSearchResult[]> {
              var query = this._commerceContext.products();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.searchByCategory(channelId, catalogId, categoryId);
              return request.execute<Entities.ProductSearchResult[]>(this._callerContext);
          }
      
        public searchByTextAsync(channelId: number, catalogId: number, searchText: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductSearchResult[]> {
              var query = this._commerceContext.products();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.searchByText(channelId, catalogId, searchText);
              return request.execute<Entities.ProductSearchResult[]>(this._callerContext);
          }
      
        public searchByCriteriaAsync(searchCriteria: Entities.ProductSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductSearchResult[]> {
              var query = this._commerceContext.products();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.searchByCriteria(searchCriteria);
              return request.execute<Entities.ProductSearchResult[]>(this._callerContext);
          }
      
        public getByLookupClausesAsync(channelId: number, productLookupClauses: Entities.ProductLookupClause[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SimpleProduct[]> {
              var query = this._commerceContext.products();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getByLookupClauses(channelId, productLookupClauses);
              return request.execute<Entities.SimpleProduct[]>(this._callerContext);
          }
      
        public getSearchSuggestionsAsync(channelId: number, catalogId: number, searchText: string, hitPrefix: string, hitSuffix: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SearchSuggestion[]> {
              var query = this._commerceContext.products();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getSearchSuggestions(channelId, catalogId, searchText, hitPrefix, hitSuffix);
              return request.execute<Entities.SearchSuggestion[]>(this._callerContext);
          }
      
        public getRefinersByCategoryAsync(catalogId: number, categoryId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductRefiner[]> {
              var query = this._commerceContext.products();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getRefinersByCategory(catalogId, categoryId);
              return request.execute<Entities.ProductRefiner[]>(this._callerContext);
          }
      
        public getRefinersByTextAsync(catalogId: number, searchText: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductRefiner[]> {
              var query = this._commerceContext.products();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getRefinersByText(catalogId, searchText);
              return request.execute<Entities.ProductRefiner[]>(this._callerContext);
          }
      
        public getRefinerValuesByCategoryAsync(catalogId: number, categoryId: number, refinerId: number, refinerSourceValue: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductRefinerValue[]> {
              var query = this._commerceContext.products();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getRefinerValuesByCategory(catalogId, categoryId, refinerId, refinerSourceValue);
              return request.execute<Entities.ProductRefinerValue[]>(this._callerContext);
          }
      
        public getRefinerValuesByTextAsync(catalogId: number, searchText: string, refinerId: number, refinerSourceValue: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductRefinerValue[]> {
              var query = this._commerceContext.products();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getRefinerValuesByText(catalogId, searchText, refinerId, refinerSourceValue);
              return request.execute<Entities.ProductRefinerValue[]>(this._callerContext);
          }
      
        public getChannelProductAttributesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.AttributeProduct[]> {
              var query = this._commerceContext.products();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getChannelProductAttributes();
              return request.execute<Entities.AttributeProduct[]>(this._callerContext);
          }
      
        public getByIdAsync(recordId: number, channelId: number): IAsyncResult<Entities.SimpleProduct> {
              var request: IDataServiceRequest = this._commerceContext.products(recordId).getById(channelId);
              return request.execute<Entities.SimpleProduct>(this._callerContext);
          }
      
        public getAttributeValuesAsync(recordId: number, channelId: number, catalogId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.AttributeValue[]> {
              var query = this._commerceContext.products(recordId);
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getAttributeValues(channelId, catalogId);
              return request.execute<Entities.AttributeValue[]>(this._callerContext);
          }
      
        public getMediaLocationsAsync(recordId: number, channelId: number, catalogId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.MediaLocation[]> {
              var query = this._commerceContext.products(recordId);
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getMediaLocations(channelId, catalogId);
              return request.execute<Entities.MediaLocation[]>(this._callerContext);
          }
      
        public getMediaBlobsAsync(recordId: number, channelId: number, catalogId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.MediaBlob[]> {
              var query = this._commerceContext.products(recordId);
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getMediaBlobs(channelId, catalogId);
              return request.execute<Entities.MediaBlob[]>(this._callerContext);
          }
      
        public getDefaultComponentsAsync(recordId: number, channelId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductComponent[]> {
              var query = this._commerceContext.products(recordId);
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getDefaultComponents(channelId);
              return request.execute<Entities.ProductComponent[]>(this._callerContext);
          }
      
        public getSlotComponentsAsync(recordId: number, channelId: number, slotId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductComponent[]> {
              var query = this._commerceContext.products(recordId);
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getSlotComponents(channelId, slotId);
              return request.execute<Entities.ProductComponent[]>(this._callerContext);
          }
      
        public getAllRelationTypesAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductRelationType[]> {
              var query = this._commerceContext.products();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getAllRelationTypes();
              return request.execute<Entities.ProductRelationType[]>(this._callerContext);
          }
      
        public getRelationTypesAsync(recordId: number, channelId: number, catalogId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductRelationType[]> {
              var query = this._commerceContext.products(recordId);
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getRelationTypes(channelId, catalogId);
              return request.execute<Entities.ProductRelationType[]>(this._callerContext);
          }
      
        public getRelatedProductsAsync(recordId: number, channelId: number, catalogId: number, relationTypeId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductSearchResult[]> {
              var query = this._commerceContext.products(recordId);
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getRelatedProducts(channelId, catalogId, relationTypeId);
              return request.execute<Entities.ProductSearchResult[]>(this._callerContext);
          }
      
        public getUnitsOfMeasureAsync(recordId: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.UnitOfMeasure[]> {
              var query = this._commerceContext.products(recordId);
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getUnitsOfMeasure();
              return request.execute<Entities.UnitOfMeasure[]>(this._callerContext);
          }
      
        public getApplicableWarrantiesAsync(catalogId: number, warrantableProductIds: number[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductWarrantiesMapping[]> {
              var query = this._commerceContext.products();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getApplicableWarranties(catalogId, warrantableProductIds);
              return request.execute<Entities.ProductWarrantiesMapping[]>(this._callerContext);
          }
      
        public getPriceAsync(recordId: number, customerAccountNumber: string, unitOfMeasureSymbol: string): IAsyncResult<Entities.ProductPrice> {
              var request: IDataServiceRequest = this._commerceContext.products(recordId).getPrice(customerAccountNumber, unitOfMeasureSymbol);
              return request.execute<Entities.ProductPrice>(this._callerContext);
          }
      
        public calculateProductPriceAsync(recordId: number, customerAccountNumber: string, unitOfMeasureSymbol: string, loyaltyCardId: string, affiliationLoyaltyTiers: Entities.AffiliationLoyaltyTier[]): IAsyncResult<Entities.ProductPrice> {
              var request: IDataServiceRequest = this._commerceContext.products(recordId).calculateProductPrice(customerAccountNumber, unitOfMeasureSymbol, loyaltyCardId, affiliationLoyaltyTiers);
              return request.execute<Entities.ProductPrice>(this._callerContext);
          }
      
        public getEstimatedProductWarehouseAvailabilityAsync(productWarehouses: Entities.ProductWarehouse[]): IAsyncResult<Entities.ProductWarehouseInventoryInformation> {
              var request: IDataServiceRequest = this._commerceContext.products().getEstimatedProductWarehouseAvailability(productWarehouses);
              return request.execute<Entities.ProductWarehouseInventoryInformation>(this._callerContext);
          }
      
        public getEstimatedAvailabilityAsync(searchCriteria: Entities.InventoryAvailabilitySearchCriteria): IAsyncResult<Entities.ProductWarehouseInventoryInformation> {
              var request: IDataServiceRequest = this._commerceContext.products().getEstimatedAvailability(searchCriteria);
              return request.execute<Entities.ProductWarehouseInventoryInformation>(this._callerContext);
          }
      
        
        }
      
      /*** ProductCatalogManager ***/
      export class ProductCatalogManager implements Commerce.Proxy.IProductCatalogManager {
          private _commerceContext: Commerce.Proxy.CommerceContext = null;
          private _callerContext: any;

          constructor(commerceContext: Commerce.Proxy.CommerceContext, callerContext) {
              this._commerceContext = commerceContext;
              this._callerContext = callerContext;
          }

          public createAsync(entity: Entities.ProductCatalog): IAsyncResult<Entities.ProductCatalog> {
              var request: IDataServiceRequest = this._commerceContext.catalogs().create(entity);
              return request.execute<Entities.ProductCatalog>(this._callerContext);
          }

          public readAsync(recordId: number): IAsyncResult<Entities.ProductCatalog> {
              var request: IDataServiceRequest = this._commerceContext.catalogs(recordId).read();
              return request.execute<Entities.ProductCatalog>(this._callerContext);
          }

          public readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductCatalog[]> {
              var request: IDataServiceRequest = this._commerceContext.catalogs().resultSettings(queryResultSettings).read();
              return request.execute<Entities.ProductCatalog[]>(this._callerContext);
          }

          public updateAsync(entity: Entities.ProductCatalog): IAsyncResult<Entities.ProductCatalog> {
              var request: IDataServiceRequest = this._commerceContext.catalogs(entity.RecordId).update(entity);
              return request.execute<Entities.ProductCatalog>(this._callerContext);
          }

          public deleteAsync(entity: Entities.ProductCatalog): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.catalogs(entity.RecordId).delete();
              return request.execute<Entities.ProductCatalog>(this._callerContext);
          }

          public getCatalogsAsync(channelId: number, activeOnly: boolean, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductCatalog[]> {
              var query = this._commerceContext.catalogs();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getCatalogs(channelId, activeOnly);
              return request.execute<Entities.ProductCatalog[]>(this._callerContext);
          }
      
        
        }
      
      /*** CommerceListManager ***/
      export class CommerceListManager implements Commerce.Proxy.ICommerceListManager {
          private _commerceContext: Commerce.Proxy.CommerceContext = null;
          private _callerContext: any;

          constructor(commerceContext: Commerce.Proxy.CommerceContext, callerContext) {
              this._commerceContext = commerceContext;
              this._callerContext = callerContext;
          }

          public createAsync(entity: Entities.CommerceList): IAsyncResult<Entities.CommerceList> {
              var request: IDataServiceRequest = this._commerceContext.commerceLists().create(entity);
              return request.execute<Entities.CommerceList>(this._callerContext);
          }

          public readAsync(id: number): IAsyncResult<Entities.CommerceList> {
              var request: IDataServiceRequest = this._commerceContext.commerceLists(id).read();
              return request.execute<Entities.CommerceList>(this._callerContext);
          }

          public readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CommerceList[]> {
              var request: IDataServiceRequest = this._commerceContext.commerceLists().resultSettings(queryResultSettings).read();
              return request.execute<Entities.CommerceList[]>(this._callerContext);
          }

          public updateAsync(entity: Entities.CommerceList): IAsyncResult<Entities.CommerceList> {
              var request: IDataServiceRequest = this._commerceContext.commerceLists(entity.Id).update(entity);
              return request.execute<Entities.CommerceList>(this._callerContext);
          }

          public deleteAsync(entity: Entities.CommerceList): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.commerceLists(entity.Id).delete();
              return request.execute<Entities.CommerceList>(this._callerContext);
          }

          public getByCustomerAsync(customerId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.CommerceList[]> {
              var query = this._commerceContext.commerceLists();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getByCustomer(customerId);
              return request.execute<Entities.CommerceList[]>(this._callerContext);
          }
      
        public addLinesAsync(id: number, commerceListLines: Entities.CommerceListLine[]): IAsyncResult<Entities.CommerceList> {
              var request: IDataServiceRequest = this._commerceContext.commerceLists(id).addLines(commerceListLines);
              return request.execute<Entities.CommerceList>(this._callerContext);
          }
      
        public updateLinesAsync(id: number, commerceListLines: Entities.CommerceListLine[]): IAsyncResult<Entities.CommerceList> {
              var request: IDataServiceRequest = this._commerceContext.commerceLists(id).updateLines(commerceListLines);
              return request.execute<Entities.CommerceList>(this._callerContext);
          }
      
        public removeLinesAsync(id: number, commerceListLines: Entities.CommerceListLine[]): IAsyncResult<Entities.CommerceList> {
              var request: IDataServiceRequest = this._commerceContext.commerceLists(id).removeLines(commerceListLines);
              return request.execute<Entities.CommerceList>(this._callerContext);
          }
      
        public moveLinesAsync(commerceListLines: Entities.CommerceListLine[], destinationId: number): IAsyncResult<Entities.CommerceList> {
              var request: IDataServiceRequest = this._commerceContext.commerceLists().moveLines(commerceListLines, destinationId);
              return request.execute<Entities.CommerceList>(this._callerContext);
          }
      
        public copyLinesAsync(commerceListLines: Entities.CommerceListLine[], destinationId: number): IAsyncResult<Entities.CommerceList> {
              var request: IDataServiceRequest = this._commerceContext.commerceLists().copyLines(commerceListLines, destinationId);
              return request.execute<Entities.CommerceList>(this._callerContext);
          }
      
        public addContributorsAsync(id: number, commerceListContributors: Entities.CommerceListContributor[]): IAsyncResult<Entities.CommerceList> {
              var request: IDataServiceRequest = this._commerceContext.commerceLists(id).addContributors(commerceListContributors);
              return request.execute<Entities.CommerceList>(this._callerContext);
          }
      
        public removeContributorsAsync(id: number, commerceListContributors: Entities.CommerceListContributor[]): IAsyncResult<Entities.CommerceList> {
              var request: IDataServiceRequest = this._commerceContext.commerceLists(id).removeContributors(commerceListContributors);
              return request.execute<Entities.CommerceList>(this._callerContext);
          }
      
        public createInvitationsAsync(id: number, commerceListInvitations: Entities.CommerceListInvitation[]): IAsyncResult<Entities.CommerceList> {
              var request: IDataServiceRequest = this._commerceContext.commerceLists(id).createInvitations(commerceListInvitations);
              return request.execute<Entities.CommerceList>(this._callerContext);
          }
      
        public acceptInvitationAsync(invitationToken: string, customerId: string): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.commerceLists().acceptInvitation(invitationToken, customerId);
              return request.execute<void>(this._callerContext);
          }
      
        
        }
      
      /*** ProductListManager ***/
      export class ProductListManager implements Commerce.Proxy.IProductListManager {
          private _commerceContext: Commerce.Proxy.CommerceContext = null;
          private _callerContext: any;

          constructor(commerceContext: Commerce.Proxy.CommerceContext, callerContext) {
              this._commerceContext = commerceContext;
              this._callerContext = callerContext;
          }

          public createAsync(entity: Entities.ProductList): IAsyncResult<Entities.ProductList> {
              var request: IDataServiceRequest = this._commerceContext.productLists().create(entity);
              return request.execute<Entities.ProductList>(this._callerContext);
          }

          public readAsync(id: string): IAsyncResult<Entities.ProductList> {
              var request: IDataServiceRequest = this._commerceContext.productLists(id).read();
              return request.execute<Entities.ProductList>(this._callerContext);
          }

          public readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductList[]> {
              var request: IDataServiceRequest = this._commerceContext.productLists().resultSettings(queryResultSettings).read();
              return request.execute<Entities.ProductList[]>(this._callerContext);
          }

          public updateAsync(entity: Entities.ProductList): IAsyncResult<Entities.ProductList> {
              var request: IDataServiceRequest = this._commerceContext.productLists(entity.Id).update(entity);
              return request.execute<Entities.ProductList>(this._callerContext);
          }

          public deleteAsync(entity: Entities.ProductList): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.productLists(entity.Id).delete();
              return request.execute<Entities.ProductList>(this._callerContext);
          }

          public searchAsync(searchCriteria: Entities.ProductListSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductList[]> {
              var query = this._commerceContext.productLists();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.search(searchCriteria);
              return request.execute<Entities.ProductList[]>(this._callerContext);
          }
      
        public getProductListLinesAsync(id: string, searchText: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductListLine[]> {
              var query = this._commerceContext.productLists(id);
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getProductListLines(searchText);
              return request.execute<Entities.ProductListLine[]>(this._callerContext);
          }
      
        public addProductListLinesAsync(id: string, productListLines: Entities.ProductListLine[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductListLine[]> {
              var query = this._commerceContext.productLists(id);
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.addProductListLines(productListLines);
              return request.execute<Entities.ProductListLine[]>(this._callerContext);
          }
      
        public updateProductListLinesAsync(id: string, productListLines: Entities.ProductListLine[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ProductListLine[]> {
              var query = this._commerceContext.productLists(id);
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.updateProductListLines(productListLines);
              return request.execute<Entities.ProductListLine[]>(this._callerContext);
          }
      
        public removeProductListLinesAsync(id: string, productListLines: Entities.ProductListLine[]): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.productLists(id).removeProductListLines(productListLines);
              return request.execute<void>(this._callerContext);
          }
      
        public copyCartToProductListAsync(id: string, cartId: string, isRewrite: boolean, isQuantityAggregate: boolean): IAsyncResult<Entities.ProductList> {
              var request: IDataServiceRequest = this._commerceContext.productLists(id).copyCartToProductList(cartId, isRewrite, isQuantityAggregate);
              return request.execute<Entities.ProductList>(this._callerContext);
          }
      
        
        }
      
      /*** RecommendationManager ***/
      export class RecommendationManager implements Commerce.Proxy.IRecommendationManager {
          private _commerceContext: Commerce.Proxy.CommerceContext = null;
          private _callerContext: any;

          constructor(commerceContext: Commerce.Proxy.CommerceContext, callerContext) {
              this._commerceContext = commerceContext;
              this._callerContext = callerContext;
          }

          public createAsync(entity: Entities.Recommendation): IAsyncResult<Entities.Recommendation> {
              var request: IDataServiceRequest = this._commerceContext.recommendations().create(entity);
              return request.execute<Entities.Recommendation>(this._callerContext);
          }

          public readAsync(id: string): IAsyncResult<Entities.Recommendation> {
              var request: IDataServiceRequest = this._commerceContext.recommendations(id).read();
              return request.execute<Entities.Recommendation>(this._callerContext);
          }

          public readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Recommendation[]> {
              var request: IDataServiceRequest = this._commerceContext.recommendations().resultSettings(queryResultSettings).read();
              return request.execute<Entities.Recommendation[]>(this._callerContext);
          }

          public updateAsync(entity: Entities.Recommendation): IAsyncResult<Entities.Recommendation> {
              var request: IDataServiceRequest = this._commerceContext.recommendations(entity.Id).update(entity);
              return request.execute<Entities.Recommendation>(this._callerContext);
          }

          public deleteAsync(entity: Entities.Recommendation): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.recommendations(entity.Id).delete();
              return request.execute<Entities.Recommendation>(this._callerContext);
          }

          public getElementsAsync(id: string, recommendationCriteria: Entities.RecommendationCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.RecommendedElement[]> {
              var query = this._commerceContext.recommendations(id);
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getElements(recommendationCriteria);
              return request.execute<Entities.RecommendedElement[]>(this._callerContext);
          }
      
        
        }
      
      /*** TransferOrderManager ***/
      export class TransferOrderManager implements Commerce.Proxy.ITransferOrderManager {
          private _commerceContext: Commerce.Proxy.CommerceContext = null;
          private _callerContext: any;

          constructor(commerceContext: Commerce.Proxy.CommerceContext, callerContext) {
              this._commerceContext = commerceContext;
              this._callerContext = callerContext;
          }

          public createAsync(entity: Entities.TransferOrder): IAsyncResult<Entities.TransferOrder> {
              var request: IDataServiceRequest = this._commerceContext.transferOrders().create(entity);
              return request.execute<Entities.TransferOrder>(this._callerContext);
          }

          public readAsync(orderId: string): IAsyncResult<Entities.TransferOrder> {
              var request: IDataServiceRequest = this._commerceContext.transferOrders(orderId).read();
              return request.execute<Entities.TransferOrder>(this._callerContext);
          }

          public readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.TransferOrder[]> {
              var request: IDataServiceRequest = this._commerceContext.transferOrders().resultSettings(queryResultSettings).read();
              return request.execute<Entities.TransferOrder[]>(this._callerContext);
          }

          public updateAsync(entity: Entities.TransferOrder): IAsyncResult<Entities.TransferOrder> {
              var request: IDataServiceRequest = this._commerceContext.transferOrders(entity.OrderId).update(entity);
              return request.execute<Entities.TransferOrder>(this._callerContext);
          }

          public deleteAsync(entity: Entities.TransferOrder): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.transferOrders(entity.OrderId).delete();
              return request.execute<Entities.TransferOrder>(this._callerContext);
          }

          public commitAsync(orderId: string, skipNotValidLines: boolean): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.transferOrders(orderId).commit(skipNotValidLines);
              return request.execute<void>(this._callerContext);
          }
      
        public getTransferOrderLinesAsync(orderId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.TransferOrderLine[]> {
              var query = this._commerceContext.transferOrders(orderId);
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getTransferOrderLines();
              return request.execute<Entities.TransferOrderLine[]>(this._callerContext);
          }
      
        public createTransferOrderLinesAsync(orderId: string, transferOrderLines: Entities.TransferOrderLine[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.TransferOrderLine[]> {
              var query = this._commerceContext.transferOrders(orderId);
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.createTransferOrderLines(transferOrderLines);
              return request.execute<Entities.TransferOrderLine[]>(this._callerContext);
          }
      
        public updateTransferOrderLinesAsync(orderId: string, transferOrderLines: Entities.TransferOrderLine[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.TransferOrderLine[]> {
              var query = this._commerceContext.transferOrders(orderId);
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.updateTransferOrderLines(transferOrderLines);
              return request.execute<Entities.TransferOrderLine[]>(this._callerContext);
          }
      
        public getTransferOrderCommentsAsync(orderId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Comment[]> {
              var query = this._commerceContext.transferOrders(orderId);
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getTransferOrderComments();
              return request.execute<Entities.Comment[]>(this._callerContext);
          }
      
        public addTransferOrderCommentAsync(orderId: string, authorStaffId: string, commentText: string): IAsyncResult<Entities.Comment> {
              var request: IDataServiceRequest = this._commerceContext.transferOrders(orderId).addTransferOrderComment(authorStaffId, commentText);
              return request.execute<Entities.Comment>(this._callerContext);
          }
      
        public deleteTransferOrderLinesAsync(orderId: string, transferOrderLines: Entities.TransferOrderLine[], queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.TransferOrderLine[]> {
              var query = this._commerceContext.transferOrders(orderId);
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.deleteTransferOrderLines(transferOrderLines);
              return request.execute<Entities.TransferOrderLine[]>(this._callerContext);
          }
      
        public getTransferOrderJournalsAsync(orderId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.TransferOrderJournal[]> {
              var query = this._commerceContext.transferOrders(orderId);
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getTransferOrderJournals();
              return request.execute<Entities.TransferOrderJournal[]>(this._callerContext);
          }
      
        public getTransferPackingSlipAsync(orderId: string, voucherId: string, receiptRetrievalCriteria: Entities.ReceiptRetrievalCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Receipt[]> {
              var query = this._commerceContext.transferOrders(orderId);
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getTransferPackingSlip(voucherId, receiptRetrievalCriteria);
              return request.execute<Entities.Receipt[]>(this._callerContext);
          }
      
        
        }
      
      /*** PurchaseOrderManager ***/
      export class PurchaseOrderManager implements Commerce.Proxy.IPurchaseOrderManager {
          private _commerceContext: Commerce.Proxy.CommerceContext = null;
          private _callerContext: any;

          constructor(commerceContext: Commerce.Proxy.CommerceContext, callerContext) {
              this._commerceContext = commerceContext;
              this._callerContext = callerContext;
          }

          public createAsync(entity: Entities.PurchaseOrder): IAsyncResult<Entities.PurchaseOrder> {
              var request: IDataServiceRequest = this._commerceContext.purchaseOrders().create(entity);
              return request.execute<Entities.PurchaseOrder>(this._callerContext);
          }

          public readAsync(orderId: string): IAsyncResult<Entities.PurchaseOrder> {
              var request: IDataServiceRequest = this._commerceContext.purchaseOrders(orderId).read();
              return request.execute<Entities.PurchaseOrder>(this._callerContext);
          }

          public readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.PurchaseOrder[]> {
              var request: IDataServiceRequest = this._commerceContext.purchaseOrders().resultSettings(queryResultSettings).read();
              return request.execute<Entities.PurchaseOrder[]>(this._callerContext);
          }

          public updateAsync(entity: Entities.PurchaseOrder): IAsyncResult<Entities.PurchaseOrder> {
              var request: IDataServiceRequest = this._commerceContext.purchaseOrders(entity.OrderId).update(entity);
              return request.execute<Entities.PurchaseOrder>(this._callerContext);
          }

          public deleteAsync(entity: Entities.PurchaseOrder): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.purchaseOrders(entity.OrderId).delete();
              return request.execute<Entities.PurchaseOrder>(this._callerContext);
          }

          public commitAsync(orderId: string): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.purchaseOrders(orderId).commit();
              return request.execute<void>(this._callerContext);
          }
      
        
        }
      
      /*** PickingListManager ***/
      export class PickingListManager implements Commerce.Proxy.IPickingListManager {
          private _commerceContext: Commerce.Proxy.CommerceContext = null;
          private _callerContext: any;

          constructor(commerceContext: Commerce.Proxy.CommerceContext, callerContext) {
              this._commerceContext = commerceContext;
              this._callerContext = callerContext;
          }

          public createAsync(entity: Entities.PickingList): IAsyncResult<Entities.PickingList> {
              var request: IDataServiceRequest = this._commerceContext.pickingLists().create(entity);
              return request.execute<Entities.PickingList>(this._callerContext);
          }

          public readAsync(orderId: string): IAsyncResult<Entities.PickingList> {
              var request: IDataServiceRequest = this._commerceContext.pickingLists(orderId).read();
              return request.execute<Entities.PickingList>(this._callerContext);
          }

          public readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.PickingList[]> {
              var request: IDataServiceRequest = this._commerceContext.pickingLists().resultSettings(queryResultSettings).read();
              return request.execute<Entities.PickingList[]>(this._callerContext);
          }

          public updateAsync(entity: Entities.PickingList): IAsyncResult<Entities.PickingList> {
              var request: IDataServiceRequest = this._commerceContext.pickingLists(entity.OrderId).update(entity);
              return request.execute<Entities.PickingList>(this._callerContext);
          }

          public deleteAsync(entity: Entities.PickingList): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.pickingLists(entity.OrderId).delete();
              return request.execute<Entities.PickingList>(this._callerContext);
          }

          public commitAsync(orderId: string): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.pickingLists(orderId).commit();
              return request.execute<void>(this._callerContext);
          }
      
        
        }
      
      /*** WarehouseManager ***/
      export class WarehouseManager implements Commerce.Proxy.IWarehouseManager {
          private _commerceContext: Commerce.Proxy.CommerceContext = null;
          private _callerContext: any;

          constructor(commerceContext: Commerce.Proxy.CommerceContext, callerContext) {
              this._commerceContext = commerceContext;
              this._callerContext = callerContext;
          }

          public createAsync(entity: Entities.Warehouse): IAsyncResult<Entities.Warehouse> {
              var request: IDataServiceRequest = this._commerceContext.warehouses().create(entity);
              return request.execute<Entities.Warehouse>(this._callerContext);
          }

          public readAsync(inventLocation: string): IAsyncResult<Entities.Warehouse> {
              var request: IDataServiceRequest = this._commerceContext.warehouses(inventLocation).read();
              return request.execute<Entities.Warehouse>(this._callerContext);
          }

          public readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Warehouse[]> {
              var request: IDataServiceRequest = this._commerceContext.warehouses().resultSettings(queryResultSettings).read();
              return request.execute<Entities.Warehouse[]>(this._callerContext);
          }

          public updateAsync(entity: Entities.Warehouse): IAsyncResult<Entities.Warehouse> {
              var request: IDataServiceRequest = this._commerceContext.warehouses(entity.InventLocation).update(entity);
              return request.execute<Entities.Warehouse>(this._callerContext);
          }

          public deleteAsync(entity: Entities.Warehouse): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.warehouses(entity.InventLocation).delete();
              return request.execute<Entities.Warehouse>(this._callerContext);
          }

          public searchWarehouseLocationsAsyncAsync(searchCriteria: Entities.WarehouseLocationSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.WarehouseLocation[]> {
              var query = this._commerceContext.warehouses();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.searchWarehouseLocationsAsync(searchCriteria);
              return request.execute<Entities.WarehouseLocation[]>(this._callerContext);
          }
      
        public getWarehouseByIdAsync(inventLocation: string): IAsyncResult<Entities.Warehouse> {
              var request: IDataServiceRequest = this._commerceContext.warehouses(inventLocation).getWarehouseById();
              return request.execute<Entities.Warehouse>(this._callerContext);
          }
      
        public searchWarehousesAsync(searchText: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Warehouse[]> {
              var query = this._commerceContext.warehouses();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.searchWarehouses(searchText);
              return request.execute<Entities.Warehouse[]>(this._callerContext);
          }
      
        public getLocationsAsync(inventLocation: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.WarehouseLocation[]> {
              var query = this._commerceContext.warehouses(inventLocation);
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getLocations();
              return request.execute<Entities.WarehouseLocation[]>(this._callerContext);
          }
      
        public searchLocationsAsync(inventLocation: string, searchText: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.WarehouseLocation[]> {
              var query = this._commerceContext.warehouses(inventLocation);
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.searchLocations(searchText);
              return request.execute<Entities.WarehouseLocation[]>(this._callerContext);
          }
      
        public getAvailableFulfillmentLocationsAsync(deliveryModeTypeFilter: number, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.Warehouse[]> {
              var query = this._commerceContext.warehouses();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getAvailableFulfillmentLocations(deliveryModeTypeFilter);
              return request.execute<Entities.Warehouse[]>(this._callerContext);
          }
      
        
        }
      
      /*** ScanResultManager ***/
      export class ScanResultManager implements Commerce.Proxy.IScanResultManager {
          private _commerceContext: Commerce.Proxy.CommerceContext = null;
          private _callerContext: any;

          constructor(commerceContext: Commerce.Proxy.CommerceContext, callerContext) {
              this._commerceContext = commerceContext;
              this._callerContext = callerContext;
          }

          public createAsync(entity: Entities.ScanResult): IAsyncResult<Entities.ScanResult> {
              var request: IDataServiceRequest = this._commerceContext.scanResults().create(entity);
              return request.execute<Entities.ScanResult>(this._callerContext);
          }

          public readAsync(scannedText: string): IAsyncResult<Entities.ScanResult> {
              var request: IDataServiceRequest = this._commerceContext.scanResults(scannedText).read();
              return request.execute<Entities.ScanResult>(this._callerContext);
          }

          public readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.ScanResult[]> {
              var request: IDataServiceRequest = this._commerceContext.scanResults().resultSettings(queryResultSettings).read();
              return request.execute<Entities.ScanResult[]>(this._callerContext);
          }

          public updateAsync(entity: Entities.ScanResult): IAsyncResult<Entities.ScanResult> {
              var request: IDataServiceRequest = this._commerceContext.scanResults(entity.ScannedText).update(entity);
              return request.execute<Entities.ScanResult>(this._callerContext);
          }

          public deleteAsync(entity: Entities.ScanResult): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.scanResults(entity.ScannedText).delete();
              return request.execute<Entities.ScanResult>(this._callerContext);
          }

          
        }
      
      /*** SalesOrderContextualOperationsMapManager ***/
      export class SalesOrderContextualOperationsMapManager implements Commerce.Proxy.ISalesOrderContextualOperationsMapManager {
          private _commerceContext: Commerce.Proxy.CommerceContext = null;
          private _callerContext: any;

          constructor(commerceContext: Commerce.Proxy.CommerceContext, callerContext) {
              this._commerceContext = commerceContext;
              this._callerContext = callerContext;
          }

          public createAsync(entity: Entities.SalesOrderContextualOperationsMap): IAsyncResult<Entities.SalesOrderContextualOperationsMap> {
              var request: IDataServiceRequest = this._commerceContext.applicableOperations().create(entity);
              return request.execute<Entities.SalesOrderContextualOperationsMap>(this._callerContext);
          }

          public readAsync(id: string): IAsyncResult<Entities.SalesOrderContextualOperationsMap> {
              var request: IDataServiceRequest = this._commerceContext.applicableOperations(id).read();
              return request.execute<Entities.SalesOrderContextualOperationsMap>(this._callerContext);
          }

          public readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SalesOrderContextualOperationsMap[]> {
              var request: IDataServiceRequest = this._commerceContext.applicableOperations().resultSettings(queryResultSettings).read();
              return request.execute<Entities.SalesOrderContextualOperationsMap[]>(this._callerContext);
          }

          public updateAsync(entity: Entities.SalesOrderContextualOperationsMap): IAsyncResult<Entities.SalesOrderContextualOperationsMap> {
              var request: IDataServiceRequest = this._commerceContext.applicableOperations(entity.Id).update(entity);
              return request.execute<Entities.SalesOrderContextualOperationsMap>(this._callerContext);
          }

          public deleteAsync(entity: Entities.SalesOrderContextualOperationsMap): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.applicableOperations(entity.Id).delete();
              return request.execute<Entities.SalesOrderContextualOperationsMap>(this._callerContext);
          }

          public getOrdersAsync(orderSearchCriteria: Entities.OrderSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SalesOrderContextualOperationsMap[]> {
              var query = this._commerceContext.applicableOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getOrders(orderSearchCriteria);
              return request.execute<Entities.SalesOrderContextualOperationsMap[]>(this._callerContext);
          }
      
        public getFulfillmentLinesAsync(fulfillmentLineSearchCriteria: Entities.FulfillmentLineSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.FulfillmentLineContextualOperationsMap[]> {
              var query = this._commerceContext.applicableOperations();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getFulfillmentLines(fulfillmentLineSearchCriteria);
              return request.execute<Entities.FulfillmentLineContextualOperationsMap[]>(this._callerContext);
          }
      
        
        }
      
      /*** InventoryInboundOutboundDocumentManager ***/
      export class InventoryInboundOutboundDocumentManager implements Commerce.Proxy.IInventoryInboundOutboundDocumentManager {
          private _commerceContext: Commerce.Proxy.CommerceContext = null;
          private _callerContext: any;

          constructor(commerceContext: Commerce.Proxy.CommerceContext, callerContext) {
              this._commerceContext = commerceContext;
              this._callerContext = callerContext;
          }

          public createAsync(entity: Entities.InventoryInboundOutboundDocument): IAsyncResult<Entities.InventoryInboundOutboundDocument> {
              var request: IDataServiceRequest = this._commerceContext.inventoryInboundOutboundDocuments().create(entity);
              return request.execute<Entities.InventoryInboundOutboundDocument>(this._callerContext);
          }

          public readAsync(workDocumentId: string): IAsyncResult<Entities.InventoryInboundOutboundDocument> {
              var request: IDataServiceRequest = this._commerceContext.inventoryInboundOutboundDocuments(workDocumentId).read();
              return request.execute<Entities.InventoryInboundOutboundDocument>(this._callerContext);
          }

          public readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.InventoryInboundOutboundDocument[]> {
              var request: IDataServiceRequest = this._commerceContext.inventoryInboundOutboundDocuments().resultSettings(queryResultSettings).read();
              return request.execute<Entities.InventoryInboundOutboundDocument[]>(this._callerContext);
          }

          public updateAsync(entity: Entities.InventoryInboundOutboundDocument): IAsyncResult<Entities.InventoryInboundOutboundDocument> {
              var request: IDataServiceRequest = this._commerceContext.inventoryInboundOutboundDocuments(entity.WorkDocumentId).update(entity);
              return request.execute<Entities.InventoryInboundOutboundDocument>(this._callerContext);
          }

          public deleteAsync(entity: Entities.InventoryInboundOutboundDocument): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.inventoryInboundOutboundDocuments(entity.WorkDocumentId).delete();
              return request.execute<Entities.InventoryInboundOutboundDocument>(this._callerContext);
          }

          public updateStatusAsync(workDocumentId: string, documentStatus: number, documentVersion: number): IAsyncResult<Entities.InventoryInboundOutboundDocument> {
              var request: IDataServiceRequest = this._commerceContext.inventoryInboundOutboundDocuments(workDocumentId).updateStatus(documentStatus, documentVersion);
              return request.execute<Entities.InventoryInboundOutboundDocument>(this._callerContext);
          }
      
        public updateLinesByCriteriaAsync(workDocumentId: string, filterCriteria: Entities.InventoryDocumentLineFilterCriteria, updateLinesAction: Entities.InventoryDocumentUpdateLinesAction, returnUpdatedLinesPolicy: Entities.InventoryDocumentLineOperationResultSettings): IAsyncResult<Entities.InventoryInboundOutboundDocumentUpdateLinesByCriteriaResult> {
              var request: IDataServiceRequest = this._commerceContext.inventoryInboundOutboundDocuments(workDocumentId).updateLinesByCriteria(filterCriteria, updateLinesAction, returnUpdatedLinesPolicy);
              return request.execute<Entities.InventoryInboundOutboundDocumentUpdateLinesByCriteriaResult>(this._callerContext);
          }
      
        public updateLineAsync(workDocumentId: string, documentLine: Entities.InventoryInboundOutboundDocumentLine): IAsyncResult<Entities.InventoryInboundOutboundDocumentLine> {
              var request: IDataServiceRequest = this._commerceContext.inventoryInboundOutboundDocuments(workDocumentId).updateLine(documentLine);
              return request.execute<Entities.InventoryInboundOutboundDocumentLine>(this._callerContext);
          }
      
        public updateWorkingTerminalAsync(workDocumentId: string, documentVersion: number): IAsyncResult<Entities.InventoryInboundOutboundDocument> {
              var request: IDataServiceRequest = this._commerceContext.inventoryInboundOutboundDocuments(workDocumentId).updateWorkingTerminal(documentVersion);
              return request.execute<Entities.InventoryInboundOutboundDocument>(this._callerContext);
          }
      
        public updateNoteAsync(workDocumentId: string, documentNote: string, documentVersion: number): IAsyncResult<Entities.InventoryInboundOutboundDocument> {
              var request: IDataServiceRequest = this._commerceContext.inventoryInboundOutboundDocuments(workDocumentId).updateNote(documentNote, documentVersion);
              return request.execute<Entities.InventoryInboundOutboundDocument>(this._callerContext);
          }
      
        public updateReceiptIdAsync(workDocumentId: string, documentReceiptId: string, documentVersion: number): IAsyncResult<Entities.InventoryInboundOutboundDocument> {
              var request: IDataServiceRequest = this._commerceContext.inventoryInboundOutboundDocuments(workDocumentId).updateReceiptId(documentReceiptId, documentVersion);
              return request.execute<Entities.InventoryInboundOutboundDocument>(this._callerContext);
          }
      
        public commitAsync(workDocumentId: string, documentVersion: number): IAsyncResult<Entities.InventoryInboundOutboundDocument> {
              var request: IDataServiceRequest = this._commerceContext.inventoryInboundOutboundDocuments(workDocumentId).commit(documentVersion);
              return request.execute<Entities.InventoryInboundOutboundDocument>(this._callerContext);
          }
      
        public refreshOperationStatusAsync(workDocumentId: string): IAsyncResult<Entities.InventoryInboundOutboundDocument> {
              var request: IDataServiceRequest = this._commerceContext.inventoryInboundOutboundDocuments(workDocumentId).refreshOperationStatus();
              return request.execute<Entities.InventoryInboundOutboundDocument>(this._callerContext);
          }
      
        public startAsync(sourceDocumentId: string, sourceDocumentType: number): IAsyncResult<Entities.InventoryInboundOutboundDocument> {
              var request: IDataServiceRequest = this._commerceContext.inventoryInboundOutboundDocuments().start(sourceDocumentId, sourceDocumentType);
              return request.execute<Entities.InventoryInboundOutboundDocument>(this._callerContext);
          }
      
        public addLineAsync(workDocumentId: string, documentLine: Entities.InventoryInboundOutboundDocumentLine): IAsyncResult<Entities.InventoryInboundOutboundDocumentLine> {
              var request: IDataServiceRequest = this._commerceContext.inventoryInboundOutboundDocuments(workDocumentId).addLine(documentLine);
              return request.execute<Entities.InventoryInboundOutboundDocumentLine>(this._callerContext);
          }
      
        public deleteLineAsync(workDocumentId: string, documentLineId: string, documentLineVersion: number): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.inventoryInboundOutboundDocuments(workDocumentId).deleteLine(documentLineId, documentLineVersion);
              return request.execute<void>(this._callerContext);
          }
      
        public searchSerialNumberLinesAsync(workDocumentId: string, searchCriteria: Entities.InventoryDocumentSerialNumberLineSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.InventoryDocumentSerialNumberLine[]> {
              var query = this._commerceContext.inventoryInboundOutboundDocuments(workDocumentId);
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.searchSerialNumberLines(searchCriteria);
              return request.execute<Entities.InventoryDocumentSerialNumberLine[]>(this._callerContext);
          }
      
        public validateAsync(workDocumentId: string, documentVersion: number): IAsyncResult<Entities.InventoryDocumentValidationResultSummary> {
              var request: IDataServiceRequest = this._commerceContext.inventoryInboundOutboundDocuments(workDocumentId).validate(documentVersion);
              return request.execute<Entities.InventoryDocumentValidationResultSummary>(this._callerContext);
          }
      
        public searchValidationResultLinesAsync(searchCriteria: Entities.InventoryDocumentValidationResultSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.InventoryDocumentValidationResultLine[]> {
              var query = this._commerceContext.inventoryInboundOutboundDocuments();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.searchValidationResultLines(searchCriteria);
              return request.execute<Entities.InventoryDocumentValidationResultLine[]>(this._callerContext);
          }
      
        public syncSourceDocumentAsync(sourceDocumentId: string, sourceDocumentType: number): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.inventoryInboundOutboundDocuments().syncSourceDocument(sourceDocumentId, sourceDocumentType);
              return request.execute<void>(this._callerContext);
          }
      
        public searchInboundDocumentsAsync(searchCriteria: Entities.InventoryDocumentSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.InventoryInboundOutboundDocument[]> {
              var query = this._commerceContext.inventoryInboundOutboundDocuments();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.searchInboundDocuments(searchCriteria);
              return request.execute<Entities.InventoryInboundOutboundDocument[]>(this._callerContext);
          }
      
        public searchOutboundDocumentsAsync(searchCriteria: Entities.InventoryDocumentSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.InventoryInboundOutboundDocument[]> {
              var query = this._commerceContext.inventoryInboundOutboundDocuments();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.searchOutboundDocuments(searchCriteria);
              return request.execute<Entities.InventoryInboundOutboundDocument[]>(this._callerContext);
          }
      
        public searchLinesAsync(searchCriteria: Entities.InventoryDocumentLineSearchCriteria, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.InventoryInboundOutboundDocumentLine[]> {
              var query = this._commerceContext.inventoryInboundOutboundDocuments();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.searchLines(searchCriteria);
              return request.execute<Entities.InventoryInboundOutboundDocumentLine[]>(this._callerContext);
          }
      
        public resetSerialNumberLineAsync(workDocumentId: string, resetSerialNumberLineAction: Entities.InventoryDocumentSerialNumberLineResetAction): IAsyncResult<Entities.InventoryDocumentSerialNumberLine> {
              var request: IDataServiceRequest = this._commerceContext.inventoryInboundOutboundDocuments(workDocumentId).resetSerialNumberLine(resetSerialNumberLineAction);
              return request.execute<Entities.InventoryDocumentSerialNumberLine>(this._callerContext);
          }
      
        public updateSerialNumberLineAsync(workDocumentId: string, updateSerialNumberLineAction: Entities.InventoryDocumentSerialNumberLineUpdateAction): IAsyncResult<Entities.InventoryDocumentSerialNumberLine> {
              var request: IDataServiceRequest = this._commerceContext.inventoryInboundOutboundDocuments(workDocumentId).updateSerialNumberLine(updateSerialNumberLineAction);
              return request.execute<Entities.InventoryDocumentSerialNumberLine>(this._callerContext);
          }
      
        public getLinesSummaryAsync(workDocumentId: string): IAsyncResult<Entities.InventoryInboundOutboundDocumentLinesSummary> {
              var request: IDataServiceRequest = this._commerceContext.inventoryInboundOutboundDocuments(workDocumentId).getLinesSummary();
              return request.execute<Entities.InventoryInboundOutboundDocumentLinesSummary>(this._callerContext);
          }
      
        public getSerialNumberLinesSummaryAsync(workDocumentId: string, documentLineId: string): IAsyncResult<Entities.InventoryDocumentSerialNumberLinesSummary> {
              var request: IDataServiceRequest = this._commerceContext.inventoryInboundOutboundDocuments(workDocumentId).getSerialNumberLinesSummary(documentLineId);
              return request.execute<Entities.InventoryDocumentSerialNumberLinesSummary>(this._callerContext);
          }
      
        
        }
      
      /*** BusinessPartnerManager ***/
      export class BusinessPartnerManager implements Commerce.Proxy.IBusinessPartnerManager {
          private _commerceContext: Commerce.Proxy.CommerceContext = null;
          private _callerContext: any;

          constructor(commerceContext: Commerce.Proxy.CommerceContext, callerContext) {
              this._commerceContext = commerceContext;
              this._callerContext = callerContext;
          }

          public createAsync(entity: Entities.BusinessPartner): IAsyncResult<Entities.BusinessPartner> {
              var request: IDataServiceRequest = this._commerceContext.businessPartners().create(entity);
              return request.execute<Entities.BusinessPartner>(this._callerContext);
          }

          public readAsync(businessPartnerId: string): IAsyncResult<Entities.BusinessPartner> {
              var request: IDataServiceRequest = this._commerceContext.businessPartners(businessPartnerId).read();
              return request.execute<Entities.BusinessPartner>(this._callerContext);
          }

          public readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.BusinessPartner[]> {
              var request: IDataServiceRequest = this._commerceContext.businessPartners().resultSettings(queryResultSettings).read();
              return request.execute<Entities.BusinessPartner[]>(this._callerContext);
          }

          public updateAsync(entity: Entities.BusinessPartner): IAsyncResult<Entities.BusinessPartner> {
              var request: IDataServiceRequest = this._commerceContext.businessPartners(entity.BusinessPartnerId).update(entity);
              return request.execute<Entities.BusinessPartner>(this._callerContext);
          }

          public deleteAsync(entity: Entities.BusinessPartner): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.businessPartners(entity.BusinessPartnerId).delete();
              return request.execute<Entities.BusinessPartner>(this._callerContext);
          }

          public createProspectAsync(businessPartnerProspect: Entities.BusinessPartnerProspect): IAsyncResult<Entities.BusinessPartnerProspect> {
              var request: IDataServiceRequest = this._commerceContext.businessPartners().createProspect(businessPartnerProspect);
              return request.execute<Entities.BusinessPartnerProspect>(this._callerContext);
          }
      
        public getCurrentAsync(): IAsyncResult<Entities.BusinessPartner> {
              var request: IDataServiceRequest = this._commerceContext.businessPartners().getCurrent();
              return request.execute<Entities.BusinessPartner>(this._callerContext);
          }
      
        public getUsersAsync(businessPartnerId: string, queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.BusinessPartnerUser[]> {
              var query = this._commerceContext.businessPartners(businessPartnerId);
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getUsers();
              return request.execute<Entities.BusinessPartnerUser[]>(this._callerContext);
          }
      
        
        }
      
      /*** BusinessPartnerUserManager ***/
      export class BusinessPartnerUserManager implements Commerce.Proxy.IBusinessPartnerUserManager {
          private _commerceContext: Commerce.Proxy.CommerceContext = null;
          private _callerContext: any;

          constructor(commerceContext: Commerce.Proxy.CommerceContext, callerContext) {
              this._commerceContext = commerceContext;
              this._callerContext = callerContext;
          }

          public createAsync(entity: Entities.BusinessPartnerUser): IAsyncResult<Entities.BusinessPartnerUser> {
              var request: IDataServiceRequest = this._commerceContext.businessPartnerUsers().create(entity);
              return request.execute<Entities.BusinessPartnerUser>(this._callerContext);
          }

          public readAsync(email: string): IAsyncResult<Entities.BusinessPartnerUser> {
              var request: IDataServiceRequest = this._commerceContext.businessPartnerUsers(email).read();
              return request.execute<Entities.BusinessPartnerUser>(this._callerContext);
          }

          public readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.BusinessPartnerUser[]> {
              var request: IDataServiceRequest = this._commerceContext.businessPartnerUsers().resultSettings(queryResultSettings).read();
              return request.execute<Entities.BusinessPartnerUser[]>(this._callerContext);
          }

          public updateAsync(entity: Entities.BusinessPartnerUser): IAsyncResult<Entities.BusinessPartnerUser> {
              var request: IDataServiceRequest = this._commerceContext.businessPartnerUsers(entity.Email).update(entity);
              return request.execute<Entities.BusinessPartnerUser>(this._callerContext);
          }

          public deleteAsync(entity: Entities.BusinessPartnerUser): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.businessPartnerUsers(entity.Email).delete();
              return request.execute<Entities.BusinessPartnerUser>(this._callerContext);
          }

          
        }
      
      /*** SuspendedCartManager ***/
      export class SuspendedCartManager implements Commerce.Proxy.ISuspendedCartManager {
          private _commerceContext: Commerce.Proxy.CommerceContext = null;
          private _callerContext: any;

          constructor(commerceContext: Commerce.Proxy.CommerceContext, callerContext) {
              this._commerceContext = commerceContext;
              this._callerContext = callerContext;
          }

          public createAsync(entity: Entities.SuspendedCart): IAsyncResult<Entities.SuspendedCart> {
              var request: IDataServiceRequest = this._commerceContext.suspendedCarts().create(entity);
              return request.execute<Entities.SuspendedCart>(this._callerContext);
          }

          public readAsync(id: string): IAsyncResult<Entities.SuspendedCart> {
              var request: IDataServiceRequest = this._commerceContext.suspendedCarts(id).read();
              return request.execute<Entities.SuspendedCart>(this._callerContext);
          }

          public readAllAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SuspendedCart[]> {
              var request: IDataServiceRequest = this._commerceContext.suspendedCarts().resultSettings(queryResultSettings).read();
              return request.execute<Entities.SuspendedCart[]>(this._callerContext);
          }

          public updateAsync(entity: Entities.SuspendedCart): IAsyncResult<Entities.SuspendedCart> {
              var request: IDataServiceRequest = this._commerceContext.suspendedCarts(entity.Id).update(entity);
              return request.execute<Entities.SuspendedCart>(this._callerContext);
          }

          public deleteAsync(entity: Entities.SuspendedCart): IVoidAsyncResult {
              var request: IDataServiceRequest = this._commerceContext.suspendedCarts(entity.Id).delete();
              return request.execute<Entities.SuspendedCart>(this._callerContext);
          }

          public getAllSuspendedCartsAsync(queryResultSettings: Entities.QueryResultSettings): IAsyncResult<Entities.SuspendedCart[]> {
              var query = this._commerceContext.suspendedCarts();
              query.resultSettings(queryResultSettings);
              var request: IDataServiceRequest = query.getAllSuspendedCarts();
              return request.execute<Entities.SuspendedCart[]>(this._callerContext);
          }
      
        
        }
      
    }
  